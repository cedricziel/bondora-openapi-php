<?php
/**
 * ReportApi
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CedricZiel\OpenAPI\BondoraPHP\ApiException;
use CedricZiel\OpenAPI\BondoraPHP\Configuration;
use CedricZiel\OpenAPI\BondoraPHP\HeaderSelector;
use CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * ReportApi Class Doc Comment
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reportGenerateReport
     *
     * Request to generate specified report type for set period.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\ReportCreateRequest $request request (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultCreateReport
     */
    public function reportGenerateReport($request)
    {
        list($response) = $this->reportGenerateReportWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation reportGenerateReportWithHttpInfo
     *
     * Request to generate specified report type for set period.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\ReportCreateRequest $request (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultCreateReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportGenerateReportWithHttpInfo($request)
    {
        $request = $this->reportGenerateReportRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultCreateReport' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultCreateReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultCreateReport';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultCreateReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportGenerateReportAsync
     *
     * Request to generate specified report type for set period.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\ReportCreateRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGenerateReportAsync($request)
    {
        return $this->reportGenerateReportAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportGenerateReportAsyncWithHttpInfo
     *
     * Request to generate specified report type for set period.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\ReportCreateRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGenerateReportAsyncWithHttpInfo($request)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultCreateReport';
        $request = $this->reportGenerateReportRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportGenerateReport'
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\ReportCreateRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportGenerateReportRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling reportGenerateReport'
            );
        }

        $resourcePath = '/api/v1/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportGetPublicDataset
     *
     * Provides daily public dataset of all loan data that is not covered by the data protection laws.
     *
     * @param  string[] $requestLoanIds Specific loans to search (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  \DateTime $requestLoanDateFrom Loan start date from (optional)
     * @param  \DateTime $requestLoanDateTo Loan start date to (optional)
     * @param  int $requestPageSize Max items in result, up to 10000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultPublicDataset
     */
    public function reportGetPublicDataset($requestLoanIds = null, $requestCountries = null, $requestRatings = null, $requestLoanDateFrom = null, $requestLoanDateTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        list($response) = $this->reportGetPublicDatasetWithHttpInfo($requestLoanIds, $requestCountries, $requestRatings, $requestLoanDateFrom, $requestLoanDateTo, $requestPageSize, $requestPageNr);
        return $response;
    }

    /**
     * Operation reportGetPublicDatasetWithHttpInfo
     *
     * Provides daily public dataset of all loan data that is not covered by the data protection laws.
     *
     * @param  string[] $requestLoanIds Specific loans to search (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  \DateTime $requestLoanDateFrom Loan start date from (optional)
     * @param  \DateTime $requestLoanDateTo Loan start date to (optional)
     * @param  int $requestPageSize Max items in result, up to 10000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultPublicDataset, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportGetPublicDatasetWithHttpInfo($requestLoanIds = null, $requestCountries = null, $requestRatings = null, $requestLoanDateFrom = null, $requestLoanDateTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        $request = $this->reportGetPublicDatasetRequest($requestLoanIds, $requestCountries, $requestRatings, $requestLoanDateFrom, $requestLoanDateTo, $requestPageSize, $requestPageNr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultPublicDataset' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultPublicDataset', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultPublicDataset';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultPublicDataset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportGetPublicDatasetAsync
     *
     * Provides daily public dataset of all loan data that is not covered by the data protection laws.
     *
     * @param  string[] $requestLoanIds Specific loans to search (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  \DateTime $requestLoanDateFrom Loan start date from (optional)
     * @param  \DateTime $requestLoanDateTo Loan start date to (optional)
     * @param  int $requestPageSize Max items in result, up to 10000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetPublicDatasetAsync($requestLoanIds = null, $requestCountries = null, $requestRatings = null, $requestLoanDateFrom = null, $requestLoanDateTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        return $this->reportGetPublicDatasetAsyncWithHttpInfo($requestLoanIds, $requestCountries, $requestRatings, $requestLoanDateFrom, $requestLoanDateTo, $requestPageSize, $requestPageNr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportGetPublicDatasetAsyncWithHttpInfo
     *
     * Provides daily public dataset of all loan data that is not covered by the data protection laws.
     *
     * @param  string[] $requestLoanIds Specific loans to search (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  \DateTime $requestLoanDateFrom Loan start date from (optional)
     * @param  \DateTime $requestLoanDateTo Loan start date to (optional)
     * @param  int $requestPageSize Max items in result, up to 10000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetPublicDatasetAsyncWithHttpInfo($requestLoanIds = null, $requestCountries = null, $requestRatings = null, $requestLoanDateFrom = null, $requestLoanDateTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultPublicDataset';
        $request = $this->reportGetPublicDatasetRequest($requestLoanIds, $requestCountries, $requestRatings, $requestLoanDateFrom, $requestLoanDateTo, $requestPageSize, $requestPageNr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportGetPublicDataset'
     *
     * @param  string[] $requestLoanIds Specific loans to search (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  \DateTime $requestLoanDateFrom Loan start date from (optional)
     * @param  \DateTime $requestLoanDateTo Loan start date to (optional)
     * @param  int $requestPageSize Max items in result, up to 10000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportGetPublicDatasetRequest($requestLoanIds = null, $requestCountries = null, $requestRatings = null, $requestLoanDateFrom = null, $requestLoanDateTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        if ($requestPageSize !== null && $requestPageSize > 10000) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling ReportApi.reportGetPublicDataset, must be smaller than or equal to 10000.');
        }
        if ($requestPageSize !== null && $requestPageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling ReportApi.reportGetPublicDataset, must be bigger than or equal to 1.');
        }

        if ($requestPageNr !== null && $requestPageNr > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling ReportApi.reportGetPublicDataset, must be smaller than or equal to 2147483647.');
        }
        if ($requestPageNr !== null && $requestPageNr < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling ReportApi.reportGetPublicDataset, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api/v1/publicdataset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($requestLoanIds)) {
            $requestLoanIds = ObjectSerializer::serializeCollection($requestLoanIds, 'multi', true);
        }
        if ($requestLoanIds !== null) {
            $queryParams['request.loanIds'] = ObjectSerializer::toQueryValue($requestLoanIds);
        }
        // query params
        if (is_array($requestCountries)) {
            $requestCountries = ObjectSerializer::serializeCollection($requestCountries, 'multi', true);
        }
        if ($requestCountries !== null) {
            $queryParams['request.countries'] = ObjectSerializer::toQueryValue($requestCountries);
        }
        // query params
        if (is_array($requestRatings)) {
            $requestRatings = ObjectSerializer::serializeCollection($requestRatings, 'multi', true);
        }
        if ($requestRatings !== null) {
            $queryParams['request.ratings'] = ObjectSerializer::toQueryValue($requestRatings);
        }
        // query params
        if ($requestLoanDateFrom !== null) {
            $queryParams['request.loanDateFrom'] = ObjectSerializer::toQueryValue($requestLoanDateFrom);
        }
        // query params
        if ($requestLoanDateTo !== null) {
            $queryParams['request.loanDateTo'] = ObjectSerializer::toQueryValue($requestLoanDateTo);
        }
        // query params
        if ($requestPageSize !== null) {
            $queryParams['request.pageSize'] = ObjectSerializer::toQueryValue($requestPageSize);
        }
        // query params
        if ($requestPageNr !== null) {
            $queryParams['request.pageNr'] = ObjectSerializer::toQueryValue($requestPageNr);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportGetReport
     *
     * Get report data for specified report identificator.
     *
     * @param  string $id ReportId (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReport
     */
    public function reportGetReport($id)
    {
        list($response) = $this->reportGetReportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation reportGetReportWithHttpInfo
     *
     * Get report data for specified report identificator.
     *
     * @param  string $id ReportId (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportGetReportWithHttpInfo($id)
    {
        $request = $this->reportGetReportRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReport' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReport', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReport';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportGetReportAsync
     *
     * Get report data for specified report identificator.
     *
     * @param  string $id ReportId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetReportAsync($id)
    {
        return $this->reportGetReportAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportGetReportAsyncWithHttpInfo
     *
     * Get report data for specified report identificator.
     *
     * @param  string $id ReportId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetReportAsyncWithHttpInfo($id)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReport';
        $request = $this->reportGetReportRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportGetReport'
     *
     * @param  string $id ReportId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportGetReportRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reportGetReport'
            );
        }

        $resourcePath = '/api/v1/report/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportGetReportList
     *
     * List of all reports
     *
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReportList
     */
    public function reportGetReportList()
    {
        list($response) = $this->reportGetReportListWithHttpInfo();
        return $response;
    }

    /**
     * Operation reportGetReportListWithHttpInfo
     *
     * List of all reports
     *
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReportList, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportGetReportListWithHttpInfo()
    {
        $request = $this->reportGetReportListRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReportList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReportList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReportList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReportList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportGetReportListAsync
     *
     * List of all reports
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetReportListAsync()
    {
        return $this->reportGetReportListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportGetReportListAsyncWithHttpInfo
     *
     * List of all reports
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportGetReportListAsyncWithHttpInfo()
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultReportList';
        $request = $this->reportGetReportListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportGetReportList'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportGetReportListRequest()
    {

        $resourcePath = '/api/v1/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
