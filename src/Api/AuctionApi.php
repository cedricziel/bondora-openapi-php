<?php
/**
 * AuctionApi
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CedricZiel\OpenAPI\BondoraPHP\ApiException;
use CedricZiel\OpenAPI\BondoraPHP\Configuration;
use CedricZiel\OpenAPI\BondoraPHP\HeaderSelector;
use CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * AuctionApi Class Doc Comment
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuctionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation auctionGet
     *
     * Gets Auction info by auction identifier
     *
     * @param  string $id Auction&#39;s identifier (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultExtendedAuction
     */
    public function auctionGet($id)
    {
        list($response) = $this->auctionGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation auctionGetWithHttpInfo
     *
     * Gets Auction info by auction identifier
     *
     * @param  string $id Auction&#39;s identifier (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultExtendedAuction, HTTP status code, HTTP response headers (array of strings)
     */
    public function auctionGetWithHttpInfo($id)
    {
        $request = $this->auctionGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultExtendedAuction' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultExtendedAuction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultExtendedAuction';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultExtendedAuction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auctionGetAsync
     *
     * Gets Auction info by auction identifier
     *
     * @param  string $id Auction&#39;s identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auctionGetAsync($id)
    {
        return $this->auctionGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auctionGetAsyncWithHttpInfo
     *
     * Gets Auction info by auction identifier
     *
     * @param  string $id Auction&#39;s identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auctionGetAsyncWithHttpInfo($id)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultExtendedAuction';
        $request = $this->auctionGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auctionGet'
     *
     * @param  string $id Auction&#39;s identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auctionGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling auctionGet'
            );
        }

        $resourcePath = '/api/v1/auction/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auctionGetActive
     *
     * Gets list of active Auctions
     *
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestSumMin Minimal loan amount (optional)
     * @param  int $requestSumMax Maximum loan amount (optional)
     * @param  int[] $requestTerms Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestLoanNumber Loan number (optional)
     * @param  string $requestUserName Username (optional)
     * @param  \DateTime $requestApplicationDateFrom Loan application started date from (optional)
     * @param  \DateTime $requestApplicationDateTo Loan application started date to (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string[] $requestCreditScoresEeMini Credit score for EE loans (optional)
     * @param  double $requestInterestMin Minimum interest (optional)
     * @param  double $requestInterestMax Maximum interest (optional)
     * @param  double $requestIncomeTotalMin Minimal total income (optional)
     * @param  double $requestIncomeTotalMax Maximum total income (optional)
     * @param  int $requestModelVersion Model version (optional)
     * @param  double $requestExpectedLossMin Minimal expected loss (optional)
     * @param  double $requestExpectedLossMax Maximum expected loss (optional)
     * @param  \DateTime $requestListedOnUTCFrom Date when auction was published from (optional)
     * @param  \DateTime $requestListedOnUTCTo Date when auction was published to (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultAuctions
     */
    public function auctionGetActive($requestCountries = null, $requestRatings = null, $requestGender = null, $requestSumMin = null, $requestSumMax = null, $requestTerms = null, $requestAgeMin = null, $requestAgeMax = null, $requestLoanNumber = null, $requestUserName = null, $requestApplicationDateFrom = null, $requestApplicationDateTo = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestCreditScoresEeMini = null, $requestInterestMin = null, $requestInterestMax = null, $requestIncomeTotalMin = null, $requestIncomeTotalMax = null, $requestModelVersion = null, $requestExpectedLossMin = null, $requestExpectedLossMax = null, $requestListedOnUTCFrom = null, $requestListedOnUTCTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        list($response) = $this->auctionGetActiveWithHttpInfo($requestCountries, $requestRatings, $requestGender, $requestSumMin, $requestSumMax, $requestTerms, $requestAgeMin, $requestAgeMax, $requestLoanNumber, $requestUserName, $requestApplicationDateFrom, $requestApplicationDateTo, $requestCreditScoreMin, $requestCreditScoreMax, $requestCreditScoresEeMini, $requestInterestMin, $requestInterestMax, $requestIncomeTotalMin, $requestIncomeTotalMax, $requestModelVersion, $requestExpectedLossMin, $requestExpectedLossMax, $requestListedOnUTCFrom, $requestListedOnUTCTo, $requestPageSize, $requestPageNr);
        return $response;
    }

    /**
     * Operation auctionGetActiveWithHttpInfo
     *
     * Gets list of active Auctions
     *
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestSumMin Minimal loan amount (optional)
     * @param  int $requestSumMax Maximum loan amount (optional)
     * @param  int[] $requestTerms Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestLoanNumber Loan number (optional)
     * @param  string $requestUserName Username (optional)
     * @param  \DateTime $requestApplicationDateFrom Loan application started date from (optional)
     * @param  \DateTime $requestApplicationDateTo Loan application started date to (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string[] $requestCreditScoresEeMini Credit score for EE loans (optional)
     * @param  double $requestInterestMin Minimum interest (optional)
     * @param  double $requestInterestMax Maximum interest (optional)
     * @param  double $requestIncomeTotalMin Minimal total income (optional)
     * @param  double $requestIncomeTotalMax Maximum total income (optional)
     * @param  int $requestModelVersion Model version (optional)
     * @param  double $requestExpectedLossMin Minimal expected loss (optional)
     * @param  double $requestExpectedLossMax Maximum expected loss (optional)
     * @param  \DateTime $requestListedOnUTCFrom Date when auction was published from (optional)
     * @param  \DateTime $requestListedOnUTCTo Date when auction was published to (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultAuctions, HTTP status code, HTTP response headers (array of strings)
     */
    public function auctionGetActiveWithHttpInfo($requestCountries = null, $requestRatings = null, $requestGender = null, $requestSumMin = null, $requestSumMax = null, $requestTerms = null, $requestAgeMin = null, $requestAgeMax = null, $requestLoanNumber = null, $requestUserName = null, $requestApplicationDateFrom = null, $requestApplicationDateTo = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestCreditScoresEeMini = null, $requestInterestMin = null, $requestInterestMax = null, $requestIncomeTotalMin = null, $requestIncomeTotalMax = null, $requestModelVersion = null, $requestExpectedLossMin = null, $requestExpectedLossMax = null, $requestListedOnUTCFrom = null, $requestListedOnUTCTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        $request = $this->auctionGetActiveRequest($requestCountries, $requestRatings, $requestGender, $requestSumMin, $requestSumMax, $requestTerms, $requestAgeMin, $requestAgeMax, $requestLoanNumber, $requestUserName, $requestApplicationDateFrom, $requestApplicationDateTo, $requestCreditScoreMin, $requestCreditScoreMax, $requestCreditScoresEeMini, $requestInterestMin, $requestInterestMax, $requestIncomeTotalMin, $requestIncomeTotalMax, $requestModelVersion, $requestExpectedLossMin, $requestExpectedLossMax, $requestListedOnUTCFrom, $requestListedOnUTCTo, $requestPageSize, $requestPageNr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultAuctions' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultAuctions', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultAuctions';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultAuctions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auctionGetActiveAsync
     *
     * Gets list of active Auctions
     *
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestSumMin Minimal loan amount (optional)
     * @param  int $requestSumMax Maximum loan amount (optional)
     * @param  int[] $requestTerms Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestLoanNumber Loan number (optional)
     * @param  string $requestUserName Username (optional)
     * @param  \DateTime $requestApplicationDateFrom Loan application started date from (optional)
     * @param  \DateTime $requestApplicationDateTo Loan application started date to (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string[] $requestCreditScoresEeMini Credit score for EE loans (optional)
     * @param  double $requestInterestMin Minimum interest (optional)
     * @param  double $requestInterestMax Maximum interest (optional)
     * @param  double $requestIncomeTotalMin Minimal total income (optional)
     * @param  double $requestIncomeTotalMax Maximum total income (optional)
     * @param  int $requestModelVersion Model version (optional)
     * @param  double $requestExpectedLossMin Minimal expected loss (optional)
     * @param  double $requestExpectedLossMax Maximum expected loss (optional)
     * @param  \DateTime $requestListedOnUTCFrom Date when auction was published from (optional)
     * @param  \DateTime $requestListedOnUTCTo Date when auction was published to (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auctionGetActiveAsync($requestCountries = null, $requestRatings = null, $requestGender = null, $requestSumMin = null, $requestSumMax = null, $requestTerms = null, $requestAgeMin = null, $requestAgeMax = null, $requestLoanNumber = null, $requestUserName = null, $requestApplicationDateFrom = null, $requestApplicationDateTo = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestCreditScoresEeMini = null, $requestInterestMin = null, $requestInterestMax = null, $requestIncomeTotalMin = null, $requestIncomeTotalMax = null, $requestModelVersion = null, $requestExpectedLossMin = null, $requestExpectedLossMax = null, $requestListedOnUTCFrom = null, $requestListedOnUTCTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        return $this->auctionGetActiveAsyncWithHttpInfo($requestCountries, $requestRatings, $requestGender, $requestSumMin, $requestSumMax, $requestTerms, $requestAgeMin, $requestAgeMax, $requestLoanNumber, $requestUserName, $requestApplicationDateFrom, $requestApplicationDateTo, $requestCreditScoreMin, $requestCreditScoreMax, $requestCreditScoresEeMini, $requestInterestMin, $requestInterestMax, $requestIncomeTotalMin, $requestIncomeTotalMax, $requestModelVersion, $requestExpectedLossMin, $requestExpectedLossMax, $requestListedOnUTCFrom, $requestListedOnUTCTo, $requestPageSize, $requestPageNr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auctionGetActiveAsyncWithHttpInfo
     *
     * Gets list of active Auctions
     *
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestSumMin Minimal loan amount (optional)
     * @param  int $requestSumMax Maximum loan amount (optional)
     * @param  int[] $requestTerms Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestLoanNumber Loan number (optional)
     * @param  string $requestUserName Username (optional)
     * @param  \DateTime $requestApplicationDateFrom Loan application started date from (optional)
     * @param  \DateTime $requestApplicationDateTo Loan application started date to (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string[] $requestCreditScoresEeMini Credit score for EE loans (optional)
     * @param  double $requestInterestMin Minimum interest (optional)
     * @param  double $requestInterestMax Maximum interest (optional)
     * @param  double $requestIncomeTotalMin Minimal total income (optional)
     * @param  double $requestIncomeTotalMax Maximum total income (optional)
     * @param  int $requestModelVersion Model version (optional)
     * @param  double $requestExpectedLossMin Minimal expected loss (optional)
     * @param  double $requestExpectedLossMax Maximum expected loss (optional)
     * @param  \DateTime $requestListedOnUTCFrom Date when auction was published from (optional)
     * @param  \DateTime $requestListedOnUTCTo Date when auction was published to (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auctionGetActiveAsyncWithHttpInfo($requestCountries = null, $requestRatings = null, $requestGender = null, $requestSumMin = null, $requestSumMax = null, $requestTerms = null, $requestAgeMin = null, $requestAgeMax = null, $requestLoanNumber = null, $requestUserName = null, $requestApplicationDateFrom = null, $requestApplicationDateTo = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestCreditScoresEeMini = null, $requestInterestMin = null, $requestInterestMax = null, $requestIncomeTotalMin = null, $requestIncomeTotalMax = null, $requestModelVersion = null, $requestExpectedLossMin = null, $requestExpectedLossMax = null, $requestListedOnUTCFrom = null, $requestListedOnUTCTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultAuctions';
        $request = $this->auctionGetActiveRequest($requestCountries, $requestRatings, $requestGender, $requestSumMin, $requestSumMax, $requestTerms, $requestAgeMin, $requestAgeMax, $requestLoanNumber, $requestUserName, $requestApplicationDateFrom, $requestApplicationDateTo, $requestCreditScoreMin, $requestCreditScoreMax, $requestCreditScoresEeMini, $requestInterestMin, $requestInterestMax, $requestIncomeTotalMin, $requestIncomeTotalMax, $requestModelVersion, $requestExpectedLossMin, $requestExpectedLossMax, $requestListedOnUTCFrom, $requestListedOnUTCTo, $requestPageSize, $requestPageNr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auctionGetActive'
     *
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestSumMin Minimal loan amount (optional)
     * @param  int $requestSumMax Maximum loan amount (optional)
     * @param  int[] $requestTerms Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestLoanNumber Loan number (optional)
     * @param  string $requestUserName Username (optional)
     * @param  \DateTime $requestApplicationDateFrom Loan application started date from (optional)
     * @param  \DateTime $requestApplicationDateTo Loan application started date to (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string[] $requestCreditScoresEeMini Credit score for EE loans (optional)
     * @param  double $requestInterestMin Minimum interest (optional)
     * @param  double $requestInterestMax Maximum interest (optional)
     * @param  double $requestIncomeTotalMin Minimal total income (optional)
     * @param  double $requestIncomeTotalMax Maximum total income (optional)
     * @param  int $requestModelVersion Model version (optional)
     * @param  double $requestExpectedLossMin Minimal expected loss (optional)
     * @param  double $requestExpectedLossMax Maximum expected loss (optional)
     * @param  \DateTime $requestListedOnUTCFrom Date when auction was published from (optional)
     * @param  \DateTime $requestListedOnUTCTo Date when auction was published to (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auctionGetActiveRequest($requestCountries = null, $requestRatings = null, $requestGender = null, $requestSumMin = null, $requestSumMax = null, $requestTerms = null, $requestAgeMin = null, $requestAgeMax = null, $requestLoanNumber = null, $requestUserName = null, $requestApplicationDateFrom = null, $requestApplicationDateTo = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestCreditScoresEeMini = null, $requestInterestMin = null, $requestInterestMax = null, $requestIncomeTotalMin = null, $requestIncomeTotalMax = null, $requestModelVersion = null, $requestExpectedLossMin = null, $requestExpectedLossMax = null, $requestListedOnUTCFrom = null, $requestListedOnUTCTo = null, $requestPageSize = null, $requestPageNr = null)
    {
        if ($requestPageSize !== null && $requestPageSize > 20000) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling AuctionApi.auctionGetActive, must be smaller than or equal to 20000.');
        }
        if ($requestPageSize !== null && $requestPageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling AuctionApi.auctionGetActive, must be bigger than or equal to 1.');
        }

        if ($requestPageNr !== null && $requestPageNr > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling AuctionApi.auctionGetActive, must be smaller than or equal to 2147483647.');
        }
        if ($requestPageNr !== null && $requestPageNr < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling AuctionApi.auctionGetActive, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api/v1/auctions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($requestCountries)) {
            $requestCountries = ObjectSerializer::serializeCollection($requestCountries, 'multi', true);
        }
        if ($requestCountries !== null) {
            $queryParams['request.countries'] = ObjectSerializer::toQueryValue($requestCountries);
        }
        // query params
        if (is_array($requestRatings)) {
            $requestRatings = ObjectSerializer::serializeCollection($requestRatings, 'multi', true);
        }
        if ($requestRatings !== null) {
            $queryParams['request.ratings'] = ObjectSerializer::toQueryValue($requestRatings);
        }
        // query params
        if ($requestGender !== null) {
            $queryParams['request.gender'] = ObjectSerializer::toQueryValue($requestGender);
        }
        // query params
        if ($requestSumMin !== null) {
            $queryParams['request.sumMin'] = ObjectSerializer::toQueryValue($requestSumMin);
        }
        // query params
        if ($requestSumMax !== null) {
            $queryParams['request.sumMax'] = ObjectSerializer::toQueryValue($requestSumMax);
        }
        // query params
        if (is_array($requestTerms)) {
            $requestTerms = ObjectSerializer::serializeCollection($requestTerms, 'multi', true);
        }
        if ($requestTerms !== null) {
            $queryParams['request.terms'] = ObjectSerializer::toQueryValue($requestTerms);
        }
        // query params
        if ($requestAgeMin !== null) {
            $queryParams['request.ageMin'] = ObjectSerializer::toQueryValue($requestAgeMin);
        }
        // query params
        if ($requestAgeMax !== null) {
            $queryParams['request.ageMax'] = ObjectSerializer::toQueryValue($requestAgeMax);
        }
        // query params
        if ($requestLoanNumber !== null) {
            $queryParams['request.loanNumber'] = ObjectSerializer::toQueryValue($requestLoanNumber);
        }
        // query params
        if ($requestUserName !== null) {
            $queryParams['request.userName'] = ObjectSerializer::toQueryValue($requestUserName);
        }
        // query params
        if ($requestApplicationDateFrom !== null) {
            $queryParams['request.applicationDateFrom'] = ObjectSerializer::toQueryValue($requestApplicationDateFrom);
        }
        // query params
        if ($requestApplicationDateTo !== null) {
            $queryParams['request.applicationDateTo'] = ObjectSerializer::toQueryValue($requestApplicationDateTo);
        }
        // query params
        if ($requestCreditScoreMin !== null) {
            $queryParams['request.creditScoreMin'] = ObjectSerializer::toQueryValue($requestCreditScoreMin);
        }
        // query params
        if ($requestCreditScoreMax !== null) {
            $queryParams['request.creditScoreMax'] = ObjectSerializer::toQueryValue($requestCreditScoreMax);
        }
        // query params
        if (is_array($requestCreditScoresEeMini)) {
            $requestCreditScoresEeMini = ObjectSerializer::serializeCollection($requestCreditScoresEeMini, 'multi', true);
        }
        if ($requestCreditScoresEeMini !== null) {
            $queryParams['request.creditScoresEeMini'] = ObjectSerializer::toQueryValue($requestCreditScoresEeMini);
        }
        // query params
        if ($requestInterestMin !== null) {
            $queryParams['request.interestMin'] = ObjectSerializer::toQueryValue($requestInterestMin);
        }
        // query params
        if ($requestInterestMax !== null) {
            $queryParams['request.interestMax'] = ObjectSerializer::toQueryValue($requestInterestMax);
        }
        // query params
        if ($requestIncomeTotalMin !== null) {
            $queryParams['request.incomeTotalMin'] = ObjectSerializer::toQueryValue($requestIncomeTotalMin);
        }
        // query params
        if ($requestIncomeTotalMax !== null) {
            $queryParams['request.incomeTotalMax'] = ObjectSerializer::toQueryValue($requestIncomeTotalMax);
        }
        // query params
        if ($requestModelVersion !== null) {
            $queryParams['request.modelVersion'] = ObjectSerializer::toQueryValue($requestModelVersion);
        }
        // query params
        if ($requestExpectedLossMin !== null) {
            $queryParams['request.expectedLossMin'] = ObjectSerializer::toQueryValue($requestExpectedLossMin);
        }
        // query params
        if ($requestExpectedLossMax !== null) {
            $queryParams['request.expectedLossMax'] = ObjectSerializer::toQueryValue($requestExpectedLossMax);
        }
        // query params
        if ($requestListedOnUTCFrom !== null) {
            $queryParams['request.listedOnUTCFrom'] = ObjectSerializer::toQueryValue($requestListedOnUTCFrom);
        }
        // query params
        if ($requestListedOnUTCTo !== null) {
            $queryParams['request.listedOnUTCTo'] = ObjectSerializer::toQueryValue($requestListedOnUTCTo);
        }
        // query params
        if ($requestPageSize !== null) {
            $queryParams['request.pageSize'] = ObjectSerializer::toQueryValue($requestPageSize);
        }
        // query params
        if ($requestPageNr !== null) {
            $queryParams['request.pageNr'] = ObjectSerializer::toQueryValue($requestPageNr);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
