<?php
/**
 * AccountApi
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CedricZiel\OpenAPI\BondoraPHP\ApiException;
use CedricZiel\OpenAPI\BondoraPHP\Configuration;
use CedricZiel\OpenAPI\BondoraPHP\HeaderSelector;
use CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * AccountApi Class Doc Comment
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountGetActive
     *
     * Gets list of your investments
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Defaulted date from (optional)
     * @param  \DateTime $requestRescheduledTo Defaulted date to (optional)
     * @param  \DateTime $requestSoldDateFrom When it was sold on Secondary market from (optional)
     * @param  \DateTime $requestSoldDateTo When it was sold on Secondary market to (optional)
     * @param  \DateTime $requestPurchaseDateFrom When you received the investment Auctions/Secondary market from (optional)
     * @param  \DateTime $requestPurchaseDateTo When you received the investment Auctions/Secondary market to (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;0 Reserved&lt;/para&gt;&lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;3 Cancelled&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt;&lt;para&gt;4 Repaid&lt;/para&gt;&lt;para&gt;8 Released&lt;/para&gt; (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  int $requestLoanDebtManagementStage Latest debt management stage (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  int $requestAuctionBidType Auction bid type (optional)
     * @param  int $requestSalesStatus Second market sale status              &lt;para&gt;NULL All active&lt;/para&gt;&lt;para&gt;0 Bought investments&lt;/para&gt;&lt;para&gt;1 Sold investments&lt;/para&gt;&lt;para&gt;2 Investment is on sale&lt;/para&gt;&lt;para&gt;3 Investment is not on sale&lt;/para&gt; (optional)
     * @param  bool $requestIsInRepayment Search only active in repayment loans, StatusCodes (2, 5, 100) (optional)
     * @param  int $requestPageSize Max items in result, up to 50000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyInvestments
     */
    public function accountGetActive($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestSoldDateFrom = null, $requestSoldDateTo = null, $requestPurchaseDateFrom = null, $requestPurchaseDateTo = null, $requestNextPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestLoanStatusCode = null, $requestIncomeVerificationStatus = null, $requestLoanDebtManagementStage = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestAuctionBidType = null, $requestSalesStatus = null, $requestIsInRepayment = null, $requestPageSize = null, $requestPageNr = null)
    {
        list($response) = $this->accountGetActiveWithHttpInfo($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestSoldDateFrom, $requestSoldDateTo, $requestPurchaseDateFrom, $requestPurchaseDateTo, $requestNextPaymentDateTo, $requestNextPaymentDateFrom, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestLoanStatusCode, $requestIncomeVerificationStatus, $requestLoanDebtManagementStage, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestAuctionBidType, $requestSalesStatus, $requestIsInRepayment, $requestPageSize, $requestPageNr);
        return $response;
    }

    /**
     * Operation accountGetActiveWithHttpInfo
     *
     * Gets list of your investments
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Defaulted date from (optional)
     * @param  \DateTime $requestRescheduledTo Defaulted date to (optional)
     * @param  \DateTime $requestSoldDateFrom When it was sold on Secondary market from (optional)
     * @param  \DateTime $requestSoldDateTo When it was sold on Secondary market to (optional)
     * @param  \DateTime $requestPurchaseDateFrom When you received the investment Auctions/Secondary market from (optional)
     * @param  \DateTime $requestPurchaseDateTo When you received the investment Auctions/Secondary market to (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;0 Reserved&lt;/para&gt;&lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;3 Cancelled&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt;&lt;para&gt;4 Repaid&lt;/para&gt;&lt;para&gt;8 Released&lt;/para&gt; (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  int $requestLoanDebtManagementStage Latest debt management stage (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  int $requestAuctionBidType Auction bid type (optional)
     * @param  int $requestSalesStatus Second market sale status              &lt;para&gt;NULL All active&lt;/para&gt;&lt;para&gt;0 Bought investments&lt;/para&gt;&lt;para&gt;1 Sold investments&lt;/para&gt;&lt;para&gt;2 Investment is on sale&lt;/para&gt;&lt;para&gt;3 Investment is not on sale&lt;/para&gt; (optional)
     * @param  bool $requestIsInRepayment Search only active in repayment loans, StatusCodes (2, 5, 100) (optional)
     * @param  int $requestPageSize Max items in result, up to 50000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyInvestments, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetActiveWithHttpInfo($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestSoldDateFrom = null, $requestSoldDateTo = null, $requestPurchaseDateFrom = null, $requestPurchaseDateTo = null, $requestNextPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestLoanStatusCode = null, $requestIncomeVerificationStatus = null, $requestLoanDebtManagementStage = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestAuctionBidType = null, $requestSalesStatus = null, $requestIsInRepayment = null, $requestPageSize = null, $requestPageNr = null)
    {
        $request = $this->accountGetActiveRequest($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestSoldDateFrom, $requestSoldDateTo, $requestPurchaseDateFrom, $requestPurchaseDateTo, $requestNextPaymentDateTo, $requestNextPaymentDateFrom, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestLoanStatusCode, $requestIncomeVerificationStatus, $requestLoanDebtManagementStage, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestAuctionBidType, $requestSalesStatus, $requestIsInRepayment, $requestPageSize, $requestPageNr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyInvestments' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyInvestments', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyInvestments';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyInvestments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetActiveAsync
     *
     * Gets list of your investments
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Defaulted date from (optional)
     * @param  \DateTime $requestRescheduledTo Defaulted date to (optional)
     * @param  \DateTime $requestSoldDateFrom When it was sold on Secondary market from (optional)
     * @param  \DateTime $requestSoldDateTo When it was sold on Secondary market to (optional)
     * @param  \DateTime $requestPurchaseDateFrom When you received the investment Auctions/Secondary market from (optional)
     * @param  \DateTime $requestPurchaseDateTo When you received the investment Auctions/Secondary market to (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;0 Reserved&lt;/para&gt;&lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;3 Cancelled&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt;&lt;para&gt;4 Repaid&lt;/para&gt;&lt;para&gt;8 Released&lt;/para&gt; (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  int $requestLoanDebtManagementStage Latest debt management stage (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  int $requestAuctionBidType Auction bid type (optional)
     * @param  int $requestSalesStatus Second market sale status              &lt;para&gt;NULL All active&lt;/para&gt;&lt;para&gt;0 Bought investments&lt;/para&gt;&lt;para&gt;1 Sold investments&lt;/para&gt;&lt;para&gt;2 Investment is on sale&lt;/para&gt;&lt;para&gt;3 Investment is not on sale&lt;/para&gt; (optional)
     * @param  bool $requestIsInRepayment Search only active in repayment loans, StatusCodes (2, 5, 100) (optional)
     * @param  int $requestPageSize Max items in result, up to 50000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetActiveAsync($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestSoldDateFrom = null, $requestSoldDateTo = null, $requestPurchaseDateFrom = null, $requestPurchaseDateTo = null, $requestNextPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestLoanStatusCode = null, $requestIncomeVerificationStatus = null, $requestLoanDebtManagementStage = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestAuctionBidType = null, $requestSalesStatus = null, $requestIsInRepayment = null, $requestPageSize = null, $requestPageNr = null)
    {
        return $this->accountGetActiveAsyncWithHttpInfo($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestSoldDateFrom, $requestSoldDateTo, $requestPurchaseDateFrom, $requestPurchaseDateTo, $requestNextPaymentDateTo, $requestNextPaymentDateFrom, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestLoanStatusCode, $requestIncomeVerificationStatus, $requestLoanDebtManagementStage, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestAuctionBidType, $requestSalesStatus, $requestIsInRepayment, $requestPageSize, $requestPageNr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetActiveAsyncWithHttpInfo
     *
     * Gets list of your investments
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Defaulted date from (optional)
     * @param  \DateTime $requestRescheduledTo Defaulted date to (optional)
     * @param  \DateTime $requestSoldDateFrom When it was sold on Secondary market from (optional)
     * @param  \DateTime $requestSoldDateTo When it was sold on Secondary market to (optional)
     * @param  \DateTime $requestPurchaseDateFrom When you received the investment Auctions/Secondary market from (optional)
     * @param  \DateTime $requestPurchaseDateTo When you received the investment Auctions/Secondary market to (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;0 Reserved&lt;/para&gt;&lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;3 Cancelled&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt;&lt;para&gt;4 Repaid&lt;/para&gt;&lt;para&gt;8 Released&lt;/para&gt; (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  int $requestLoanDebtManagementStage Latest debt management stage (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  int $requestAuctionBidType Auction bid type (optional)
     * @param  int $requestSalesStatus Second market sale status              &lt;para&gt;NULL All active&lt;/para&gt;&lt;para&gt;0 Bought investments&lt;/para&gt;&lt;para&gt;1 Sold investments&lt;/para&gt;&lt;para&gt;2 Investment is on sale&lt;/para&gt;&lt;para&gt;3 Investment is not on sale&lt;/para&gt; (optional)
     * @param  bool $requestIsInRepayment Search only active in repayment loans, StatusCodes (2, 5, 100) (optional)
     * @param  int $requestPageSize Max items in result, up to 50000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetActiveAsyncWithHttpInfo($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestSoldDateFrom = null, $requestSoldDateTo = null, $requestPurchaseDateFrom = null, $requestPurchaseDateTo = null, $requestNextPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestLoanStatusCode = null, $requestIncomeVerificationStatus = null, $requestLoanDebtManagementStage = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestAuctionBidType = null, $requestSalesStatus = null, $requestIsInRepayment = null, $requestPageSize = null, $requestPageNr = null)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyInvestments';
        $request = $this->accountGetActiveRequest($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestSoldDateFrom, $requestSoldDateTo, $requestPurchaseDateFrom, $requestPurchaseDateTo, $requestNextPaymentDateTo, $requestNextPaymentDateFrom, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestLoanStatusCode, $requestIncomeVerificationStatus, $requestLoanDebtManagementStage, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestAuctionBidType, $requestSalesStatus, $requestIsInRepayment, $requestPageSize, $requestPageNr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetActive'
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Defaulted date from (optional)
     * @param  \DateTime $requestRescheduledTo Defaulted date to (optional)
     * @param  \DateTime $requestSoldDateFrom When it was sold on Secondary market from (optional)
     * @param  \DateTime $requestSoldDateTo When it was sold on Secondary market to (optional)
     * @param  \DateTime $requestPurchaseDateFrom When you received the investment Auctions/Secondary market from (optional)
     * @param  \DateTime $requestPurchaseDateTo When you received the investment Auctions/Secondary market to (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;0 Reserved&lt;/para&gt;&lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;3 Cancelled&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt;&lt;para&gt;4 Repaid&lt;/para&gt;&lt;para&gt;8 Released&lt;/para&gt; (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  int $requestLoanDebtManagementStage Latest debt management stage (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  int $requestAuctionBidType Auction bid type (optional)
     * @param  int $requestSalesStatus Second market sale status              &lt;para&gt;NULL All active&lt;/para&gt;&lt;para&gt;0 Bought investments&lt;/para&gt;&lt;para&gt;1 Sold investments&lt;/para&gt;&lt;para&gt;2 Investment is on sale&lt;/para&gt;&lt;para&gt;3 Investment is not on sale&lt;/para&gt; (optional)
     * @param  bool $requestIsInRepayment Search only active in repayment loans, StatusCodes (2, 5, 100) (optional)
     * @param  int $requestPageSize Max items in result, up to 50000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountGetActiveRequest($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestSoldDateFrom = null, $requestSoldDateTo = null, $requestPurchaseDateFrom = null, $requestPurchaseDateTo = null, $requestNextPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestLoanStatusCode = null, $requestIncomeVerificationStatus = null, $requestLoanDebtManagementStage = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestAuctionBidType = null, $requestSalesStatus = null, $requestIsInRepayment = null, $requestPageSize = null, $requestPageNr = null)
    {
        if ($requestPageSize !== null && $requestPageSize > 50000) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling AccountApi.accountGetActive, must be smaller than or equal to 50000.');
        }
        if ($requestPageSize !== null && $requestPageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling AccountApi.accountGetActive, must be bigger than or equal to 1.');
        }

        if ($requestPageNr !== null && $requestPageNr > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling AccountApi.accountGetActive, must be smaller than or equal to 2147483647.');
        }
        if ($requestPageNr !== null && $requestPageNr < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling AccountApi.accountGetActive, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api/v1/account/investments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($requestLoanIssuedDateFrom !== null) {
            $queryParams['request.loanIssuedDateFrom'] = ObjectSerializer::toQueryValue($requestLoanIssuedDateFrom);
        }
        // query params
        if ($requestLoanIssuedDateTo !== null) {
            $queryParams['request.loanIssuedDateTo'] = ObjectSerializer::toQueryValue($requestLoanIssuedDateTo);
        }
        // query params
        if ($requestPrincipalMin !== null) {
            $queryParams['request.principalMin'] = ObjectSerializer::toQueryValue($requestPrincipalMin);
        }
        // query params
        if ($requestPrincipalMax !== null) {
            $queryParams['request.principalMax'] = ObjectSerializer::toQueryValue($requestPrincipalMax);
        }
        // query params
        if ($requestInterestMin !== null) {
            $queryParams['request.interestMin'] = ObjectSerializer::toQueryValue($requestInterestMin);
        }
        // query params
        if ($requestInterestMax !== null) {
            $queryParams['request.interestMax'] = ObjectSerializer::toQueryValue($requestInterestMax);
        }
        // query params
        if ($requestLengthMax !== null) {
            $queryParams['request.lengthMax'] = ObjectSerializer::toQueryValue($requestLengthMax);
        }
        // query params
        if ($requestLengthMin !== null) {
            $queryParams['request.lengthMin'] = ObjectSerializer::toQueryValue($requestLengthMin);
        }
        // query params
        if ($requestLatePrincipalAmountMin !== null) {
            $queryParams['request.latePrincipalAmountMin'] = ObjectSerializer::toQueryValue($requestLatePrincipalAmountMin);
        }
        // query params
        if ($requestLatePrincipalAmountMax !== null) {
            $queryParams['request.latePrincipalAmountMax'] = ObjectSerializer::toQueryValue($requestLatePrincipalAmountMax);
        }
        // query params
        if ($requestDebtOccuredOnFrom !== null) {
            $queryParams['request.debtOccuredOnFrom'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnFrom);
        }
        // query params
        if ($requestDebtOccuredOnTo !== null) {
            $queryParams['request.debtOccuredOnTo'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnTo);
        }
        // query params
        if ($requestDebtOccuredOnForSecondaryFrom !== null) {
            $queryParams['request.debtOccuredOnForSecondaryFrom'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnForSecondaryFrom);
        }
        // query params
        if ($requestDebtOccuredOnForSecondaryTo !== null) {
            $queryParams['request.debtOccuredOnForSecondaryTo'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnForSecondaryTo);
        }
        // query params
        if ($requestDefaultedDateFrom !== null) {
            $queryParams['request.defaultedDateFrom'] = ObjectSerializer::toQueryValue($requestDefaultedDateFrom);
        }
        // query params
        if ($requestDefaultedDateTo !== null) {
            $queryParams['request.defaultedDateTo'] = ObjectSerializer::toQueryValue($requestDefaultedDateTo);
        }
        // query params
        if ($requestRescheduledFrom !== null) {
            $queryParams['request.rescheduledFrom'] = ObjectSerializer::toQueryValue($requestRescheduledFrom);
        }
        // query params
        if ($requestRescheduledTo !== null) {
            $queryParams['request.rescheduledTo'] = ObjectSerializer::toQueryValue($requestRescheduledTo);
        }
        // query params
        if ($requestSoldDateFrom !== null) {
            $queryParams['request.soldDateFrom'] = ObjectSerializer::toQueryValue($requestSoldDateFrom);
        }
        // query params
        if ($requestSoldDateTo !== null) {
            $queryParams['request.soldDateTo'] = ObjectSerializer::toQueryValue($requestSoldDateTo);
        }
        // query params
        if ($requestPurchaseDateFrom !== null) {
            $queryParams['request.purchaseDateFrom'] = ObjectSerializer::toQueryValue($requestPurchaseDateFrom);
        }
        // query params
        if ($requestPurchaseDateTo !== null) {
            $queryParams['request.purchaseDateTo'] = ObjectSerializer::toQueryValue($requestPurchaseDateTo);
        }
        // query params
        if ($requestNextPaymentDateTo !== null) {
            $queryParams['request.nextPaymentDateTo'] = ObjectSerializer::toQueryValue($requestNextPaymentDateTo);
        }
        // query params
        if ($requestNextPaymentDateFrom !== null) {
            $queryParams['request.nextPaymentDateFrom'] = ObjectSerializer::toQueryValue($requestNextPaymentDateFrom);
        }
        // query params
        if ($requestLastPaymentDateFrom !== null) {
            $queryParams['request.lastPaymentDateFrom'] = ObjectSerializer::toQueryValue($requestLastPaymentDateFrom);
        }
        // query params
        if ($requestLastPaymentDateTo !== null) {
            $queryParams['request.lastPaymentDateTo'] = ObjectSerializer::toQueryValue($requestLastPaymentDateTo);
        }
        // query params
        if (is_array($requestCountries)) {
            $requestCountries = ObjectSerializer::serializeCollection($requestCountries, 'multi', true);
        }
        if ($requestCountries !== null) {
            $queryParams['request.countries'] = ObjectSerializer::toQueryValue($requestCountries);
        }
        // query params
        if (is_array($requestRatings)) {
            $requestRatings = ObjectSerializer::serializeCollection($requestRatings, 'multi', true);
        }
        if ($requestRatings !== null) {
            $queryParams['request.ratings'] = ObjectSerializer::toQueryValue($requestRatings);
        }
        // query params
        if ($requestCreditScoreMin !== null) {
            $queryParams['request.creditScoreMin'] = ObjectSerializer::toQueryValue($requestCreditScoreMin);
        }
        // query params
        if ($requestCreditScoreMax !== null) {
            $queryParams['request.creditScoreMax'] = ObjectSerializer::toQueryValue($requestCreditScoreMax);
        }
        // query params
        if ($requestUserName !== null) {
            $queryParams['request.userName'] = ObjectSerializer::toQueryValue($requestUserName);
        }
        // query params
        if (is_array($requestLoanStatusCode)) {
            $requestLoanStatusCode = ObjectSerializer::serializeCollection($requestLoanStatusCode, 'multi', true);
        }
        if ($requestLoanStatusCode !== null) {
            $queryParams['request.loanStatusCode'] = ObjectSerializer::toQueryValue($requestLoanStatusCode);
        }
        // query params
        if ($requestIncomeVerificationStatus !== null) {
            $queryParams['request.incomeVerificationStatus'] = ObjectSerializer::toQueryValue($requestIncomeVerificationStatus);
        }
        // query params
        if ($requestLoanDebtManagementStage !== null) {
            $queryParams['request.loanDebtManagementStage'] = ObjectSerializer::toQueryValue($requestLoanDebtManagementStage);
        }
        // query params
        if ($requestLoanDebtManagementStageType !== null) {
            $queryParams['request.loanDebtManagementStageType'] = ObjectSerializer::toQueryValue($requestLoanDebtManagementStageType);
        }
        // query params
        if ($requestLoanDebtManagementDateActiveFrom !== null) {
            $queryParams['request.loanDebtManagementDateActiveFrom'] = ObjectSerializer::toQueryValue($requestLoanDebtManagementDateActiveFrom);
        }
        // query params
        if ($requestLoanDebtManagementDateActiveTo !== null) {
            $queryParams['request.loanDebtManagementDateActiveTo'] = ObjectSerializer::toQueryValue($requestLoanDebtManagementDateActiveTo);
        }
        // query params
        if ($requestAuctionBidType !== null) {
            $queryParams['request.auctionBidType'] = ObjectSerializer::toQueryValue($requestAuctionBidType);
        }
        // query params
        if ($requestSalesStatus !== null) {
            $queryParams['request.salesStatus'] = ObjectSerializer::toQueryValue($requestSalesStatus);
        }
        // query params
        if ($requestIsInRepayment !== null) {
            $queryParams['request.isInRepayment'] = ObjectSerializer::toQueryValue($requestIsInRepayment);
        }
        // query params
        if ($requestPageSize !== null) {
            $queryParams['request.pageSize'] = ObjectSerializer::toQueryValue($requestPageSize);
        }
        // query params
        if ($requestPageNr !== null) {
            $queryParams['request.pageNr'] = ObjectSerializer::toQueryValue($requestPageNr);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetBalance
     *
     * Gets your account balance information
     *
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyAccountBalance
     */
    public function accountGetBalance()
    {
        list($response) = $this->accountGetBalanceWithHttpInfo();
        return $response;
    }

    /**
     * Operation accountGetBalanceWithHttpInfo
     *
     * Gets your account balance information
     *
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyAccountBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetBalanceWithHttpInfo()
    {
        $request = $this->accountGetBalanceRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyAccountBalance' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyAccountBalance', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyAccountBalance';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyAccountBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetBalanceAsync
     *
     * Gets your account balance information
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetBalanceAsync()
    {
        return $this->accountGetBalanceAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetBalanceAsyncWithHttpInfo
     *
     * Gets your account balance information
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetBalanceAsyncWithHttpInfo()
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultMyAccountBalance';
        $request = $this->accountGetBalanceRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetBalance'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountGetBalanceRequest()
    {

        $resourcePath = '/api/v1/account/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetEventLog
     *
     * Gets events that have been made with this application (related to current access token)
     *
     * @param  \DateTime $requestEventDateFrom Start datetime (optional)
     * @param  \DateTime $requestEventDateTo end datetime (optional)
     * @param  int $requestEventType Event type (optional)
     * @param  string $requestIpAddress IP address (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultEventLog
     */
    public function accountGetEventLog($requestEventDateFrom = null, $requestEventDateTo = null, $requestEventType = null, $requestIpAddress = null, $requestPageSize = null, $requestPageNr = null)
    {
        list($response) = $this->accountGetEventLogWithHttpInfo($requestEventDateFrom, $requestEventDateTo, $requestEventType, $requestIpAddress, $requestPageSize, $requestPageNr);
        return $response;
    }

    /**
     * Operation accountGetEventLogWithHttpInfo
     *
     * Gets events that have been made with this application (related to current access token)
     *
     * @param  \DateTime $requestEventDateFrom Start datetime (optional)
     * @param  \DateTime $requestEventDateTo end datetime (optional)
     * @param  int $requestEventType Event type (optional)
     * @param  string $requestIpAddress IP address (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultEventLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetEventLogWithHttpInfo($requestEventDateFrom = null, $requestEventDateTo = null, $requestEventType = null, $requestIpAddress = null, $requestPageSize = null, $requestPageNr = null)
    {
        $request = $this->accountGetEventLogRequest($requestEventDateFrom, $requestEventDateTo, $requestEventType, $requestIpAddress, $requestPageSize, $requestPageNr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultEventLog' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultEventLog', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultEventLog';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultEventLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetEventLogAsync
     *
     * Gets events that have been made with this application (related to current access token)
     *
     * @param  \DateTime $requestEventDateFrom Start datetime (optional)
     * @param  \DateTime $requestEventDateTo end datetime (optional)
     * @param  int $requestEventType Event type (optional)
     * @param  string $requestIpAddress IP address (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetEventLogAsync($requestEventDateFrom = null, $requestEventDateTo = null, $requestEventType = null, $requestIpAddress = null, $requestPageSize = null, $requestPageNr = null)
    {
        return $this->accountGetEventLogAsyncWithHttpInfo($requestEventDateFrom, $requestEventDateTo, $requestEventType, $requestIpAddress, $requestPageSize, $requestPageNr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountGetEventLogAsyncWithHttpInfo
     *
     * Gets events that have been made with this application (related to current access token)
     *
     * @param  \DateTime $requestEventDateFrom Start datetime (optional)
     * @param  \DateTime $requestEventDateTo end datetime (optional)
     * @param  int $requestEventType Event type (optional)
     * @param  string $requestIpAddress IP address (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetEventLogAsyncWithHttpInfo($requestEventDateFrom = null, $requestEventDateTo = null, $requestEventType = null, $requestIpAddress = null, $requestPageSize = null, $requestPageNr = null)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultEventLog';
        $request = $this->accountGetEventLogRequest($requestEventDateFrom, $requestEventDateTo, $requestEventType, $requestIpAddress, $requestPageSize, $requestPageNr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountGetEventLog'
     *
     * @param  \DateTime $requestEventDateFrom Start datetime (optional)
     * @param  \DateTime $requestEventDateTo end datetime (optional)
     * @param  int $requestEventType Event type (optional)
     * @param  string $requestIpAddress IP address (optional)
     * @param  int $requestPageSize Max items in result, up to 20000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountGetEventLogRequest($requestEventDateFrom = null, $requestEventDateTo = null, $requestEventType = null, $requestIpAddress = null, $requestPageSize = null, $requestPageNr = null)
    {
        if ($requestPageSize !== null && $requestPageSize > 20000) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling AccountApi.accountGetEventLog, must be smaller than or equal to 20000.');
        }
        if ($requestPageSize !== null && $requestPageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling AccountApi.accountGetEventLog, must be bigger than or equal to 1.');
        }

        if ($requestPageNr !== null && $requestPageNr > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling AccountApi.accountGetEventLog, must be smaller than or equal to 2147483647.');
        }
        if ($requestPageNr !== null && $requestPageNr < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling AccountApi.accountGetEventLog, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api/v1/eventlog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($requestEventDateFrom !== null) {
            $queryParams['request.eventDateFrom'] = ObjectSerializer::toQueryValue($requestEventDateFrom);
        }
        // query params
        if ($requestEventDateTo !== null) {
            $queryParams['request.eventDateTo'] = ObjectSerializer::toQueryValue($requestEventDateTo);
        }
        // query params
        if ($requestEventType !== null) {
            $queryParams['request.eventType'] = ObjectSerializer::toQueryValue($requestEventType);
        }
        // query params
        if ($requestIpAddress !== null) {
            $queryParams['request.ipAddress'] = ObjectSerializer::toQueryValue($requestIpAddress);
        }
        // query params
        if ($requestPageSize !== null) {
            $queryParams['request.pageSize'] = ObjectSerializer::toQueryValue($requestPageSize);
        }
        // query params
        if ($requestPageNr !== null) {
            $queryParams['request.pageNr'] = ObjectSerializer::toQueryValue($requestPageNr);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
