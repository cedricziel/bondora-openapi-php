<?php
/**
 * SecondMarketApi
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CedricZiel\OpenAPI\BondoraPHP\ApiException;
use CedricZiel\OpenAPI\BondoraPHP\Configuration;
use CedricZiel\OpenAPI\BondoraPHP\HeaderSelector;
use CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * SecondMarketApi Class Doc Comment
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecondMarketApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation secondMarketBuy
     *
     * Buy loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketBuyRequest $buyRequest buyRequest (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult
     */
    public function secondMarketBuy($buyRequest)
    {
        list($response) = $this->secondMarketBuyWithHttpInfo($buyRequest);
        return $response;
    }

    /**
     * Operation secondMarketBuyWithHttpInfo
     *
     * Buy loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketBuyRequest $buyRequest (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketBuyWithHttpInfo($buyRequest)
    {
        $request = $this->secondMarketBuyRequest($buyRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketBuyAsync
     *
     * Buy loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketBuyRequest $buyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketBuyAsync($buyRequest)
    {
        return $this->secondMarketBuyAsyncWithHttpInfo($buyRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketBuyAsyncWithHttpInfo
     *
     * Buy loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketBuyRequest $buyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketBuyAsyncWithHttpInfo($buyRequest)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult';
        $request = $this->secondMarketBuyRequest($buyRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketBuy'
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketBuyRequest $buyRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketBuyRequest($buyRequest)
    {
        // verify the required parameter 'buyRequest' is set
        if ($buyRequest === null || (is_array($buyRequest) && count($buyRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyRequest when calling secondMarketBuy'
            );
        }

        $resourcePath = '/api/v1/secondarymarket/buy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($buyRequest)) {
            $_tempBody = $buyRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketCancel
     *
     * Remove your loans from secondary market.
     *
     * @param  string $id id (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult
     */
    public function secondMarketCancel($id)
    {
        list($response) = $this->secondMarketCancelWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation secondMarketCancelWithHttpInfo
     *
     * Remove your loans from secondary market.
     *
     * @param  string $id (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketCancelWithHttpInfo($id)
    {
        $request = $this->secondMarketCancelRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketCancelAsync
     *
     * Remove your loans from secondary market.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketCancelAsync($id)
    {
        return $this->secondMarketCancelAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketCancelAsyncWithHttpInfo
     *
     * Remove your loans from secondary market.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketCancelAsyncWithHttpInfo($id)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult';
        $request = $this->secondMarketCancelRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketCancel'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketCancelRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling secondMarketCancel'
            );
        }

        $resourcePath = '/api/v1/secondarymarket/{id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketCancelMultiple
     *
     * Remove your loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketCancelRequest $cancelRequest cancelRequest (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult
     */
    public function secondMarketCancelMultiple($cancelRequest)
    {
        list($response) = $this->secondMarketCancelMultipleWithHttpInfo($cancelRequest);
        return $response;
    }

    /**
     * Operation secondMarketCancelMultipleWithHttpInfo
     *
     * Remove your loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketCancelRequest $cancelRequest (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketCancelMultipleWithHttpInfo($cancelRequest)
    {
        $request = $this->secondMarketCancelMultipleRequest($cancelRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketCancelMultipleAsync
     *
     * Remove your loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketCancelRequest $cancelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketCancelMultipleAsync($cancelRequest)
    {
        return $this->secondMarketCancelMultipleAsyncWithHttpInfo($cancelRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketCancelMultipleAsyncWithHttpInfo
     *
     * Remove your loans from secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketCancelRequest $cancelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketCancelMultipleAsyncWithHttpInfo($cancelRequest)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResult';
        $request = $this->secondMarketCancelMultipleRequest($cancelRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketCancelMultiple'
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketCancelRequest $cancelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketCancelMultipleRequest($cancelRequest)
    {
        // verify the required parameter 'cancelRequest' is set
        if ($cancelRequest === null || (is_array($cancelRequest) && count($cancelRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancelRequest when calling secondMarketCancelMultiple'
            );
        }

        $resourcePath = '/api/v1/secondarymarket/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($cancelRequest)) {
            $_tempBody = $cancelRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketGet
     *
     * Gets LoanPartDetails info by identifier
     *
     * @param  string $id LoanPartDetails&#39;s identifier (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetails
     */
    public function secondMarketGet($id)
    {
        list($response) = $this->secondMarketGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation secondMarketGetWithHttpInfo
     *
     * Gets LoanPartDetails info by identifier
     *
     * @param  string $id LoanPartDetails&#39;s identifier (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketGetWithHttpInfo($id)
    {
        $request = $this->secondMarketGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetails';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketGetAsync
     *
     * Gets LoanPartDetails info by identifier
     *
     * @param  string $id LoanPartDetails&#39;s identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetAsync($id)
    {
        return $this->secondMarketGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketGetAsyncWithHttpInfo
     *
     * Gets LoanPartDetails info by identifier
     *
     * @param  string $id LoanPartDetails&#39;s identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetAsyncWithHttpInfo($id)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetails';
        $request = $this->secondMarketGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketGet'
     *
     * @param  string $id LoanPartDetails&#39;s identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling secondMarketGet'
            );
        }

        $resourcePath = '/api/v1/loanpart/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketGetActive
     *
     * Gets list of active secondary market items
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  bool $requestHasDebt Is overdue (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt; (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  double $requestPriceMin Price amount min (optional)
     * @param  double $requestPriceMax Price amount max (optional)
     * @param  int $requestUseOfLoan Use of loan (optional)
     * @param  bool $requestHasNewSchedule Has been rescheduled (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  bool $requestShowMyItems Can find your own items from market: Value Null &#x3D; ALL, True &#x3D; only your items, False &#x3D; other user items (optional)
     * @param  string $requestAuctionId Can find specific auction from market (optional)
     * @param  \DateTime $requestListedOnDateFrom Date when item was published from (optional)
     * @param  \DateTime $requestListedOnDateTo Date when item was published to (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Rescheduled date from (optional)
     * @param  \DateTime $requestRescheduledTo Rescheduled date to (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  double $requestDesiredDiscountRateMin Minimal DesiredDiscountRate (optional)
     * @param  double $requestDesiredDiscountRateMax Maximal DesiredDiscountRate (optional)
     * @param  double $requestXirrMin Minimal Xirr (optional)
     * @param  double $requestXirrMax Maximal Xirr (optional)
     * @param  int $requestPageSize Max items in result, up to 100000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarket
     */
    public function secondMarketGetActive($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestHasDebt = null, $requestLoanStatusCode = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestPriceMin = null, $requestPriceMax = null, $requestUseOfLoan = null, $requestHasNewSchedule = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestGender = null, $requestAgeMin = null, $requestAgeMax = null, $requestIncomeVerificationStatus = null, $requestShowMyItems = null, $requestAuctionId = null, $requestListedOnDateFrom = null, $requestListedOnDateTo = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestNextPaymentDateTo = null, $requestDesiredDiscountRateMin = null, $requestDesiredDiscountRateMax = null, $requestXirrMin = null, $requestXirrMax = null, $requestPageSize = null, $requestPageNr = null)
    {
        list($response) = $this->secondMarketGetActiveWithHttpInfo($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestHasDebt, $requestLoanStatusCode, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestPriceMin, $requestPriceMax, $requestUseOfLoan, $requestHasNewSchedule, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestGender, $requestAgeMin, $requestAgeMax, $requestIncomeVerificationStatus, $requestShowMyItems, $requestAuctionId, $requestListedOnDateFrom, $requestListedOnDateTo, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestNextPaymentDateFrom, $requestNextPaymentDateTo, $requestDesiredDiscountRateMin, $requestDesiredDiscountRateMax, $requestXirrMin, $requestXirrMax, $requestPageSize, $requestPageNr);
        return $response;
    }

    /**
     * Operation secondMarketGetActiveWithHttpInfo
     *
     * Gets list of active secondary market items
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  bool $requestHasDebt Is overdue (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt; (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  double $requestPriceMin Price amount min (optional)
     * @param  double $requestPriceMax Price amount max (optional)
     * @param  int $requestUseOfLoan Use of loan (optional)
     * @param  bool $requestHasNewSchedule Has been rescheduled (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  bool $requestShowMyItems Can find your own items from market: Value Null &#x3D; ALL, True &#x3D; only your items, False &#x3D; other user items (optional)
     * @param  string $requestAuctionId Can find specific auction from market (optional)
     * @param  \DateTime $requestListedOnDateFrom Date when item was published from (optional)
     * @param  \DateTime $requestListedOnDateTo Date when item was published to (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Rescheduled date from (optional)
     * @param  \DateTime $requestRescheduledTo Rescheduled date to (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  double $requestDesiredDiscountRateMin Minimal DesiredDiscountRate (optional)
     * @param  double $requestDesiredDiscountRateMax Maximal DesiredDiscountRate (optional)
     * @param  double $requestXirrMin Minimal Xirr (optional)
     * @param  double $requestXirrMax Maximal Xirr (optional)
     * @param  int $requestPageSize Max items in result, up to 100000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarket, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketGetActiveWithHttpInfo($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestHasDebt = null, $requestLoanStatusCode = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestPriceMin = null, $requestPriceMax = null, $requestUseOfLoan = null, $requestHasNewSchedule = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestGender = null, $requestAgeMin = null, $requestAgeMax = null, $requestIncomeVerificationStatus = null, $requestShowMyItems = null, $requestAuctionId = null, $requestListedOnDateFrom = null, $requestListedOnDateTo = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestNextPaymentDateTo = null, $requestDesiredDiscountRateMin = null, $requestDesiredDiscountRateMax = null, $requestXirrMin = null, $requestXirrMax = null, $requestPageSize = null, $requestPageNr = null)
    {
        $request = $this->secondMarketGetActiveRequest($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestHasDebt, $requestLoanStatusCode, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestPriceMin, $requestPriceMax, $requestUseOfLoan, $requestHasNewSchedule, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestGender, $requestAgeMin, $requestAgeMax, $requestIncomeVerificationStatus, $requestShowMyItems, $requestAuctionId, $requestListedOnDateFrom, $requestListedOnDateTo, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestNextPaymentDateFrom, $requestNextPaymentDateTo, $requestDesiredDiscountRateMin, $requestDesiredDiscountRateMax, $requestXirrMin, $requestXirrMax, $requestPageSize, $requestPageNr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarket' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarket';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketGetActiveAsync
     *
     * Gets list of active secondary market items
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  bool $requestHasDebt Is overdue (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt; (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  double $requestPriceMin Price amount min (optional)
     * @param  double $requestPriceMax Price amount max (optional)
     * @param  int $requestUseOfLoan Use of loan (optional)
     * @param  bool $requestHasNewSchedule Has been rescheduled (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  bool $requestShowMyItems Can find your own items from market: Value Null &#x3D; ALL, True &#x3D; only your items, False &#x3D; other user items (optional)
     * @param  string $requestAuctionId Can find specific auction from market (optional)
     * @param  \DateTime $requestListedOnDateFrom Date when item was published from (optional)
     * @param  \DateTime $requestListedOnDateTo Date when item was published to (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Rescheduled date from (optional)
     * @param  \DateTime $requestRescheduledTo Rescheduled date to (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  double $requestDesiredDiscountRateMin Minimal DesiredDiscountRate (optional)
     * @param  double $requestDesiredDiscountRateMax Maximal DesiredDiscountRate (optional)
     * @param  double $requestXirrMin Minimal Xirr (optional)
     * @param  double $requestXirrMax Maximal Xirr (optional)
     * @param  int $requestPageSize Max items in result, up to 100000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetActiveAsync($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestHasDebt = null, $requestLoanStatusCode = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestPriceMin = null, $requestPriceMax = null, $requestUseOfLoan = null, $requestHasNewSchedule = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestGender = null, $requestAgeMin = null, $requestAgeMax = null, $requestIncomeVerificationStatus = null, $requestShowMyItems = null, $requestAuctionId = null, $requestListedOnDateFrom = null, $requestListedOnDateTo = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestNextPaymentDateTo = null, $requestDesiredDiscountRateMin = null, $requestDesiredDiscountRateMax = null, $requestXirrMin = null, $requestXirrMax = null, $requestPageSize = null, $requestPageNr = null)
    {
        return $this->secondMarketGetActiveAsyncWithHttpInfo($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestHasDebt, $requestLoanStatusCode, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestPriceMin, $requestPriceMax, $requestUseOfLoan, $requestHasNewSchedule, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestGender, $requestAgeMin, $requestAgeMax, $requestIncomeVerificationStatus, $requestShowMyItems, $requestAuctionId, $requestListedOnDateFrom, $requestListedOnDateTo, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestNextPaymentDateFrom, $requestNextPaymentDateTo, $requestDesiredDiscountRateMin, $requestDesiredDiscountRateMax, $requestXirrMin, $requestXirrMax, $requestPageSize, $requestPageNr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketGetActiveAsyncWithHttpInfo
     *
     * Gets list of active secondary market items
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  bool $requestHasDebt Is overdue (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt; (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  double $requestPriceMin Price amount min (optional)
     * @param  double $requestPriceMax Price amount max (optional)
     * @param  int $requestUseOfLoan Use of loan (optional)
     * @param  bool $requestHasNewSchedule Has been rescheduled (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  bool $requestShowMyItems Can find your own items from market: Value Null &#x3D; ALL, True &#x3D; only your items, False &#x3D; other user items (optional)
     * @param  string $requestAuctionId Can find specific auction from market (optional)
     * @param  \DateTime $requestListedOnDateFrom Date when item was published from (optional)
     * @param  \DateTime $requestListedOnDateTo Date when item was published to (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Rescheduled date from (optional)
     * @param  \DateTime $requestRescheduledTo Rescheduled date to (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  double $requestDesiredDiscountRateMin Minimal DesiredDiscountRate (optional)
     * @param  double $requestDesiredDiscountRateMax Maximal DesiredDiscountRate (optional)
     * @param  double $requestXirrMin Minimal Xirr (optional)
     * @param  double $requestXirrMax Maximal Xirr (optional)
     * @param  int $requestPageSize Max items in result, up to 100000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetActiveAsyncWithHttpInfo($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestHasDebt = null, $requestLoanStatusCode = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestPriceMin = null, $requestPriceMax = null, $requestUseOfLoan = null, $requestHasNewSchedule = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestGender = null, $requestAgeMin = null, $requestAgeMax = null, $requestIncomeVerificationStatus = null, $requestShowMyItems = null, $requestAuctionId = null, $requestListedOnDateFrom = null, $requestListedOnDateTo = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestNextPaymentDateTo = null, $requestDesiredDiscountRateMin = null, $requestDesiredDiscountRateMax = null, $requestXirrMin = null, $requestXirrMax = null, $requestPageSize = null, $requestPageNr = null)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarket';
        $request = $this->secondMarketGetActiveRequest($requestLoanIssuedDateFrom, $requestLoanIssuedDateTo, $requestPrincipalMin, $requestPrincipalMax, $requestInterestMin, $requestInterestMax, $requestLengthMax, $requestLengthMin, $requestHasDebt, $requestLoanStatusCode, $requestLoanDebtManagementStageType, $requestLoanDebtManagementDateActiveFrom, $requestLoanDebtManagementDateActiveTo, $requestLatePrincipalAmountMin, $requestLatePrincipalAmountMax, $requestPriceMin, $requestPriceMax, $requestUseOfLoan, $requestHasNewSchedule, $requestCountries, $requestRatings, $requestCreditScoreMin, $requestCreditScoreMax, $requestUserName, $requestGender, $requestAgeMin, $requestAgeMax, $requestIncomeVerificationStatus, $requestShowMyItems, $requestAuctionId, $requestListedOnDateFrom, $requestListedOnDateTo, $requestDebtOccuredOnFrom, $requestDebtOccuredOnTo, $requestDebtOccuredOnForSecondaryFrom, $requestDebtOccuredOnForSecondaryTo, $requestDefaultedDateFrom, $requestDefaultedDateTo, $requestRescheduledFrom, $requestRescheduledTo, $requestLastPaymentDateFrom, $requestLastPaymentDateTo, $requestNextPaymentDateFrom, $requestNextPaymentDateTo, $requestDesiredDiscountRateMin, $requestDesiredDiscountRateMax, $requestXirrMin, $requestXirrMax, $requestPageSize, $requestPageNr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketGetActive'
     *
     * @param  \DateTime $requestLoanIssuedDateFrom Loan issued start date from (optional)
     * @param  \DateTime $requestLoanIssuedDateTo Loan issued start date to (optional)
     * @param  double $requestPrincipalMin Remaining principal amount min (optional)
     * @param  double $requestPrincipalMax Remaining principal amount max (optional)
     * @param  double $requestInterestMin Interest rate min (optional)
     * @param  double $requestInterestMax Interest rate max (optional)
     * @param  int $requestLengthMax Loan lenght min (optional)
     * @param  int $requestLengthMin Loan lenght max (optional)
     * @param  bool $requestHasDebt Is overdue (optional)
     * @param  int[] $requestLoanStatusCode Loan status code              &lt;para&gt;2 Current&lt;/para&gt;&lt;para&gt;100 Overdue&lt;/para&gt;&lt;para&gt;5 60+ days overdue&lt;/para&gt; (optional)
     * @param  int $requestLoanDebtManagementStageType Latest debt management stage type (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveFrom Latest debt management date active from (optional)
     * @param  \DateTime $requestLoanDebtManagementDateActiveTo Latest debt management date active to (optional)
     * @param  double $requestLatePrincipalAmountMin Principal debt amount min (optional)
     * @param  double $requestLatePrincipalAmountMax Principal debt amount max (optional)
     * @param  double $requestPriceMin Price amount min (optional)
     * @param  double $requestPriceMax Price amount max (optional)
     * @param  int $requestUseOfLoan Use of loan (optional)
     * @param  bool $requestHasNewSchedule Has been rescheduled (optional)
     * @param  string[] $requestCountries Two letter iso code for country of origin: EE, ES, FI (optional)
     * @param  string[] $requestRatings Bondora&#39;s rating: AA, A, B, C, D, E, F, HR (optional)
     * @param  int $requestCreditScoreMin Minimum credit score (optional)
     * @param  int $requestCreditScoreMax Maximum credit score (optional)
     * @param  string $requestUserName Borrower&#39;s username (optional)
     * @param  int $requestGender Borrower&#39;s gender: Male 0, Female 1, Unknown 2 (optional)
     * @param  int $requestAgeMin Minimal age (optional)
     * @param  int $requestAgeMax Maximum age (optional)
     * @param  int $requestIncomeVerificationStatus Income verification type (optional)
     * @param  bool $requestShowMyItems Can find your own items from market: Value Null &#x3D; ALL, True &#x3D; only your items, False &#x3D; other user items (optional)
     * @param  string $requestAuctionId Can find specific auction from market (optional)
     * @param  \DateTime $requestListedOnDateFrom Date when item was published from (optional)
     * @param  \DateTime $requestListedOnDateTo Date when item was published to (optional)
     * @param  \DateTime $requestDebtOccuredOnFrom Principal debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnTo Principal debt started date to (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryFrom Interest debt started date from (optional)
     * @param  \DateTime $requestDebtOccuredOnForSecondaryTo Interest debt started date to (optional)
     * @param  \DateTime $requestDefaultedDateFrom Defaulted date from (optional)
     * @param  \DateTime $requestDefaultedDateTo Defaulted date to (optional)
     * @param  \DateTime $requestRescheduledFrom Rescheduled date from (optional)
     * @param  \DateTime $requestRescheduledTo Rescheduled date to (optional)
     * @param  \DateTime $requestLastPaymentDateFrom Last payment date from (optional)
     * @param  \DateTime $requestLastPaymentDateTo Last payment date to (optional)
     * @param  \DateTime $requestNextPaymentDateFrom Next payment date from (optional)
     * @param  \DateTime $requestNextPaymentDateTo Next payment date to (optional)
     * @param  double $requestDesiredDiscountRateMin Minimal DesiredDiscountRate (optional)
     * @param  double $requestDesiredDiscountRateMax Maximal DesiredDiscountRate (optional)
     * @param  double $requestXirrMin Minimal Xirr (optional)
     * @param  double $requestXirrMax Maximal Xirr (optional)
     * @param  int $requestPageSize Max items in result, up to 100000 (optional)
     * @param  int $requestPageNr Result page nr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketGetActiveRequest($requestLoanIssuedDateFrom = null, $requestLoanIssuedDateTo = null, $requestPrincipalMin = null, $requestPrincipalMax = null, $requestInterestMin = null, $requestInterestMax = null, $requestLengthMax = null, $requestLengthMin = null, $requestHasDebt = null, $requestLoanStatusCode = null, $requestLoanDebtManagementStageType = null, $requestLoanDebtManagementDateActiveFrom = null, $requestLoanDebtManagementDateActiveTo = null, $requestLatePrincipalAmountMin = null, $requestLatePrincipalAmountMax = null, $requestPriceMin = null, $requestPriceMax = null, $requestUseOfLoan = null, $requestHasNewSchedule = null, $requestCountries = null, $requestRatings = null, $requestCreditScoreMin = null, $requestCreditScoreMax = null, $requestUserName = null, $requestGender = null, $requestAgeMin = null, $requestAgeMax = null, $requestIncomeVerificationStatus = null, $requestShowMyItems = null, $requestAuctionId = null, $requestListedOnDateFrom = null, $requestListedOnDateTo = null, $requestDebtOccuredOnFrom = null, $requestDebtOccuredOnTo = null, $requestDebtOccuredOnForSecondaryFrom = null, $requestDebtOccuredOnForSecondaryTo = null, $requestDefaultedDateFrom = null, $requestDefaultedDateTo = null, $requestRescheduledFrom = null, $requestRescheduledTo = null, $requestLastPaymentDateFrom = null, $requestLastPaymentDateTo = null, $requestNextPaymentDateFrom = null, $requestNextPaymentDateTo = null, $requestDesiredDiscountRateMin = null, $requestDesiredDiscountRateMax = null, $requestXirrMin = null, $requestXirrMax = null, $requestPageSize = null, $requestPageNr = null)
    {
        if ($requestPageSize !== null && $requestPageSize > 100000) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling SecondMarketApi.secondMarketGetActive, must be smaller than or equal to 100000.');
        }
        if ($requestPageSize !== null && $requestPageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageSize" when calling SecondMarketApi.secondMarketGetActive, must be bigger than or equal to 1.');
        }

        if ($requestPageNr !== null && $requestPageNr > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling SecondMarketApi.secondMarketGetActive, must be smaller than or equal to 2147483647.');
        }
        if ($requestPageNr !== null && $requestPageNr < 1) {
            throw new \InvalidArgumentException('invalid value for "$requestPageNr" when calling SecondMarketApi.secondMarketGetActive, must be bigger than or equal to 1.');
        }


        $resourcePath = '/api/v1/secondarymarket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($requestLoanIssuedDateFrom !== null) {
            $queryParams['request.loanIssuedDateFrom'] = ObjectSerializer::toQueryValue($requestLoanIssuedDateFrom);
        }
        // query params
        if ($requestLoanIssuedDateTo !== null) {
            $queryParams['request.loanIssuedDateTo'] = ObjectSerializer::toQueryValue($requestLoanIssuedDateTo);
        }
        // query params
        if ($requestPrincipalMin !== null) {
            $queryParams['request.principalMin'] = ObjectSerializer::toQueryValue($requestPrincipalMin);
        }
        // query params
        if ($requestPrincipalMax !== null) {
            $queryParams['request.principalMax'] = ObjectSerializer::toQueryValue($requestPrincipalMax);
        }
        // query params
        if ($requestInterestMin !== null) {
            $queryParams['request.interestMin'] = ObjectSerializer::toQueryValue($requestInterestMin);
        }
        // query params
        if ($requestInterestMax !== null) {
            $queryParams['request.interestMax'] = ObjectSerializer::toQueryValue($requestInterestMax);
        }
        // query params
        if ($requestLengthMax !== null) {
            $queryParams['request.lengthMax'] = ObjectSerializer::toQueryValue($requestLengthMax);
        }
        // query params
        if ($requestLengthMin !== null) {
            $queryParams['request.lengthMin'] = ObjectSerializer::toQueryValue($requestLengthMin);
        }
        // query params
        if ($requestHasDebt !== null) {
            $queryParams['request.hasDebt'] = ObjectSerializer::toQueryValue($requestHasDebt);
        }
        // query params
        if (is_array($requestLoanStatusCode)) {
            $requestLoanStatusCode = ObjectSerializer::serializeCollection($requestLoanStatusCode, 'multi', true);
        }
        if ($requestLoanStatusCode !== null) {
            $queryParams['request.loanStatusCode'] = ObjectSerializer::toQueryValue($requestLoanStatusCode);
        }
        // query params
        if ($requestLoanDebtManagementStageType !== null) {
            $queryParams['request.loanDebtManagementStageType'] = ObjectSerializer::toQueryValue($requestLoanDebtManagementStageType);
        }
        // query params
        if ($requestLoanDebtManagementDateActiveFrom !== null) {
            $queryParams['request.loanDebtManagementDateActiveFrom'] = ObjectSerializer::toQueryValue($requestLoanDebtManagementDateActiveFrom);
        }
        // query params
        if ($requestLoanDebtManagementDateActiveTo !== null) {
            $queryParams['request.loanDebtManagementDateActiveTo'] = ObjectSerializer::toQueryValue($requestLoanDebtManagementDateActiveTo);
        }
        // query params
        if ($requestLatePrincipalAmountMin !== null) {
            $queryParams['request.latePrincipalAmountMin'] = ObjectSerializer::toQueryValue($requestLatePrincipalAmountMin);
        }
        // query params
        if ($requestLatePrincipalAmountMax !== null) {
            $queryParams['request.latePrincipalAmountMax'] = ObjectSerializer::toQueryValue($requestLatePrincipalAmountMax);
        }
        // query params
        if ($requestPriceMin !== null) {
            $queryParams['request.priceMin'] = ObjectSerializer::toQueryValue($requestPriceMin);
        }
        // query params
        if ($requestPriceMax !== null) {
            $queryParams['request.priceMax'] = ObjectSerializer::toQueryValue($requestPriceMax);
        }
        // query params
        if ($requestUseOfLoan !== null) {
            $queryParams['request.useOfLoan'] = ObjectSerializer::toQueryValue($requestUseOfLoan);
        }
        // query params
        if ($requestHasNewSchedule !== null) {
            $queryParams['request.hasNewSchedule'] = ObjectSerializer::toQueryValue($requestHasNewSchedule);
        }
        // query params
        if (is_array($requestCountries)) {
            $requestCountries = ObjectSerializer::serializeCollection($requestCountries, 'multi', true);
        }
        if ($requestCountries !== null) {
            $queryParams['request.countries'] = ObjectSerializer::toQueryValue($requestCountries);
        }
        // query params
        if (is_array($requestRatings)) {
            $requestRatings = ObjectSerializer::serializeCollection($requestRatings, 'multi', true);
        }
        if ($requestRatings !== null) {
            $queryParams['request.ratings'] = ObjectSerializer::toQueryValue($requestRatings);
        }
        // query params
        if ($requestCreditScoreMin !== null) {
            $queryParams['request.creditScoreMin'] = ObjectSerializer::toQueryValue($requestCreditScoreMin);
        }
        // query params
        if ($requestCreditScoreMax !== null) {
            $queryParams['request.creditScoreMax'] = ObjectSerializer::toQueryValue($requestCreditScoreMax);
        }
        // query params
        if ($requestUserName !== null) {
            $queryParams['request.userName'] = ObjectSerializer::toQueryValue($requestUserName);
        }
        // query params
        if ($requestGender !== null) {
            $queryParams['request.gender'] = ObjectSerializer::toQueryValue($requestGender);
        }
        // query params
        if ($requestAgeMin !== null) {
            $queryParams['request.ageMin'] = ObjectSerializer::toQueryValue($requestAgeMin);
        }
        // query params
        if ($requestAgeMax !== null) {
            $queryParams['request.ageMax'] = ObjectSerializer::toQueryValue($requestAgeMax);
        }
        // query params
        if ($requestIncomeVerificationStatus !== null) {
            $queryParams['request.incomeVerificationStatus'] = ObjectSerializer::toQueryValue($requestIncomeVerificationStatus);
        }
        // query params
        if ($requestShowMyItems !== null) {
            $queryParams['request.showMyItems'] = ObjectSerializer::toQueryValue($requestShowMyItems);
        }
        // query params
        if ($requestAuctionId !== null) {
            $queryParams['request.auctionId'] = ObjectSerializer::toQueryValue($requestAuctionId);
        }
        // query params
        if ($requestListedOnDateFrom !== null) {
            $queryParams['request.listedOnDateFrom'] = ObjectSerializer::toQueryValue($requestListedOnDateFrom);
        }
        // query params
        if ($requestListedOnDateTo !== null) {
            $queryParams['request.listedOnDateTo'] = ObjectSerializer::toQueryValue($requestListedOnDateTo);
        }
        // query params
        if ($requestDebtOccuredOnFrom !== null) {
            $queryParams['request.debtOccuredOnFrom'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnFrom);
        }
        // query params
        if ($requestDebtOccuredOnTo !== null) {
            $queryParams['request.debtOccuredOnTo'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnTo);
        }
        // query params
        if ($requestDebtOccuredOnForSecondaryFrom !== null) {
            $queryParams['request.debtOccuredOnForSecondaryFrom'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnForSecondaryFrom);
        }
        // query params
        if ($requestDebtOccuredOnForSecondaryTo !== null) {
            $queryParams['request.debtOccuredOnForSecondaryTo'] = ObjectSerializer::toQueryValue($requestDebtOccuredOnForSecondaryTo);
        }
        // query params
        if ($requestDefaultedDateFrom !== null) {
            $queryParams['request.defaultedDateFrom'] = ObjectSerializer::toQueryValue($requestDefaultedDateFrom);
        }
        // query params
        if ($requestDefaultedDateTo !== null) {
            $queryParams['request.defaultedDateTo'] = ObjectSerializer::toQueryValue($requestDefaultedDateTo);
        }
        // query params
        if ($requestRescheduledFrom !== null) {
            $queryParams['request.rescheduledFrom'] = ObjectSerializer::toQueryValue($requestRescheduledFrom);
        }
        // query params
        if ($requestRescheduledTo !== null) {
            $queryParams['request.rescheduledTo'] = ObjectSerializer::toQueryValue($requestRescheduledTo);
        }
        // query params
        if ($requestLastPaymentDateFrom !== null) {
            $queryParams['request.lastPaymentDateFrom'] = ObjectSerializer::toQueryValue($requestLastPaymentDateFrom);
        }
        // query params
        if ($requestLastPaymentDateTo !== null) {
            $queryParams['request.lastPaymentDateTo'] = ObjectSerializer::toQueryValue($requestLastPaymentDateTo);
        }
        // query params
        if ($requestNextPaymentDateFrom !== null) {
            $queryParams['request.nextPaymentDateFrom'] = ObjectSerializer::toQueryValue($requestNextPaymentDateFrom);
        }
        // query params
        if ($requestNextPaymentDateTo !== null) {
            $queryParams['request.nextPaymentDateTo'] = ObjectSerializer::toQueryValue($requestNextPaymentDateTo);
        }
        // query params
        if ($requestDesiredDiscountRateMin !== null) {
            $queryParams['request.desiredDiscountRateMin'] = ObjectSerializer::toQueryValue($requestDesiredDiscountRateMin);
        }
        // query params
        if ($requestDesiredDiscountRateMax !== null) {
            $queryParams['request.desiredDiscountRateMax'] = ObjectSerializer::toQueryValue($requestDesiredDiscountRateMax);
        }
        // query params
        if ($requestXirrMin !== null) {
            $queryParams['request.xirrMin'] = ObjectSerializer::toQueryValue($requestXirrMin);
        }
        // query params
        if ($requestXirrMax !== null) {
            $queryParams['request.xirrMax'] = ObjectSerializer::toQueryValue($requestXirrMax);
        }
        // query params
        if ($requestPageSize !== null) {
            $queryParams['request.pageSize'] = ObjectSerializer::toQueryValue($requestPageSize);
        }
        // query params
        if ($requestPageNr !== null) {
            $queryParams['request.pageNr'] = ObjectSerializer::toQueryValue($requestPageNr);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketGetItem
     *
     * Get the secondary market item summary
     *
     * @param  string $id SecondaryMarket item identificator (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummary
     */
    public function secondMarketGetItem($id)
    {
        list($response) = $this->secondMarketGetItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation secondMarketGetItemWithHttpInfo
     *
     * Get the secondary market item summary
     *
     * @param  string $id SecondaryMarket item identificator (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketGetItemWithHttpInfo($id)
    {
        $request = $this->secondMarketGetItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummary' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummary';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketGetItemAsync
     *
     * Get the secondary market item summary
     *
     * @param  string $id SecondaryMarket item identificator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetItemAsync($id)
    {
        return $this->secondMarketGetItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketGetItemAsyncWithHttpInfo
     *
     * Get the secondary market item summary
     *
     * @param  string $id SecondaryMarket item identificator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetItemAsyncWithHttpInfo($id)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummary';
        $request = $this->secondMarketGetItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketGetItem'
     *
     * @param  string $id SecondaryMarket item identificator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketGetItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling secondMarketGetItem'
            );
        }

        $resourcePath = '/api/v1/secondarymarket/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketGetItemList
     *
     * Get the secondary market item summaries in a list
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketListingRequest $request SecondaryMarket item identificators.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummaryList
     */
    public function secondMarketGetItemList($request)
    {
        list($response) = $this->secondMarketGetItemListWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation secondMarketGetItemListWithHttpInfo
     *
     * Get the secondary market item summaries in a list
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketListingRequest $request SecondaryMarket item identificators.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummaryList, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketGetItemListWithHttpInfo($request)
    {
        $request = $this->secondMarketGetItemListRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummaryList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummaryList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummaryList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummaryList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketGetItemListAsync
     *
     * Get the secondary market item summaries in a list
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketListingRequest $request SecondaryMarket item identificators.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetItemListAsync($request)
    {
        return $this->secondMarketGetItemListAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketGetItemListAsyncWithHttpInfo
     *
     * Get the secondary market item summaries in a list
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketListingRequest $request SecondaryMarket item identificators.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetItemListAsyncWithHttpInfo($request)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketItemSummaryList';
        $request = $this->secondMarketGetItemListRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketGetItemList'
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketListingRequest $request SecondaryMarket item identificators.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketGetItemListRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling secondMarketGetItemList'
            );
        }

        $resourcePath = '/api/v1/secondarymarket/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketGetList
     *
     * Gets LoanPartDetails info by identifiers in a list (up to 1000 items).
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\LoanPartDetailsRequest $request LoanPartDetails identifiers list.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetailsList
     */
    public function secondMarketGetList($request)
    {
        list($response) = $this->secondMarketGetListWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation secondMarketGetListWithHttpInfo
     *
     * Gets LoanPartDetails info by identifiers in a list (up to 1000 items).
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\LoanPartDetailsRequest $request LoanPartDetails identifiers list.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetailsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketGetListWithHttpInfo($request)
    {
        $request = $this->secondMarketGetListRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetailsList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetailsList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetailsList';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetailsList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketGetListAsync
     *
     * Gets LoanPartDetails info by identifiers in a list (up to 1000 items).
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\LoanPartDetailsRequest $request LoanPartDetails identifiers list.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetListAsync($request)
    {
        return $this->secondMarketGetListAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketGetListAsyncWithHttpInfo
     *
     * Gets LoanPartDetails info by identifiers in a list (up to 1000 items).
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\LoanPartDetailsRequest $request LoanPartDetails identifiers list.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketGetListAsyncWithHttpInfo($request)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultLoanPartDetailsList';
        $request = $this->secondMarketGetListRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketGetList'
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\LoanPartDetailsRequest $request LoanPartDetails identifiers list.              This endpoint supports both GET and POST methods.              If using this endpoint with the GET method the request data must be sent with the request body, even though it is a GET request.              The \&quot;Content-Type\&quot; header must be set so the server knows how to decode the data. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketGetListRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling secondMarketGetList'
            );
        }

        $resourcePath = '/api/v1/loanpart/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation secondMarketSell
     *
     * Sell your loans to secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketSaleRequest $saleRequest saleRequest (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketSale
     */
    public function secondMarketSell($saleRequest)
    {
        list($response) = $this->secondMarketSellWithHttpInfo($saleRequest);
        return $response;
    }

    /**
     * Operation secondMarketSellWithHttpInfo
     *
     * Sell your loans to secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketSaleRequest $saleRequest (required)
     *
     * @throws \CedricZiel\OpenAPI\BondoraPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketSale, HTTP status code, HTTP response headers (array of strings)
     */
    public function secondMarketSellWithHttpInfo($saleRequest)
    {
        $request = $this->secondMarketSellRequest($saleRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketSale' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketSale', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketSale';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketSale',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation secondMarketSellAsync
     *
     * Sell your loans to secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketSaleRequest $saleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketSellAsync($saleRequest)
    {
        return $this->secondMarketSellAsyncWithHttpInfo($saleRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation secondMarketSellAsyncWithHttpInfo
     *
     * Sell your loans to secondary market.
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketSaleRequest $saleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function secondMarketSellAsyncWithHttpInfo($saleRequest)
    {
        $returnType = '\CedricZiel\OpenAPI\BondoraPHP\Model\ApiResultSecondMarketSale';
        $request = $this->secondMarketSellRequest($saleRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'secondMarketSell'
     *
     * @param  \CedricZiel\OpenAPI\BondoraPHP\Model\SecondMarketSaleRequest $saleRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function secondMarketSellRequest($saleRequest)
    {
        // verify the required parameter 'saleRequest' is set
        if ($saleRequest === null || (is_array($saleRequest) && count($saleRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $saleRequest when calling secondMarketSell'
            );
        }

        $resourcePath = '/api/v1/secondarymarket/sell';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($saleRequest)) {
            $_tempBody = $saleRequest;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
