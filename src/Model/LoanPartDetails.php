<?php
/**
 * LoanPartDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * LoanPartDetails Class Doc Comment
 *
 * @category Class
 * @description LoanPart related data with summary, collection process and schedules
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoanPartDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoanPartDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loanPartId' => 'string',
        'amount' => 'double',
        'auctionId' => 'string',
        'auctionName' => 'string',
        'auctionNumber' => 'int',
        'auctionBidNumber' => 'int',
        'investmentNumber' => 'string',
        'country' => 'string',
        'creditScore' => 'double',
        'creditScoreEsMicroL' => 'string',
        'creditScoreEsEquifaxRisk' => 'string',
        'creditScoreFiAsiakasTietoRiskGrade' => 'string',
        'creditScoreEeMini' => 'string',
        'rating' => 'string',
        'initialInterest' => 'double',
        'interest' => 'double',
        'rescheduledInterest' => 'double',
        'useOfLoan' => 'int',
        'incomeVerificationStatus' => 'int',
        'loanId' => 'string',
        'loanStatusCode' => 'int',
        'userName' => 'string',
        'gender' => 'int',
        'dateOfBirth' => '\DateTime',
        'signedDate' => '\DateTime',
        'reScheduledOn' => '\DateTime',
        'debtOccuredOn' => '\DateTime',
        'debtOccuredOnForSecondary' => '\DateTime',
        'loanDuration' => 'int',
        'nextPaymentNr' => 'int',
        'nextPaymentDate' => '\DateTime',
        'nextPaymentSum' => 'double',
        'nrOfScheduledPayments' => 'int',
        'lastPaymentDate' => '\DateTime',
        'principalRepaid' => 'double',
        'interestRepaid' => 'double',
        'lateAmountPaid' => 'double',
        'principalRemaining' => 'double',
        'principalLateAmount' => 'double',
        'interestLateAmount' => 'double',
        'penaltyLateAmount' => 'double',
        'lateAmountTotal' => 'double',
        'principalWriteOffAmount' => 'double',
        'interestWriteOffAmount' => 'double',
        'penaltyWriteOffAmount' => 'double',
        'writeOffTotal' => 'double',
        'debtServicingCostMainAmount' => 'double',
        'debtServicingCostInterestAmount' => 'double',
        'debtServicingCostPenaltyAmount' => 'double',
        'debtServicingCostTotal' => 'double',
        'repaidPrincipalCurrentOwner' => 'double',
        'repaidInterestsCurrentOwner' => 'double',
        'lateChargesPaidCurrentOwner' => 'double',
        'repaidTotalCurrentOwner' => 'double',
        'totalRepaid' => 'double',
        'debtManagmentEvents' => '\CedricZiel\OpenAPI\BondoraPHP\Model\DebtManagementEvent[]',
        'loanTransfers' => '\CedricZiel\OpenAPI\BondoraPHP\Model\LoanTransfer[]',
        'scheduledPayments' => '\CedricZiel\OpenAPI\BondoraPHP\Model\ScheduledPayment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'loanPartId' => null,
        'amount' => 'double',
        'auctionId' => null,
        'auctionName' => null,
        'auctionNumber' => 'int32',
        'auctionBidNumber' => 'int32',
        'investmentNumber' => null,
        'country' => null,
        'creditScore' => 'double',
        'creditScoreEsMicroL' => null,
        'creditScoreEsEquifaxRisk' => null,
        'creditScoreFiAsiakasTietoRiskGrade' => null,
        'creditScoreEeMini' => null,
        'rating' => null,
        'initialInterest' => 'double',
        'interest' => 'double',
        'rescheduledInterest' => 'double',
        'useOfLoan' => 'int32',
        'incomeVerificationStatus' => 'int32',
        'loanId' => null,
        'loanStatusCode' => 'int32',
        'userName' => null,
        'gender' => 'int32',
        'dateOfBirth' => 'date-time',
        'signedDate' => 'date-time',
        'reScheduledOn' => 'date-time',
        'debtOccuredOn' => 'date-time',
        'debtOccuredOnForSecondary' => 'date-time',
        'loanDuration' => 'int32',
        'nextPaymentNr' => 'int32',
        'nextPaymentDate' => 'date-time',
        'nextPaymentSum' => 'double',
        'nrOfScheduledPayments' => 'int32',
        'lastPaymentDate' => 'date-time',
        'principalRepaid' => 'double',
        'interestRepaid' => 'double',
        'lateAmountPaid' => 'double',
        'principalRemaining' => 'double',
        'principalLateAmount' => 'double',
        'interestLateAmount' => 'double',
        'penaltyLateAmount' => 'double',
        'lateAmountTotal' => 'double',
        'principalWriteOffAmount' => 'double',
        'interestWriteOffAmount' => 'double',
        'penaltyWriteOffAmount' => 'double',
        'writeOffTotal' => 'double',
        'debtServicingCostMainAmount' => 'double',
        'debtServicingCostInterestAmount' => 'double',
        'debtServicingCostPenaltyAmount' => 'double',
        'debtServicingCostTotal' => 'double',
        'repaidPrincipalCurrentOwner' => 'double',
        'repaidInterestsCurrentOwner' => 'double',
        'lateChargesPaidCurrentOwner' => 'double',
        'repaidTotalCurrentOwner' => 'double',
        'totalRepaid' => 'double',
        'debtManagmentEvents' => null,
        'loanTransfers' => null,
        'scheduledPayments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loanPartId' => 'LoanPartId',
        'amount' => 'Amount',
        'auctionId' => 'AuctionId',
        'auctionName' => 'AuctionName',
        'auctionNumber' => 'AuctionNumber',
        'auctionBidNumber' => 'AuctionBidNumber',
        'investmentNumber' => 'InvestmentNumber',
        'country' => 'Country',
        'creditScore' => 'CreditScore',
        'creditScoreEsMicroL' => 'CreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'CreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'CreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'CreditScoreEeMini',
        'rating' => 'Rating',
        'initialInterest' => 'InitialInterest',
        'interest' => 'Interest',
        'rescheduledInterest' => 'RescheduledInterest',
        'useOfLoan' => 'UseOfLoan',
        'incomeVerificationStatus' => 'IncomeVerificationStatus',
        'loanId' => 'LoanId',
        'loanStatusCode' => 'LoanStatusCode',
        'userName' => 'UserName',
        'gender' => 'Gender',
        'dateOfBirth' => 'DateOfBirth',
        'signedDate' => 'SignedDate',
        'reScheduledOn' => 'ReScheduledOn',
        'debtOccuredOn' => 'DebtOccuredOn',
        'debtOccuredOnForSecondary' => 'DebtOccuredOnForSecondary',
        'loanDuration' => 'LoanDuration',
        'nextPaymentNr' => 'NextPaymentNr',
        'nextPaymentDate' => 'NextPaymentDate',
        'nextPaymentSum' => 'NextPaymentSum',
        'nrOfScheduledPayments' => 'NrOfScheduledPayments',
        'lastPaymentDate' => 'LastPaymentDate',
        'principalRepaid' => 'PrincipalRepaid',
        'interestRepaid' => 'InterestRepaid',
        'lateAmountPaid' => 'LateAmountPaid',
        'principalRemaining' => 'PrincipalRemaining',
        'principalLateAmount' => 'PrincipalLateAmount',
        'interestLateAmount' => 'InterestLateAmount',
        'penaltyLateAmount' => 'PenaltyLateAmount',
        'lateAmountTotal' => 'LateAmountTotal',
        'principalWriteOffAmount' => 'PrincipalWriteOffAmount',
        'interestWriteOffAmount' => 'InterestWriteOffAmount',
        'penaltyWriteOffAmount' => 'PenaltyWriteOffAmount',
        'writeOffTotal' => 'WriteOffTotal',
        'debtServicingCostMainAmount' => 'DebtServicingCostMainAmount',
        'debtServicingCostInterestAmount' => 'DebtServicingCostInterestAmount',
        'debtServicingCostPenaltyAmount' => 'DebtServicingCostPenaltyAmount',
        'debtServicingCostTotal' => 'DebtServicingCostTotal',
        'repaidPrincipalCurrentOwner' => 'RepaidPrincipalCurrentOwner',
        'repaidInterestsCurrentOwner' => 'RepaidInterestsCurrentOwner',
        'lateChargesPaidCurrentOwner' => 'LateChargesPaidCurrentOwner',
        'repaidTotalCurrentOwner' => 'RepaidTotalCurrentOwner',
        'totalRepaid' => 'TotalRepaid',
        'debtManagmentEvents' => 'DebtManagmentEvents',
        'loanTransfers' => 'LoanTransfers',
        'scheduledPayments' => 'ScheduledPayments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loanPartId' => 'setLoanPartId',
        'amount' => 'setAmount',
        'auctionId' => 'setAuctionId',
        'auctionName' => 'setAuctionName',
        'auctionNumber' => 'setAuctionNumber',
        'auctionBidNumber' => 'setAuctionBidNumber',
        'investmentNumber' => 'setInvestmentNumber',
        'country' => 'setCountry',
        'creditScore' => 'setCreditScore',
        'creditScoreEsMicroL' => 'setCreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'setCreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'setCreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'setCreditScoreEeMini',
        'rating' => 'setRating',
        'initialInterest' => 'setInitialInterest',
        'interest' => 'setInterest',
        'rescheduledInterest' => 'setRescheduledInterest',
        'useOfLoan' => 'setUseOfLoan',
        'incomeVerificationStatus' => 'setIncomeVerificationStatus',
        'loanId' => 'setLoanId',
        'loanStatusCode' => 'setLoanStatusCode',
        'userName' => 'setUserName',
        'gender' => 'setGender',
        'dateOfBirth' => 'setDateOfBirth',
        'signedDate' => 'setSignedDate',
        'reScheduledOn' => 'setReScheduledOn',
        'debtOccuredOn' => 'setDebtOccuredOn',
        'debtOccuredOnForSecondary' => 'setDebtOccuredOnForSecondary',
        'loanDuration' => 'setLoanDuration',
        'nextPaymentNr' => 'setNextPaymentNr',
        'nextPaymentDate' => 'setNextPaymentDate',
        'nextPaymentSum' => 'setNextPaymentSum',
        'nrOfScheduledPayments' => 'setNrOfScheduledPayments',
        'lastPaymentDate' => 'setLastPaymentDate',
        'principalRepaid' => 'setPrincipalRepaid',
        'interestRepaid' => 'setInterestRepaid',
        'lateAmountPaid' => 'setLateAmountPaid',
        'principalRemaining' => 'setPrincipalRemaining',
        'principalLateAmount' => 'setPrincipalLateAmount',
        'interestLateAmount' => 'setInterestLateAmount',
        'penaltyLateAmount' => 'setPenaltyLateAmount',
        'lateAmountTotal' => 'setLateAmountTotal',
        'principalWriteOffAmount' => 'setPrincipalWriteOffAmount',
        'interestWriteOffAmount' => 'setInterestWriteOffAmount',
        'penaltyWriteOffAmount' => 'setPenaltyWriteOffAmount',
        'writeOffTotal' => 'setWriteOffTotal',
        'debtServicingCostMainAmount' => 'setDebtServicingCostMainAmount',
        'debtServicingCostInterestAmount' => 'setDebtServicingCostInterestAmount',
        'debtServicingCostPenaltyAmount' => 'setDebtServicingCostPenaltyAmount',
        'debtServicingCostTotal' => 'setDebtServicingCostTotal',
        'repaidPrincipalCurrentOwner' => 'setRepaidPrincipalCurrentOwner',
        'repaidInterestsCurrentOwner' => 'setRepaidInterestsCurrentOwner',
        'lateChargesPaidCurrentOwner' => 'setLateChargesPaidCurrentOwner',
        'repaidTotalCurrentOwner' => 'setRepaidTotalCurrentOwner',
        'totalRepaid' => 'setTotalRepaid',
        'debtManagmentEvents' => 'setDebtManagmentEvents',
        'loanTransfers' => 'setLoanTransfers',
        'scheduledPayments' => 'setScheduledPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loanPartId' => 'getLoanPartId',
        'amount' => 'getAmount',
        'auctionId' => 'getAuctionId',
        'auctionName' => 'getAuctionName',
        'auctionNumber' => 'getAuctionNumber',
        'auctionBidNumber' => 'getAuctionBidNumber',
        'investmentNumber' => 'getInvestmentNumber',
        'country' => 'getCountry',
        'creditScore' => 'getCreditScore',
        'creditScoreEsMicroL' => 'getCreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'getCreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'getCreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'getCreditScoreEeMini',
        'rating' => 'getRating',
        'initialInterest' => 'getInitialInterest',
        'interest' => 'getInterest',
        'rescheduledInterest' => 'getRescheduledInterest',
        'useOfLoan' => 'getUseOfLoan',
        'incomeVerificationStatus' => 'getIncomeVerificationStatus',
        'loanId' => 'getLoanId',
        'loanStatusCode' => 'getLoanStatusCode',
        'userName' => 'getUserName',
        'gender' => 'getGender',
        'dateOfBirth' => 'getDateOfBirth',
        'signedDate' => 'getSignedDate',
        'reScheduledOn' => 'getReScheduledOn',
        'debtOccuredOn' => 'getDebtOccuredOn',
        'debtOccuredOnForSecondary' => 'getDebtOccuredOnForSecondary',
        'loanDuration' => 'getLoanDuration',
        'nextPaymentNr' => 'getNextPaymentNr',
        'nextPaymentDate' => 'getNextPaymentDate',
        'nextPaymentSum' => 'getNextPaymentSum',
        'nrOfScheduledPayments' => 'getNrOfScheduledPayments',
        'lastPaymentDate' => 'getLastPaymentDate',
        'principalRepaid' => 'getPrincipalRepaid',
        'interestRepaid' => 'getInterestRepaid',
        'lateAmountPaid' => 'getLateAmountPaid',
        'principalRemaining' => 'getPrincipalRemaining',
        'principalLateAmount' => 'getPrincipalLateAmount',
        'interestLateAmount' => 'getInterestLateAmount',
        'penaltyLateAmount' => 'getPenaltyLateAmount',
        'lateAmountTotal' => 'getLateAmountTotal',
        'principalWriteOffAmount' => 'getPrincipalWriteOffAmount',
        'interestWriteOffAmount' => 'getInterestWriteOffAmount',
        'penaltyWriteOffAmount' => 'getPenaltyWriteOffAmount',
        'writeOffTotal' => 'getWriteOffTotal',
        'debtServicingCostMainAmount' => 'getDebtServicingCostMainAmount',
        'debtServicingCostInterestAmount' => 'getDebtServicingCostInterestAmount',
        'debtServicingCostPenaltyAmount' => 'getDebtServicingCostPenaltyAmount',
        'debtServicingCostTotal' => 'getDebtServicingCostTotal',
        'repaidPrincipalCurrentOwner' => 'getRepaidPrincipalCurrentOwner',
        'repaidInterestsCurrentOwner' => 'getRepaidInterestsCurrentOwner',
        'lateChargesPaidCurrentOwner' => 'getLateChargesPaidCurrentOwner',
        'repaidTotalCurrentOwner' => 'getRepaidTotalCurrentOwner',
        'totalRepaid' => 'getTotalRepaid',
        'debtManagmentEvents' => 'getDebtManagmentEvents',
        'loanTransfers' => 'getLoanTransfers',
        'scheduledPayments' => 'getScheduledPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const USE_OF_LOAN_0 = 0;
    const USE_OF_LOAN_1 = 1;
    const USE_OF_LOAN_2 = 2;
    const USE_OF_LOAN_3 = 3;
    const USE_OF_LOAN_4 = 4;
    const USE_OF_LOAN_5 = 5;
    const USE_OF_LOAN_6 = 6;
    const USE_OF_LOAN_7 = 7;
    const USE_OF_LOAN_8 = 8;
    const USE_OF_LOAN_101 = 101;
    const USE_OF_LOAN_102 = 102;
    const USE_OF_LOAN_103 = 103;
    const USE_OF_LOAN_104 = 104;
    const USE_OF_LOAN_105 = 105;
    const USE_OF_LOAN_106 = 106;
    const USE_OF_LOAN_107 = 107;
    const USE_OF_LOAN_108 = 108;
    const USE_OF_LOAN_109 = 109;
    const USE_OF_LOAN_110 = 110;
    const USE_OF_LOAN_201 = 201;
    const USE_OF_LOAN_202 = 202;
    const USE_OF_LOAN_203 = 203;
    const USE_OF_LOAN_204 = 204;
    const USE_OF_LOAN_205 = 205;
    const USE_OF_LOAN_206 = 206;
    const USE_OF_LOAN_207 = 207;
    const USE_OF_LOAN_208 = 208;
    const USE_OF_LOAN_209 = 209;
    const USE_OF_LOAN_210 = 210;
    const USE_OF_LOAN_211 = 211;
    const USE_OF_LOAN_MINUS_1 = -1;
    const INCOME_VERIFICATION_STATUS_1 = 1;
    const INCOME_VERIFICATION_STATUS_2 = 2;
    const INCOME_VERIFICATION_STATUS_3 = 3;
    const INCOME_VERIFICATION_STATUS_4 = 4;
    const GENDER_0 = 0;
    const GENDER_1 = 1;
    const GENDER_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseOfLoanAllowableValues()
    {
        return [
            self::USE_OF_LOAN_0,
            self::USE_OF_LOAN_1,
            self::USE_OF_LOAN_2,
            self::USE_OF_LOAN_3,
            self::USE_OF_LOAN_4,
            self::USE_OF_LOAN_5,
            self::USE_OF_LOAN_6,
            self::USE_OF_LOAN_7,
            self::USE_OF_LOAN_8,
            self::USE_OF_LOAN_101,
            self::USE_OF_LOAN_102,
            self::USE_OF_LOAN_103,
            self::USE_OF_LOAN_104,
            self::USE_OF_LOAN_105,
            self::USE_OF_LOAN_106,
            self::USE_OF_LOAN_107,
            self::USE_OF_LOAN_108,
            self::USE_OF_LOAN_109,
            self::USE_OF_LOAN_110,
            self::USE_OF_LOAN_201,
            self::USE_OF_LOAN_202,
            self::USE_OF_LOAN_203,
            self::USE_OF_LOAN_204,
            self::USE_OF_LOAN_205,
            self::USE_OF_LOAN_206,
            self::USE_OF_LOAN_207,
            self::USE_OF_LOAN_208,
            self::USE_OF_LOAN_209,
            self::USE_OF_LOAN_210,
            self::USE_OF_LOAN_211,
            self::USE_OF_LOAN_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncomeVerificationStatusAllowableValues()
    {
        return [
            self::INCOME_VERIFICATION_STATUS_1,
            self::INCOME_VERIFICATION_STATUS_2,
            self::INCOME_VERIFICATION_STATUS_3,
            self::INCOME_VERIFICATION_STATUS_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_0,
            self::GENDER_1,
            self::GENDER_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loanPartId'] = isset($data['loanPartId']) ? $data['loanPartId'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['auctionId'] = isset($data['auctionId']) ? $data['auctionId'] : null;
        $this->container['auctionName'] = isset($data['auctionName']) ? $data['auctionName'] : null;
        $this->container['auctionNumber'] = isset($data['auctionNumber']) ? $data['auctionNumber'] : null;
        $this->container['auctionBidNumber'] = isset($data['auctionBidNumber']) ? $data['auctionBidNumber'] : null;
        $this->container['investmentNumber'] = isset($data['investmentNumber']) ? $data['investmentNumber'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['creditScore'] = isset($data['creditScore']) ? $data['creditScore'] : null;
        $this->container['creditScoreEsMicroL'] = isset($data['creditScoreEsMicroL']) ? $data['creditScoreEsMicroL'] : null;
        $this->container['creditScoreEsEquifaxRisk'] = isset($data['creditScoreEsEquifaxRisk']) ? $data['creditScoreEsEquifaxRisk'] : null;
        $this->container['creditScoreFiAsiakasTietoRiskGrade'] = isset($data['creditScoreFiAsiakasTietoRiskGrade']) ? $data['creditScoreFiAsiakasTietoRiskGrade'] : null;
        $this->container['creditScoreEeMini'] = isset($data['creditScoreEeMini']) ? $data['creditScoreEeMini'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['initialInterest'] = isset($data['initialInterest']) ? $data['initialInterest'] : null;
        $this->container['interest'] = isset($data['interest']) ? $data['interest'] : null;
        $this->container['rescheduledInterest'] = isset($data['rescheduledInterest']) ? $data['rescheduledInterest'] : null;
        $this->container['useOfLoan'] = isset($data['useOfLoan']) ? $data['useOfLoan'] : null;
        $this->container['incomeVerificationStatus'] = isset($data['incomeVerificationStatus']) ? $data['incomeVerificationStatus'] : null;
        $this->container['loanId'] = isset($data['loanId']) ? $data['loanId'] : null;
        $this->container['loanStatusCode'] = isset($data['loanStatusCode']) ? $data['loanStatusCode'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['signedDate'] = isset($data['signedDate']) ? $data['signedDate'] : null;
        $this->container['reScheduledOn'] = isset($data['reScheduledOn']) ? $data['reScheduledOn'] : null;
        $this->container['debtOccuredOn'] = isset($data['debtOccuredOn']) ? $data['debtOccuredOn'] : null;
        $this->container['debtOccuredOnForSecondary'] = isset($data['debtOccuredOnForSecondary']) ? $data['debtOccuredOnForSecondary'] : null;
        $this->container['loanDuration'] = isset($data['loanDuration']) ? $data['loanDuration'] : null;
        $this->container['nextPaymentNr'] = isset($data['nextPaymentNr']) ? $data['nextPaymentNr'] : null;
        $this->container['nextPaymentDate'] = isset($data['nextPaymentDate']) ? $data['nextPaymentDate'] : null;
        $this->container['nextPaymentSum'] = isset($data['nextPaymentSum']) ? $data['nextPaymentSum'] : null;
        $this->container['nrOfScheduledPayments'] = isset($data['nrOfScheduledPayments']) ? $data['nrOfScheduledPayments'] : null;
        $this->container['lastPaymentDate'] = isset($data['lastPaymentDate']) ? $data['lastPaymentDate'] : null;
        $this->container['principalRepaid'] = isset($data['principalRepaid']) ? $data['principalRepaid'] : null;
        $this->container['interestRepaid'] = isset($data['interestRepaid']) ? $data['interestRepaid'] : null;
        $this->container['lateAmountPaid'] = isset($data['lateAmountPaid']) ? $data['lateAmountPaid'] : null;
        $this->container['principalRemaining'] = isset($data['principalRemaining']) ? $data['principalRemaining'] : null;
        $this->container['principalLateAmount'] = isset($data['principalLateAmount']) ? $data['principalLateAmount'] : null;
        $this->container['interestLateAmount'] = isset($data['interestLateAmount']) ? $data['interestLateAmount'] : null;
        $this->container['penaltyLateAmount'] = isset($data['penaltyLateAmount']) ? $data['penaltyLateAmount'] : null;
        $this->container['lateAmountTotal'] = isset($data['lateAmountTotal']) ? $data['lateAmountTotal'] : null;
        $this->container['principalWriteOffAmount'] = isset($data['principalWriteOffAmount']) ? $data['principalWriteOffAmount'] : null;
        $this->container['interestWriteOffAmount'] = isset($data['interestWriteOffAmount']) ? $data['interestWriteOffAmount'] : null;
        $this->container['penaltyWriteOffAmount'] = isset($data['penaltyWriteOffAmount']) ? $data['penaltyWriteOffAmount'] : null;
        $this->container['writeOffTotal'] = isset($data['writeOffTotal']) ? $data['writeOffTotal'] : null;
        $this->container['debtServicingCostMainAmount'] = isset($data['debtServicingCostMainAmount']) ? $data['debtServicingCostMainAmount'] : null;
        $this->container['debtServicingCostInterestAmount'] = isset($data['debtServicingCostInterestAmount']) ? $data['debtServicingCostInterestAmount'] : null;
        $this->container['debtServicingCostPenaltyAmount'] = isset($data['debtServicingCostPenaltyAmount']) ? $data['debtServicingCostPenaltyAmount'] : null;
        $this->container['debtServicingCostTotal'] = isset($data['debtServicingCostTotal']) ? $data['debtServicingCostTotal'] : null;
        $this->container['repaidPrincipalCurrentOwner'] = isset($data['repaidPrincipalCurrentOwner']) ? $data['repaidPrincipalCurrentOwner'] : null;
        $this->container['repaidInterestsCurrentOwner'] = isset($data['repaidInterestsCurrentOwner']) ? $data['repaidInterestsCurrentOwner'] : null;
        $this->container['lateChargesPaidCurrentOwner'] = isset($data['lateChargesPaidCurrentOwner']) ? $data['lateChargesPaidCurrentOwner'] : null;
        $this->container['repaidTotalCurrentOwner'] = isset($data['repaidTotalCurrentOwner']) ? $data['repaidTotalCurrentOwner'] : null;
        $this->container['totalRepaid'] = isset($data['totalRepaid']) ? $data['totalRepaid'] : null;
        $this->container['debtManagmentEvents'] = isset($data['debtManagmentEvents']) ? $data['debtManagmentEvents'] : null;
        $this->container['loanTransfers'] = isset($data['loanTransfers']) ? $data['loanTransfers'] : null;
        $this->container['scheduledPayments'] = isset($data['scheduledPayments']) ? $data['scheduledPayments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($this->container['useOfLoan']) && !in_array($this->container['useOfLoan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'useOfLoan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIncomeVerificationStatusAllowableValues();
        if (!is_null($this->container['incomeVerificationStatus']) && !in_array($this->container['incomeVerificationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'incomeVerificationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loanPartId
     *
     * @return string|null
     */
    public function getLoanPartId()
    {
        return $this->container['loanPartId'];
    }

    /**
     * Sets loanPartId
     *
     * @param string|null $loanPartId LoanPart unique identifier
     *
     * @return $this
     */
    public function setLoanPartId($loanPartId)
    {
        $this->container['loanPartId'] = $loanPartId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount Investment amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets auctionId
     *
     * @return string|null
     */
    public function getAuctionId()
    {
        return $this->container['auctionId'];
    }

    /**
     * Sets auctionId
     *
     * @param string|null $auctionId Auction unique identifier
     *
     * @return $this
     */
    public function setAuctionId($auctionId)
    {
        $this->container['auctionId'] = $auctionId;

        return $this;
    }

    /**
     * Gets auctionName
     *
     * @return string|null
     */
    public function getAuctionName()
    {
        return $this->container['auctionName'];
    }

    /**
     * Sets auctionName
     *
     * @param string|null $auctionName Auction name
     *
     * @return $this
     */
    public function setAuctionName($auctionName)
    {
        $this->container['auctionName'] = $auctionName;

        return $this;
    }

    /**
     * Gets auctionNumber
     *
     * @return int|null
     */
    public function getAuctionNumber()
    {
        return $this->container['auctionNumber'];
    }

    /**
     * Sets auctionNumber
     *
     * @param int|null $auctionNumber Auction number
     *
     * @return $this
     */
    public function setAuctionNumber($auctionNumber)
    {
        $this->container['auctionNumber'] = $auctionNumber;

        return $this;
    }

    /**
     * Gets auctionBidNumber
     *
     * @return int|null
     */
    public function getAuctionBidNumber()
    {
        return $this->container['auctionBidNumber'];
    }

    /**
     * Sets auctionBidNumber
     *
     * @param int|null $auctionBidNumber Auction bid number
     *
     * @return $this
     */
    public function setAuctionBidNumber($auctionBidNumber)
    {
        $this->container['auctionBidNumber'] = $auctionBidNumber;

        return $this;
    }

    /**
     * Gets investmentNumber
     *
     * @return string|null
     */
    public function getInvestmentNumber()
    {
        return $this->container['investmentNumber'];
    }

    /**
     * Sets investmentNumber
     *
     * @param string|null $investmentNumber investmentNumber
     *
     * @return $this
     */
    public function setInvestmentNumber($investmentNumber)
    {
        $this->container['investmentNumber'] = $investmentNumber;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Residency of the borrower
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets creditScore
     *
     * @return double|null
     */
    public function getCreditScore()
    {
        return $this->container['creditScore'];
    }

    /**
     * Sets creditScore
     *
     * @param double|null $creditScore <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>
     *
     * @return $this
     */
    public function setCreditScore($creditScore)
    {
        $this->container['creditScore'] = $creditScore;

        return $this;
    }

    /**
     * Gets creditScoreEsMicroL
     *
     * @return string|null
     */
    public function getCreditScoreEsMicroL()
    {
        return $this->container['creditScoreEsMicroL'];
    }

    /**
     * Sets creditScoreEsMicroL
     *
     * @param string|null $creditScoreEsMicroL A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>
     *
     * @return $this
     */
    public function setCreditScoreEsMicroL($creditScoreEsMicroL)
    {
        $this->container['creditScoreEsMicroL'] = $creditScoreEsMicroL;

        return $this;
    }

    /**
     * Gets creditScoreEsEquifaxRisk
     *
     * @return string|null
     */
    public function getCreditScoreEsEquifaxRisk()
    {
        return $this->container['creditScoreEsEquifaxRisk'];
    }

    /**
     * Sets creditScoreEsEquifaxRisk
     *
     * @param string|null $creditScoreEsEquifaxRisk Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>
     *
     * @return $this
     */
    public function setCreditScoreEsEquifaxRisk($creditScoreEsEquifaxRisk)
    {
        $this->container['creditScoreEsEquifaxRisk'] = $creditScoreEsEquifaxRisk;

        return $this;
    }

    /**
     * Gets creditScoreFiAsiakasTietoRiskGrade
     *
     * @return string|null
     */
    public function getCreditScoreFiAsiakasTietoRiskGrade()
    {
        return $this->container['creditScoreFiAsiakasTietoRiskGrade'];
    }

    /**
     * Sets creditScoreFiAsiakasTietoRiskGrade
     *
     * @param string|null $creditScoreFiAsiakasTietoRiskGrade Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>
     *
     * @return $this
     */
    public function setCreditScoreFiAsiakasTietoRiskGrade($creditScoreFiAsiakasTietoRiskGrade)
    {
        $this->container['creditScoreFiAsiakasTietoRiskGrade'] = $creditScoreFiAsiakasTietoRiskGrade;

        return $this;
    }

    /**
     * Gets creditScoreEeMini
     *
     * @return string|null
     */
    public function getCreditScoreEeMini()
    {
        return $this->container['creditScoreEeMini'];
    }

    /**
     * Sets creditScoreEeMini
     *
     * @param string|null $creditScoreEeMini Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>
     *
     * @return $this
     */
    public function setCreditScoreEeMini($creditScoreEeMini)
    {
        $this->container['creditScoreEeMini'] = $creditScoreEeMini;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string|null $rating Bondora Rating issued by the Rating model
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets initialInterest
     *
     * @return double|null
     */
    public function getInitialInterest()
    {
        return $this->container['initialInterest'];
    }

    /**
     * Sets initialInterest
     *
     * @param double|null $initialInterest Initial interest rate
     *
     * @return $this
     */
    public function setInitialInterest($initialInterest)
    {
        $this->container['initialInterest'] = $initialInterest;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return double|null
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param double|null $interest Current interest rate
     *
     * @return $this
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets rescheduledInterest
     *
     * @return double|null
     */
    public function getRescheduledInterest()
    {
        return $this->container['rescheduledInterest'];
    }

    /**
     * Sets rescheduledInterest
     *
     * @param double|null $rescheduledInterest Interest rate after the loan was rescheduled
     *
     * @return $this
     */
    public function setRescheduledInterest($rescheduledInterest)
    {
        $this->container['rescheduledInterest'] = $rescheduledInterest;

        return $this;
    }

    /**
     * Gets useOfLoan
     *
     * @return int|null
     */
    public function getUseOfLoan()
    {
        return $this->container['useOfLoan'];
    }

    /**
     * Sets useOfLoan
     *
     * @param int|null $useOfLoan Use of loan
     *
     * @return $this
     */
    public function setUseOfLoan($useOfLoan)
    {
        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($useOfLoan) && !in_array($useOfLoan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'useOfLoan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['useOfLoan'] = $useOfLoan;

        return $this;
    }

    /**
     * Gets incomeVerificationStatus
     *
     * @return int|null
     */
    public function getIncomeVerificationStatus()
    {
        return $this->container['incomeVerificationStatus'];
    }

    /**
     * Sets incomeVerificationStatus
     *
     * @param int|null $incomeVerificationStatus Income verification type
     *
     * @return $this
     */
    public function setIncomeVerificationStatus($incomeVerificationStatus)
    {
        $allowedValues = $this->getIncomeVerificationStatusAllowableValues();
        if (!is_null($incomeVerificationStatus) && !in_array($incomeVerificationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'incomeVerificationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incomeVerificationStatus'] = $incomeVerificationStatus;

        return $this;
    }

    /**
     * Gets loanId
     *
     * @return string|null
     */
    public function getLoanId()
    {
        return $this->container['loanId'];
    }

    /**
     * Sets loanId
     *
     * @param string|null $loanId Loan unique identifier
     *
     * @return $this
     */
    public function setLoanId($loanId)
    {
        $this->container['loanId'] = $loanId;

        return $this;
    }

    /**
     * Gets loanStatusCode
     *
     * @return int|null
     */
    public function getLoanStatusCode()
    {
        return $this->container['loanStatusCode'];
    }

    /**
     * Sets loanStatusCode
     *
     * @param int|null $loanStatusCode Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>
     *
     * @return $this
     */
    public function setLoanStatusCode($loanStatusCode)
    {
        $this->container['loanStatusCode'] = $loanStatusCode;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName Borrower's username
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int|null $gender Borrower's Gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime|null $dateOfBirth Borrower's date of birth
     *
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets signedDate
     *
     * @return \DateTime|null
     */
    public function getSignedDate()
    {
        return $this->container['signedDate'];
    }

    /**
     * Sets signedDate
     *
     * @param \DateTime|null $signedDate Loan issued date
     *
     * @return $this
     */
    public function setSignedDate($signedDate)
    {
        $this->container['signedDate'] = $signedDate;

        return $this;
    }

    /**
     * Gets reScheduledOn
     *
     * @return \DateTime|null
     */
    public function getReScheduledOn()
    {
        return $this->container['reScheduledOn'];
    }

    /**
     * Sets reScheduledOn
     *
     * @param \DateTime|null $reScheduledOn Last rescheduling date
     *
     * @return $this
     */
    public function setReScheduledOn($reScheduledOn)
    {
        $this->container['reScheduledOn'] = $reScheduledOn;

        return $this;
    }

    /**
     * Gets debtOccuredOn
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOn()
    {
        return $this->container['debtOccuredOn'];
    }

    /**
     * Sets debtOccuredOn
     *
     * @param \DateTime|null $debtOccuredOn Debt occured on date
     *
     * @return $this
     */
    public function setDebtOccuredOn($debtOccuredOn)
    {
        $this->container['debtOccuredOn'] = $debtOccuredOn;

        return $this;
    }

    /**
     * Gets debtOccuredOnForSecondary
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOnForSecondary()
    {
        return $this->container['debtOccuredOnForSecondary'];
    }

    /**
     * Sets debtOccuredOnForSecondary
     *
     * @param \DateTime|null $debtOccuredOnForSecondary Debt occured on date
     *
     * @return $this
     */
    public function setDebtOccuredOnForSecondary($debtOccuredOnForSecondary)
    {
        $this->container['debtOccuredOnForSecondary'] = $debtOccuredOnForSecondary;

        return $this;
    }

    /**
     * Gets loanDuration
     *
     * @return int|null
     */
    public function getLoanDuration()
    {
        return $this->container['loanDuration'];
    }

    /**
     * Sets loanDuration
     *
     * @param int|null $loanDuration Loan original lenght
     *
     * @return $this
     */
    public function setLoanDuration($loanDuration)
    {
        $this->container['loanDuration'] = $loanDuration;

        return $this;
    }

    /**
     * Gets nextPaymentNr
     *
     * @return int|null
     */
    public function getNextPaymentNr()
    {
        return $this->container['nextPaymentNr'];
    }

    /**
     * Sets nextPaymentNr
     *
     * @param int|null $nextPaymentNr Next scheduled payment number
     *
     * @return $this
     */
    public function setNextPaymentNr($nextPaymentNr)
    {
        $this->container['nextPaymentNr'] = $nextPaymentNr;

        return $this;
    }

    /**
     * Gets nextPaymentDate
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDate()
    {
        return $this->container['nextPaymentDate'];
    }

    /**
     * Sets nextPaymentDate
     *
     * @param \DateTime|null $nextPaymentDate Next scheduled payment date
     *
     * @return $this
     */
    public function setNextPaymentDate($nextPaymentDate)
    {
        $this->container['nextPaymentDate'] = $nextPaymentDate;

        return $this;
    }

    /**
     * Gets nextPaymentSum
     *
     * @return double|null
     */
    public function getNextPaymentSum()
    {
        return $this->container['nextPaymentSum'];
    }

    /**
     * Sets nextPaymentSum
     *
     * @param double|null $nextPaymentSum Next scheduled payment amount
     *
     * @return $this
     */
    public function setNextPaymentSum($nextPaymentSum)
    {
        $this->container['nextPaymentSum'] = $nextPaymentSum;

        return $this;
    }

    /**
     * Gets nrOfScheduledPayments
     *
     * @return int|null
     */
    public function getNrOfScheduledPayments()
    {
        return $this->container['nrOfScheduledPayments'];
    }

    /**
     * Sets nrOfScheduledPayments
     *
     * @param int|null $nrOfScheduledPayments Total number of scheduled payments
     *
     * @return $this
     */
    public function setNrOfScheduledPayments($nrOfScheduledPayments)
    {
        $this->container['nrOfScheduledPayments'] = $nrOfScheduledPayments;

        return $this;
    }

    /**
     * Gets lastPaymentDate
     *
     * @return \DateTime|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['lastPaymentDate'];
    }

    /**
     * Sets lastPaymentDate
     *
     * @param \DateTime|null $lastPaymentDate Last scheduled payment date
     *
     * @return $this
     */
    public function setLastPaymentDate($lastPaymentDate)
    {
        $this->container['lastPaymentDate'] = $lastPaymentDate;

        return $this;
    }

    /**
     * Gets principalRepaid
     *
     * @return double|null
     */
    public function getPrincipalRepaid()
    {
        return $this->container['principalRepaid'];
    }

    /**
     * Sets principalRepaid
     *
     * @param double|null $principalRepaid Total principal repaid amount
     *
     * @return $this
     */
    public function setPrincipalRepaid($principalRepaid)
    {
        $this->container['principalRepaid'] = $principalRepaid;

        return $this;
    }

    /**
     * Gets interestRepaid
     *
     * @return double|null
     */
    public function getInterestRepaid()
    {
        return $this->container['interestRepaid'];
    }

    /**
     * Sets interestRepaid
     *
     * @param double|null $interestRepaid Total interest repaid amount
     *
     * @return $this
     */
    public function setInterestRepaid($interestRepaid)
    {
        $this->container['interestRepaid'] = $interestRepaid;

        return $this;
    }

    /**
     * Gets lateAmountPaid
     *
     * @return double|null
     */
    public function getLateAmountPaid()
    {
        return $this->container['lateAmountPaid'];
    }

    /**
     * Sets lateAmountPaid
     *
     * @param double|null $lateAmountPaid Total late charges paid amount
     *
     * @return $this
     */
    public function setLateAmountPaid($lateAmountPaid)
    {
        $this->container['lateAmountPaid'] = $lateAmountPaid;

        return $this;
    }

    /**
     * Gets principalRemaining
     *
     * @return double|null
     */
    public function getPrincipalRemaining()
    {
        return $this->container['principalRemaining'];
    }

    /**
     * Sets principalRemaining
     *
     * @param double|null $principalRemaining Remaining principal amount
     *
     * @return $this
     */
    public function setPrincipalRemaining($principalRemaining)
    {
        $this->container['principalRemaining'] = $principalRemaining;

        return $this;
    }

    /**
     * Gets principalLateAmount
     *
     * @return double|null
     */
    public function getPrincipalLateAmount()
    {
        return $this->container['principalLateAmount'];
    }

    /**
     * Sets principalLateAmount
     *
     * @param double|null $principalLateAmount Principal debt amount
     *
     * @return $this
     */
    public function setPrincipalLateAmount($principalLateAmount)
    {
        $this->container['principalLateAmount'] = $principalLateAmount;

        return $this;
    }

    /**
     * Gets interestLateAmount
     *
     * @return double|null
     */
    public function getInterestLateAmount()
    {
        return $this->container['interestLateAmount'];
    }

    /**
     * Sets interestLateAmount
     *
     * @param double|null $interestLateAmount Interest debt amount
     *
     * @return $this
     */
    public function setInterestLateAmount($interestLateAmount)
    {
        $this->container['interestLateAmount'] = $interestLateAmount;

        return $this;
    }

    /**
     * Gets penaltyLateAmount
     *
     * @return double|null
     */
    public function getPenaltyLateAmount()
    {
        return $this->container['penaltyLateAmount'];
    }

    /**
     * Sets penaltyLateAmount
     *
     * @param double|null $penaltyLateAmount Late charges debt amount
     *
     * @return $this
     */
    public function setPenaltyLateAmount($penaltyLateAmount)
    {
        $this->container['penaltyLateAmount'] = $penaltyLateAmount;

        return $this;
    }

    /**
     * Gets lateAmountTotal
     *
     * @return double|null
     */
    public function getLateAmountTotal()
    {
        return $this->container['lateAmountTotal'];
    }

    /**
     * Sets lateAmountTotal
     *
     * @param double|null $lateAmountTotal Late amount total
     *
     * @return $this
     */
    public function setLateAmountTotal($lateAmountTotal)
    {
        $this->container['lateAmountTotal'] = $lateAmountTotal;

        return $this;
    }

    /**
     * Gets principalWriteOffAmount
     *
     * @return double|null
     */
    public function getPrincipalWriteOffAmount()
    {
        return $this->container['principalWriteOffAmount'];
    }

    /**
     * Sets principalWriteOffAmount
     *
     * @param double|null $principalWriteOffAmount Total amount of principal written off
     *
     * @return $this
     */
    public function setPrincipalWriteOffAmount($principalWriteOffAmount)
    {
        $this->container['principalWriteOffAmount'] = $principalWriteOffAmount;

        return $this;
    }

    /**
     * Gets interestWriteOffAmount
     *
     * @return double|null
     */
    public function getInterestWriteOffAmount()
    {
        return $this->container['interestWriteOffAmount'];
    }

    /**
     * Sets interestWriteOffAmount
     *
     * @param double|null $interestWriteOffAmount Total amount of interest written off
     *
     * @return $this
     */
    public function setInterestWriteOffAmount($interestWriteOffAmount)
    {
        $this->container['interestWriteOffAmount'] = $interestWriteOffAmount;

        return $this;
    }

    /**
     * Gets penaltyWriteOffAmount
     *
     * @return double|null
     */
    public function getPenaltyWriteOffAmount()
    {
        return $this->container['penaltyWriteOffAmount'];
    }

    /**
     * Sets penaltyWriteOffAmount
     *
     * @param double|null $penaltyWriteOffAmount Total amount of penalty written off
     *
     * @return $this
     */
    public function setPenaltyWriteOffAmount($penaltyWriteOffAmount)
    {
        $this->container['penaltyWriteOffAmount'] = $penaltyWriteOffAmount;

        return $this;
    }

    /**
     * Gets writeOffTotal
     *
     * @return double|null
     */
    public function getWriteOffTotal()
    {
        return $this->container['writeOffTotal'];
    }

    /**
     * Sets writeOffTotal
     *
     * @param double|null $writeOffTotal Write off total
     *
     * @return $this
     */
    public function setWriteOffTotal($writeOffTotal)
    {
        $this->container['writeOffTotal'] = $writeOffTotal;

        return $this;
    }

    /**
     * Gets debtServicingCostMainAmount
     *
     * @return double|null
     */
    public function getDebtServicingCostMainAmount()
    {
        return $this->container['debtServicingCostMainAmount'];
    }

    /**
     * Sets debtServicingCostMainAmount
     *
     * @param double|null $debtServicingCostMainAmount Total amount of principal debt servicing cost
     *
     * @return $this
     */
    public function setDebtServicingCostMainAmount($debtServicingCostMainAmount)
    {
        $this->container['debtServicingCostMainAmount'] = $debtServicingCostMainAmount;

        return $this;
    }

    /**
     * Gets debtServicingCostInterestAmount
     *
     * @return double|null
     */
    public function getDebtServicingCostInterestAmount()
    {
        return $this->container['debtServicingCostInterestAmount'];
    }

    /**
     * Sets debtServicingCostInterestAmount
     *
     * @param double|null $debtServicingCostInterestAmount Total amount of interest debt servicing cost
     *
     * @return $this
     */
    public function setDebtServicingCostInterestAmount($debtServicingCostInterestAmount)
    {
        $this->container['debtServicingCostInterestAmount'] = $debtServicingCostInterestAmount;

        return $this;
    }

    /**
     * Gets debtServicingCostPenaltyAmount
     *
     * @return double|null
     */
    public function getDebtServicingCostPenaltyAmount()
    {
        return $this->container['debtServicingCostPenaltyAmount'];
    }

    /**
     * Sets debtServicingCostPenaltyAmount
     *
     * @param double|null $debtServicingCostPenaltyAmount Total amount of penalty debt servicing cost
     *
     * @return $this
     */
    public function setDebtServicingCostPenaltyAmount($debtServicingCostPenaltyAmount)
    {
        $this->container['debtServicingCostPenaltyAmount'] = $debtServicingCostPenaltyAmount;

        return $this;
    }

    /**
     * Gets debtServicingCostTotal
     *
     * @return double|null
     */
    public function getDebtServicingCostTotal()
    {
        return $this->container['debtServicingCostTotal'];
    }

    /**
     * Sets debtServicingCostTotal
     *
     * @param double|null $debtServicingCostTotal Debt servicing cost total
     *
     * @return $this
     */
    public function setDebtServicingCostTotal($debtServicingCostTotal)
    {
        $this->container['debtServicingCostTotal'] = $debtServicingCostTotal;

        return $this;
    }

    /**
     * Gets repaidPrincipalCurrentOwner
     *
     * @return double|null
     */
    public function getRepaidPrincipalCurrentOwner()
    {
        return $this->container['repaidPrincipalCurrentOwner'];
    }

    /**
     * Sets repaidPrincipalCurrentOwner
     *
     * @param double|null $repaidPrincipalCurrentOwner Total principal repaid amount to current note owner
     *
     * @return $this
     */
    public function setRepaidPrincipalCurrentOwner($repaidPrincipalCurrentOwner)
    {
        $this->container['repaidPrincipalCurrentOwner'] = $repaidPrincipalCurrentOwner;

        return $this;
    }

    /**
     * Gets repaidInterestsCurrentOwner
     *
     * @return double|null
     */
    public function getRepaidInterestsCurrentOwner()
    {
        return $this->container['repaidInterestsCurrentOwner'];
    }

    /**
     * Sets repaidInterestsCurrentOwner
     *
     * @param double|null $repaidInterestsCurrentOwner Total interest repaid amount to current note owner
     *
     * @return $this
     */
    public function setRepaidInterestsCurrentOwner($repaidInterestsCurrentOwner)
    {
        $this->container['repaidInterestsCurrentOwner'] = $repaidInterestsCurrentOwner;

        return $this;
    }

    /**
     * Gets lateChargesPaidCurrentOwner
     *
     * @return double|null
     */
    public function getLateChargesPaidCurrentOwner()
    {
        return $this->container['lateChargesPaidCurrentOwner'];
    }

    /**
     * Sets lateChargesPaidCurrentOwner
     *
     * @param double|null $lateChargesPaidCurrentOwner Late charges paid amount to current note owner
     *
     * @return $this
     */
    public function setLateChargesPaidCurrentOwner($lateChargesPaidCurrentOwner)
    {
        $this->container['lateChargesPaidCurrentOwner'] = $lateChargesPaidCurrentOwner;

        return $this;
    }

    /**
     * Gets repaidTotalCurrentOwner
     *
     * @return double|null
     */
    public function getRepaidTotalCurrentOwner()
    {
        return $this->container['repaidTotalCurrentOwner'];
    }

    /**
     * Sets repaidTotalCurrentOwner
     *
     * @param double|null $repaidTotalCurrentOwner Total repaid amount to current note owner
     *
     * @return $this
     */
    public function setRepaidTotalCurrentOwner($repaidTotalCurrentOwner)
    {
        $this->container['repaidTotalCurrentOwner'] = $repaidTotalCurrentOwner;

        return $this;
    }

    /**
     * Gets totalRepaid
     *
     * @return double|null
     */
    public function getTotalRepaid()
    {
        return $this->container['totalRepaid'];
    }

    /**
     * Sets totalRepaid
     *
     * @param double|null $totalRepaid Total repaid amount
     *
     * @return $this
     */
    public function setTotalRepaid($totalRepaid)
    {
        $this->container['totalRepaid'] = $totalRepaid;

        return $this;
    }

    /**
     * Gets debtManagmentEvents
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\DebtManagementEvent[]|null
     */
    public function getDebtManagmentEvents()
    {
        return $this->container['debtManagmentEvents'];
    }

    /**
     * Sets debtManagmentEvents
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\DebtManagementEvent[]|null $debtManagmentEvents Debt managment event collection
     *
     * @return $this
     */
    public function setDebtManagmentEvents($debtManagmentEvents)
    {
        $this->container['debtManagmentEvents'] = $debtManagmentEvents;

        return $this;
    }

    /**
     * Gets loanTransfers
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\LoanTransfer[]|null
     */
    public function getLoanTransfers()
    {
        return $this->container['loanTransfers'];
    }

    /**
     * Sets loanTransfers
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\LoanTransfer[]|null $loanTransfers Collection of all loan payments
     *
     * @return $this
     */
    public function setLoanTransfers($loanTransfers)
    {
        $this->container['loanTransfers'] = $loanTransfers;

        return $this;
    }

    /**
     * Gets scheduledPayments
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ScheduledPayment[]|null
     */
    public function getScheduledPayments()
    {
        return $this->container['scheduledPayments'];
    }

    /**
     * Sets scheduledPayments
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\ScheduledPayment[]|null $scheduledPayments Collection of all loan scheduled payments.               Contains previous period values before rescheduling was made
     *
     * @return $this
     */
    public function setScheduledPayments($scheduledPayments)
    {
        $this->container['scheduledPayments'] = $scheduledPayments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


