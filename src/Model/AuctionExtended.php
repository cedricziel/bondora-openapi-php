<?php
/**
 * AuctionExtended
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * AuctionExtended Class Doc Comment
 *
 * @category Class
 * @description Auction related data with debts and liabilities
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuctionExtended implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuctionExtended';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'liabilities' => '\CedricZiel\OpenAPI\BondoraPHP\Model\Liability[]',
        'debts' => '\CedricZiel\OpenAPI\BondoraPHP\Model\Debt[]',
        'borrowerHistory' => '\CedricZiel\OpenAPI\BondoraPHP\Model\BorrowerHistory',
        'loanId' => 'string',
        'auctionId' => 'string',
        'loanNumber' => 'int',
        'userName' => 'string',
        'newCreditCustomer' => 'int',
        'loanApplicationStartedDate' => '\DateTime',
        'plannedCloseDate' => '\DateTime',
        'applicationSignedHour' => 'int',
        'applicationSignedWeekday' => 'int',
        'verificationType' => 'int',
        'languageCode' => 'int',
        'age' => 'int',
        'dateOfBirth' => '\DateTime',
        'gender' => 'int',
        'country' => 'string',
        'creditScoreEsMicroL' => 'string',
        'creditScoreEsEquifaxRisk' => 'string',
        'creditScoreFiAsiakasTietoRiskGrade' => 'string',
        'creditScoreEeMini' => 'string',
        'appliedAmount' => 'double',
        'interest' => 'double',
        'loanDuration' => 'int',
        'county' => 'string',
        'city' => 'string',
        'education' => 'int',
        'employmentDurationCurrentEmployer' => 'string',
        'homeOwnershipType' => 'int',
        'incomeTotal' => 'double',
        'monthlyPayment' => 'double',
        'monthlyPaymentDay' => 'int',
        'modelVersion' => 'int',
        'expectedLoss' => 'double',
        'rating' => 'string',
        'lossGivenDefault' => 'double',
        'probabilityOfDefault' => 'double',
        'expectedReturnAlpha' => 'double',
        'liabilitiesTotal' => 'double',
        'listedOnUTC' => '\DateTime',
        'actualCloseDate' => '\DateTime',
        'winningBidsAmount' => 'double',
        'remainingAmount' => 'double',
        'userBids' => 'int',
        'userBidAmount' => 'double',
        'fullfilled' => 'double',
        'creditScore' => 'int',
        'scoringDate' => '\DateTime',
        'useOfLoan' => 'int',
        'maritalStatus' => 'int',
        'nrOfDependants' => 'string',
        'employmentStatus' => 'int',
        'employmentPosition' => 'string',
        'workExperience' => 'string',
        'occupationArea' => 'int',
        'incomeFromPrincipalEmployer' => 'double',
        'incomeFromPension' => 'double',
        'incomeFromFamilyAllowance' => 'double',
        'incomeFromSocialWelfare' => 'double',
        'incomeFromLeavePay' => 'double',
        'incomeFromChildSupport' => 'double',
        'incomeOther' => 'double',
        'freeCash' => 'double',
        'debtToIncome' => 'double',
        'eADRate' => 'double',
        'maturityFactor' => 'double',
        'interestRateAlpha' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'liabilities' => null,
        'debts' => null,
        'borrowerHistory' => null,
        'loanId' => null,
        'auctionId' => null,
        'loanNumber' => 'int32',
        'userName' => null,
        'newCreditCustomer' => 'int32',
        'loanApplicationStartedDate' => 'date-time',
        'plannedCloseDate' => 'date-time',
        'applicationSignedHour' => 'int32',
        'applicationSignedWeekday' => 'int32',
        'verificationType' => 'int32',
        'languageCode' => 'int32',
        'age' => 'int32',
        'dateOfBirth' => 'date-time',
        'gender' => 'int32',
        'country' => null,
        'creditScoreEsMicroL' => null,
        'creditScoreEsEquifaxRisk' => null,
        'creditScoreFiAsiakasTietoRiskGrade' => null,
        'creditScoreEeMini' => null,
        'appliedAmount' => 'double',
        'interest' => 'double',
        'loanDuration' => 'int32',
        'county' => null,
        'city' => null,
        'education' => 'int32',
        'employmentDurationCurrentEmployer' => null,
        'homeOwnershipType' => 'int32',
        'incomeTotal' => 'double',
        'monthlyPayment' => 'double',
        'monthlyPaymentDay' => 'int32',
        'modelVersion' => 'int32',
        'expectedLoss' => 'double',
        'rating' => null,
        'lossGivenDefault' => 'double',
        'probabilityOfDefault' => 'double',
        'expectedReturnAlpha' => 'double',
        'liabilitiesTotal' => 'double',
        'listedOnUTC' => 'date-time',
        'actualCloseDate' => 'date-time',
        'winningBidsAmount' => 'double',
        'remainingAmount' => 'double',
        'userBids' => 'int32',
        'userBidAmount' => 'double',
        'fullfilled' => 'double',
        'creditScore' => 'int32',
        'scoringDate' => 'date-time',
        'useOfLoan' => 'int32',
        'maritalStatus' => 'int32',
        'nrOfDependants' => null,
        'employmentStatus' => 'int32',
        'employmentPosition' => null,
        'workExperience' => null,
        'occupationArea' => 'int32',
        'incomeFromPrincipalEmployer' => 'double',
        'incomeFromPension' => 'double',
        'incomeFromFamilyAllowance' => 'double',
        'incomeFromSocialWelfare' => 'double',
        'incomeFromLeavePay' => 'double',
        'incomeFromChildSupport' => 'double',
        'incomeOther' => 'double',
        'freeCash' => 'double',
        'debtToIncome' => 'double',
        'eADRate' => 'double',
        'maturityFactor' => 'double',
        'interestRateAlpha' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'liabilities' => 'Liabilities',
        'debts' => 'Debts',
        'borrowerHistory' => 'BorrowerHistory',
        'loanId' => 'LoanId',
        'auctionId' => 'AuctionId',
        'loanNumber' => 'LoanNumber',
        'userName' => 'UserName',
        'newCreditCustomer' => 'NewCreditCustomer',
        'loanApplicationStartedDate' => 'LoanApplicationStartedDate',
        'plannedCloseDate' => 'PlannedCloseDate',
        'applicationSignedHour' => 'ApplicationSignedHour',
        'applicationSignedWeekday' => 'ApplicationSignedWeekday',
        'verificationType' => 'VerificationType',
        'languageCode' => 'LanguageCode',
        'age' => 'Age',
        'dateOfBirth' => 'DateOfBirth',
        'gender' => 'Gender',
        'country' => 'Country',
        'creditScoreEsMicroL' => 'CreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'CreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'CreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'CreditScoreEeMini',
        'appliedAmount' => 'AppliedAmount',
        'interest' => 'Interest',
        'loanDuration' => 'LoanDuration',
        'county' => 'County',
        'city' => 'City',
        'education' => 'Education',
        'employmentDurationCurrentEmployer' => 'EmploymentDurationCurrentEmployer',
        'homeOwnershipType' => 'HomeOwnershipType',
        'incomeTotal' => 'IncomeTotal',
        'monthlyPayment' => 'MonthlyPayment',
        'monthlyPaymentDay' => 'MonthlyPaymentDay',
        'modelVersion' => 'ModelVersion',
        'expectedLoss' => 'ExpectedLoss',
        'rating' => 'Rating',
        'lossGivenDefault' => 'LossGivenDefault',
        'probabilityOfDefault' => 'ProbabilityOfDefault',
        'expectedReturnAlpha' => 'ExpectedReturnAlpha',
        'liabilitiesTotal' => 'LiabilitiesTotal',
        'listedOnUTC' => 'ListedOnUTC',
        'actualCloseDate' => 'ActualCloseDate',
        'winningBidsAmount' => 'WinningBidsAmount',
        'remainingAmount' => 'RemainingAmount',
        'userBids' => 'UserBids',
        'userBidAmount' => 'UserBidAmount',
        'fullfilled' => 'Fullfilled',
        'creditScore' => 'CreditScore',
        'scoringDate' => 'ScoringDate',
        'useOfLoan' => 'UseOfLoan',
        'maritalStatus' => 'MaritalStatus',
        'nrOfDependants' => 'NrOfDependants',
        'employmentStatus' => 'EmploymentStatus',
        'employmentPosition' => 'EmploymentPosition',
        'workExperience' => 'WorkExperience',
        'occupationArea' => 'OccupationArea',
        'incomeFromPrincipalEmployer' => 'IncomeFromPrincipalEmployer',
        'incomeFromPension' => 'IncomeFromPension',
        'incomeFromFamilyAllowance' => 'IncomeFromFamilyAllowance',
        'incomeFromSocialWelfare' => 'IncomeFromSocialWelfare',
        'incomeFromLeavePay' => 'IncomeFromLeavePay',
        'incomeFromChildSupport' => 'IncomeFromChildSupport',
        'incomeOther' => 'IncomeOther',
        'freeCash' => 'FreeCash',
        'debtToIncome' => 'DebtToIncome',
        'eADRate' => 'EADRate',
        'maturityFactor' => 'MaturityFactor',
        'interestRateAlpha' => 'InterestRateAlpha'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'liabilities' => 'setLiabilities',
        'debts' => 'setDebts',
        'borrowerHistory' => 'setBorrowerHistory',
        'loanId' => 'setLoanId',
        'auctionId' => 'setAuctionId',
        'loanNumber' => 'setLoanNumber',
        'userName' => 'setUserName',
        'newCreditCustomer' => 'setNewCreditCustomer',
        'loanApplicationStartedDate' => 'setLoanApplicationStartedDate',
        'plannedCloseDate' => 'setPlannedCloseDate',
        'applicationSignedHour' => 'setApplicationSignedHour',
        'applicationSignedWeekday' => 'setApplicationSignedWeekday',
        'verificationType' => 'setVerificationType',
        'languageCode' => 'setLanguageCode',
        'age' => 'setAge',
        'dateOfBirth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'country' => 'setCountry',
        'creditScoreEsMicroL' => 'setCreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'setCreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'setCreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'setCreditScoreEeMini',
        'appliedAmount' => 'setAppliedAmount',
        'interest' => 'setInterest',
        'loanDuration' => 'setLoanDuration',
        'county' => 'setCounty',
        'city' => 'setCity',
        'education' => 'setEducation',
        'employmentDurationCurrentEmployer' => 'setEmploymentDurationCurrentEmployer',
        'homeOwnershipType' => 'setHomeOwnershipType',
        'incomeTotal' => 'setIncomeTotal',
        'monthlyPayment' => 'setMonthlyPayment',
        'monthlyPaymentDay' => 'setMonthlyPaymentDay',
        'modelVersion' => 'setModelVersion',
        'expectedLoss' => 'setExpectedLoss',
        'rating' => 'setRating',
        'lossGivenDefault' => 'setLossGivenDefault',
        'probabilityOfDefault' => 'setProbabilityOfDefault',
        'expectedReturnAlpha' => 'setExpectedReturnAlpha',
        'liabilitiesTotal' => 'setLiabilitiesTotal',
        'listedOnUTC' => 'setListedOnUTC',
        'actualCloseDate' => 'setActualCloseDate',
        'winningBidsAmount' => 'setWinningBidsAmount',
        'remainingAmount' => 'setRemainingAmount',
        'userBids' => 'setUserBids',
        'userBidAmount' => 'setUserBidAmount',
        'fullfilled' => 'setFullfilled',
        'creditScore' => 'setCreditScore',
        'scoringDate' => 'setScoringDate',
        'useOfLoan' => 'setUseOfLoan',
        'maritalStatus' => 'setMaritalStatus',
        'nrOfDependants' => 'setNrOfDependants',
        'employmentStatus' => 'setEmploymentStatus',
        'employmentPosition' => 'setEmploymentPosition',
        'workExperience' => 'setWorkExperience',
        'occupationArea' => 'setOccupationArea',
        'incomeFromPrincipalEmployer' => 'setIncomeFromPrincipalEmployer',
        'incomeFromPension' => 'setIncomeFromPension',
        'incomeFromFamilyAllowance' => 'setIncomeFromFamilyAllowance',
        'incomeFromSocialWelfare' => 'setIncomeFromSocialWelfare',
        'incomeFromLeavePay' => 'setIncomeFromLeavePay',
        'incomeFromChildSupport' => 'setIncomeFromChildSupport',
        'incomeOther' => 'setIncomeOther',
        'freeCash' => 'setFreeCash',
        'debtToIncome' => 'setDebtToIncome',
        'eADRate' => 'setEADRate',
        'maturityFactor' => 'setMaturityFactor',
        'interestRateAlpha' => 'setInterestRateAlpha'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'liabilities' => 'getLiabilities',
        'debts' => 'getDebts',
        'borrowerHistory' => 'getBorrowerHistory',
        'loanId' => 'getLoanId',
        'auctionId' => 'getAuctionId',
        'loanNumber' => 'getLoanNumber',
        'userName' => 'getUserName',
        'newCreditCustomer' => 'getNewCreditCustomer',
        'loanApplicationStartedDate' => 'getLoanApplicationStartedDate',
        'plannedCloseDate' => 'getPlannedCloseDate',
        'applicationSignedHour' => 'getApplicationSignedHour',
        'applicationSignedWeekday' => 'getApplicationSignedWeekday',
        'verificationType' => 'getVerificationType',
        'languageCode' => 'getLanguageCode',
        'age' => 'getAge',
        'dateOfBirth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'country' => 'getCountry',
        'creditScoreEsMicroL' => 'getCreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'getCreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'getCreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'getCreditScoreEeMini',
        'appliedAmount' => 'getAppliedAmount',
        'interest' => 'getInterest',
        'loanDuration' => 'getLoanDuration',
        'county' => 'getCounty',
        'city' => 'getCity',
        'education' => 'getEducation',
        'employmentDurationCurrentEmployer' => 'getEmploymentDurationCurrentEmployer',
        'homeOwnershipType' => 'getHomeOwnershipType',
        'incomeTotal' => 'getIncomeTotal',
        'monthlyPayment' => 'getMonthlyPayment',
        'monthlyPaymentDay' => 'getMonthlyPaymentDay',
        'modelVersion' => 'getModelVersion',
        'expectedLoss' => 'getExpectedLoss',
        'rating' => 'getRating',
        'lossGivenDefault' => 'getLossGivenDefault',
        'probabilityOfDefault' => 'getProbabilityOfDefault',
        'expectedReturnAlpha' => 'getExpectedReturnAlpha',
        'liabilitiesTotal' => 'getLiabilitiesTotal',
        'listedOnUTC' => 'getListedOnUTC',
        'actualCloseDate' => 'getActualCloseDate',
        'winningBidsAmount' => 'getWinningBidsAmount',
        'remainingAmount' => 'getRemainingAmount',
        'userBids' => 'getUserBids',
        'userBidAmount' => 'getUserBidAmount',
        'fullfilled' => 'getFullfilled',
        'creditScore' => 'getCreditScore',
        'scoringDate' => 'getScoringDate',
        'useOfLoan' => 'getUseOfLoan',
        'maritalStatus' => 'getMaritalStatus',
        'nrOfDependants' => 'getNrOfDependants',
        'employmentStatus' => 'getEmploymentStatus',
        'employmentPosition' => 'getEmploymentPosition',
        'workExperience' => 'getWorkExperience',
        'occupationArea' => 'getOccupationArea',
        'incomeFromPrincipalEmployer' => 'getIncomeFromPrincipalEmployer',
        'incomeFromPension' => 'getIncomeFromPension',
        'incomeFromFamilyAllowance' => 'getIncomeFromFamilyAllowance',
        'incomeFromSocialWelfare' => 'getIncomeFromSocialWelfare',
        'incomeFromLeavePay' => 'getIncomeFromLeavePay',
        'incomeFromChildSupport' => 'getIncomeFromChildSupport',
        'incomeOther' => 'getIncomeOther',
        'freeCash' => 'getFreeCash',
        'debtToIncome' => 'getDebtToIncome',
        'eADRate' => 'getEADRate',
        'maturityFactor' => 'getMaturityFactor',
        'interestRateAlpha' => 'getInterestRateAlpha'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VERIFICATION_TYPE_1 = 1;
    const VERIFICATION_TYPE_2 = 2;
    const VERIFICATION_TYPE_3 = 3;
    const VERIFICATION_TYPE_4 = 4;
    const LANGUAGE_CODE_1 = 1;
    const LANGUAGE_CODE_2 = 2;
    const LANGUAGE_CODE_3 = 3;
    const LANGUAGE_CODE_4 = 4;
    const LANGUAGE_CODE_5 = 5;
    const LANGUAGE_CODE_6 = 6;
    const LANGUAGE_CODE_7 = 7;
    const LANGUAGE_CODE_8 = 8;
    const LANGUAGE_CODE_9 = 9;
    const LANGUAGE_CODE_10 = 10;
    const LANGUAGE_CODE_11 = 11;
    const LANGUAGE_CODE_12 = 12;
    const LANGUAGE_CODE_13 = 13;
    const LANGUAGE_CODE_14 = 14;
    const LANGUAGE_CODE_15 = 15;
    const LANGUAGE_CODE_16 = 16;
    const LANGUAGE_CODE_17 = 17;
    const LANGUAGE_CODE_18 = 18;
    const LANGUAGE_CODE_19 = 19;
    const LANGUAGE_CODE_20 = 20;
    const LANGUAGE_CODE_21 = 21;
    const LANGUAGE_CODE_22 = 22;
    const LANGUAGE_CODE_23 = 23;
    const LANGUAGE_CODE_24 = 24;
    const LANGUAGE_CODE_25 = 25;
    const LANGUAGE_CODE_26 = 26;
    const GENDER_0 = 0;
    const GENDER_1 = 1;
    const GENDER_2 = 2;
    const EDUCATION_1 = 1;
    const EDUCATION_2 = 2;
    const EDUCATION_3 = 3;
    const EDUCATION_4 = 4;
    const EDUCATION_5 = 5;
    const EDUCATION_MINUS_1 = -1;
    const HOME_OWNERSHIP_TYPE_0 = 0;
    const HOME_OWNERSHIP_TYPE_1 = 1;
    const HOME_OWNERSHIP_TYPE_2 = 2;
    const HOME_OWNERSHIP_TYPE_3 = 3;
    const HOME_OWNERSHIP_TYPE_4 = 4;
    const HOME_OWNERSHIP_TYPE_5 = 5;
    const HOME_OWNERSHIP_TYPE_6 = 6;
    const HOME_OWNERSHIP_TYPE_7 = 7;
    const HOME_OWNERSHIP_TYPE_8 = 8;
    const HOME_OWNERSHIP_TYPE_9 = 9;
    const HOME_OWNERSHIP_TYPE_10 = 10;
    const HOME_OWNERSHIP_TYPE_MINUS_1 = -1;
    const USE_OF_LOAN_0 = 0;
    const USE_OF_LOAN_1 = 1;
    const USE_OF_LOAN_2 = 2;
    const USE_OF_LOAN_3 = 3;
    const USE_OF_LOAN_4 = 4;
    const USE_OF_LOAN_5 = 5;
    const USE_OF_LOAN_6 = 6;
    const USE_OF_LOAN_7 = 7;
    const USE_OF_LOAN_8 = 8;
    const USE_OF_LOAN_101 = 101;
    const USE_OF_LOAN_102 = 102;
    const USE_OF_LOAN_103 = 103;
    const USE_OF_LOAN_104 = 104;
    const USE_OF_LOAN_105 = 105;
    const USE_OF_LOAN_106 = 106;
    const USE_OF_LOAN_107 = 107;
    const USE_OF_LOAN_108 = 108;
    const USE_OF_LOAN_109 = 109;
    const USE_OF_LOAN_110 = 110;
    const USE_OF_LOAN_201 = 201;
    const USE_OF_LOAN_202 = 202;
    const USE_OF_LOAN_203 = 203;
    const USE_OF_LOAN_204 = 204;
    const USE_OF_LOAN_205 = 205;
    const USE_OF_LOAN_206 = 206;
    const USE_OF_LOAN_207 = 207;
    const USE_OF_LOAN_208 = 208;
    const USE_OF_LOAN_209 = 209;
    const USE_OF_LOAN_210 = 210;
    const USE_OF_LOAN_211 = 211;
    const USE_OF_LOAN_MINUS_1 = -1;
    const MARITAL_STATUS_1 = 1;
    const MARITAL_STATUS_2 = 2;
    const MARITAL_STATUS_3 = 3;
    const MARITAL_STATUS_4 = 4;
    const MARITAL_STATUS_5 = 5;
    const MARITAL_STATUS_MINUS_1 = -1;
    const EMPLOYMENT_STATUS_1 = 1;
    const EMPLOYMENT_STATUS_2 = 2;
    const EMPLOYMENT_STATUS_3 = 3;
    const EMPLOYMENT_STATUS_4 = 4;
    const EMPLOYMENT_STATUS_5 = 5;
    const EMPLOYMENT_STATUS_6 = 6;
    const EMPLOYMENT_STATUS_MINUS_1 = -1;
    const OCCUPATION_AREA_1 = 1;
    const OCCUPATION_AREA_2 = 2;
    const OCCUPATION_AREA_3 = 3;
    const OCCUPATION_AREA_4 = 4;
    const OCCUPATION_AREA_5 = 5;
    const OCCUPATION_AREA_6 = 6;
    const OCCUPATION_AREA_7 = 7;
    const OCCUPATION_AREA_8 = 8;
    const OCCUPATION_AREA_9 = 9;
    const OCCUPATION_AREA_10 = 10;
    const OCCUPATION_AREA_11 = 11;
    const OCCUPATION_AREA_12 = 12;
    const OCCUPATION_AREA_13 = 13;
    const OCCUPATION_AREA_14 = 14;
    const OCCUPATION_AREA_15 = 15;
    const OCCUPATION_AREA_16 = 16;
    const OCCUPATION_AREA_17 = 17;
    const OCCUPATION_AREA_18 = 18;
    const OCCUPATION_AREA_19 = 19;
    const OCCUPATION_AREA_MINUS_1 = -1;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerificationTypeAllowableValues()
    {
        return [
            self::VERIFICATION_TYPE_1,
            self::VERIFICATION_TYPE_2,
            self::VERIFICATION_TYPE_3,
            self::VERIFICATION_TYPE_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageCodeAllowableValues()
    {
        return [
            self::LANGUAGE_CODE_1,
            self::LANGUAGE_CODE_2,
            self::LANGUAGE_CODE_3,
            self::LANGUAGE_CODE_4,
            self::LANGUAGE_CODE_5,
            self::LANGUAGE_CODE_6,
            self::LANGUAGE_CODE_7,
            self::LANGUAGE_CODE_8,
            self::LANGUAGE_CODE_9,
            self::LANGUAGE_CODE_10,
            self::LANGUAGE_CODE_11,
            self::LANGUAGE_CODE_12,
            self::LANGUAGE_CODE_13,
            self::LANGUAGE_CODE_14,
            self::LANGUAGE_CODE_15,
            self::LANGUAGE_CODE_16,
            self::LANGUAGE_CODE_17,
            self::LANGUAGE_CODE_18,
            self::LANGUAGE_CODE_19,
            self::LANGUAGE_CODE_20,
            self::LANGUAGE_CODE_21,
            self::LANGUAGE_CODE_22,
            self::LANGUAGE_CODE_23,
            self::LANGUAGE_CODE_24,
            self::LANGUAGE_CODE_25,
            self::LANGUAGE_CODE_26,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_0,
            self::GENDER_1,
            self::GENDER_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEducationAllowableValues()
    {
        return [
            self::EDUCATION_1,
            self::EDUCATION_2,
            self::EDUCATION_3,
            self::EDUCATION_4,
            self::EDUCATION_5,
            self::EDUCATION_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHomeOwnershipTypeAllowableValues()
    {
        return [
            self::HOME_OWNERSHIP_TYPE_0,
            self::HOME_OWNERSHIP_TYPE_1,
            self::HOME_OWNERSHIP_TYPE_2,
            self::HOME_OWNERSHIP_TYPE_3,
            self::HOME_OWNERSHIP_TYPE_4,
            self::HOME_OWNERSHIP_TYPE_5,
            self::HOME_OWNERSHIP_TYPE_6,
            self::HOME_OWNERSHIP_TYPE_7,
            self::HOME_OWNERSHIP_TYPE_8,
            self::HOME_OWNERSHIP_TYPE_9,
            self::HOME_OWNERSHIP_TYPE_10,
            self::HOME_OWNERSHIP_TYPE_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseOfLoanAllowableValues()
    {
        return [
            self::USE_OF_LOAN_0,
            self::USE_OF_LOAN_1,
            self::USE_OF_LOAN_2,
            self::USE_OF_LOAN_3,
            self::USE_OF_LOAN_4,
            self::USE_OF_LOAN_5,
            self::USE_OF_LOAN_6,
            self::USE_OF_LOAN_7,
            self::USE_OF_LOAN_8,
            self::USE_OF_LOAN_101,
            self::USE_OF_LOAN_102,
            self::USE_OF_LOAN_103,
            self::USE_OF_LOAN_104,
            self::USE_OF_LOAN_105,
            self::USE_OF_LOAN_106,
            self::USE_OF_LOAN_107,
            self::USE_OF_LOAN_108,
            self::USE_OF_LOAN_109,
            self::USE_OF_LOAN_110,
            self::USE_OF_LOAN_201,
            self::USE_OF_LOAN_202,
            self::USE_OF_LOAN_203,
            self::USE_OF_LOAN_204,
            self::USE_OF_LOAN_205,
            self::USE_OF_LOAN_206,
            self::USE_OF_LOAN_207,
            self::USE_OF_LOAN_208,
            self::USE_OF_LOAN_209,
            self::USE_OF_LOAN_210,
            self::USE_OF_LOAN_211,
            self::USE_OF_LOAN_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaritalStatusAllowableValues()
    {
        return [
            self::MARITAL_STATUS_1,
            self::MARITAL_STATUS_2,
            self::MARITAL_STATUS_3,
            self::MARITAL_STATUS_4,
            self::MARITAL_STATUS_5,
            self::MARITAL_STATUS_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentStatusAllowableValues()
    {
        return [
            self::EMPLOYMENT_STATUS_1,
            self::EMPLOYMENT_STATUS_2,
            self::EMPLOYMENT_STATUS_3,
            self::EMPLOYMENT_STATUS_4,
            self::EMPLOYMENT_STATUS_5,
            self::EMPLOYMENT_STATUS_6,
            self::EMPLOYMENT_STATUS_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOccupationAreaAllowableValues()
    {
        return [
            self::OCCUPATION_AREA_1,
            self::OCCUPATION_AREA_2,
            self::OCCUPATION_AREA_3,
            self::OCCUPATION_AREA_4,
            self::OCCUPATION_AREA_5,
            self::OCCUPATION_AREA_6,
            self::OCCUPATION_AREA_7,
            self::OCCUPATION_AREA_8,
            self::OCCUPATION_AREA_9,
            self::OCCUPATION_AREA_10,
            self::OCCUPATION_AREA_11,
            self::OCCUPATION_AREA_12,
            self::OCCUPATION_AREA_13,
            self::OCCUPATION_AREA_14,
            self::OCCUPATION_AREA_15,
            self::OCCUPATION_AREA_16,
            self::OCCUPATION_AREA_17,
            self::OCCUPATION_AREA_18,
            self::OCCUPATION_AREA_19,
            self::OCCUPATION_AREA_MINUS_1,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['liabilities'] = isset($data['liabilities']) ? $data['liabilities'] : null;
        $this->container['debts'] = isset($data['debts']) ? $data['debts'] : null;
        $this->container['borrowerHistory'] = isset($data['borrowerHistory']) ? $data['borrowerHistory'] : null;
        $this->container['loanId'] = isset($data['loanId']) ? $data['loanId'] : null;
        $this->container['auctionId'] = isset($data['auctionId']) ? $data['auctionId'] : null;
        $this->container['loanNumber'] = isset($data['loanNumber']) ? $data['loanNumber'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['newCreditCustomer'] = isset($data['newCreditCustomer']) ? $data['newCreditCustomer'] : null;
        $this->container['loanApplicationStartedDate'] = isset($data['loanApplicationStartedDate']) ? $data['loanApplicationStartedDate'] : null;
        $this->container['plannedCloseDate'] = isset($data['plannedCloseDate']) ? $data['plannedCloseDate'] : null;
        $this->container['applicationSignedHour'] = isset($data['applicationSignedHour']) ? $data['applicationSignedHour'] : null;
        $this->container['applicationSignedWeekday'] = isset($data['applicationSignedWeekday']) ? $data['applicationSignedWeekday'] : null;
        $this->container['verificationType'] = isset($data['verificationType']) ? $data['verificationType'] : null;
        $this->container['languageCode'] = isset($data['languageCode']) ? $data['languageCode'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['creditScoreEsMicroL'] = isset($data['creditScoreEsMicroL']) ? $data['creditScoreEsMicroL'] : null;
        $this->container['creditScoreEsEquifaxRisk'] = isset($data['creditScoreEsEquifaxRisk']) ? $data['creditScoreEsEquifaxRisk'] : null;
        $this->container['creditScoreFiAsiakasTietoRiskGrade'] = isset($data['creditScoreFiAsiakasTietoRiskGrade']) ? $data['creditScoreFiAsiakasTietoRiskGrade'] : null;
        $this->container['creditScoreEeMini'] = isset($data['creditScoreEeMini']) ? $data['creditScoreEeMini'] : null;
        $this->container['appliedAmount'] = isset($data['appliedAmount']) ? $data['appliedAmount'] : null;
        $this->container['interest'] = isset($data['interest']) ? $data['interest'] : null;
        $this->container['loanDuration'] = isset($data['loanDuration']) ? $data['loanDuration'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['education'] = isset($data['education']) ? $data['education'] : null;
        $this->container['employmentDurationCurrentEmployer'] = isset($data['employmentDurationCurrentEmployer']) ? $data['employmentDurationCurrentEmployer'] : null;
        $this->container['homeOwnershipType'] = isset($data['homeOwnershipType']) ? $data['homeOwnershipType'] : null;
        $this->container['incomeTotal'] = isset($data['incomeTotal']) ? $data['incomeTotal'] : null;
        $this->container['monthlyPayment'] = isset($data['monthlyPayment']) ? $data['monthlyPayment'] : null;
        $this->container['monthlyPaymentDay'] = isset($data['monthlyPaymentDay']) ? $data['monthlyPaymentDay'] : null;
        $this->container['modelVersion'] = isset($data['modelVersion']) ? $data['modelVersion'] : null;
        $this->container['expectedLoss'] = isset($data['expectedLoss']) ? $data['expectedLoss'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['lossGivenDefault'] = isset($data['lossGivenDefault']) ? $data['lossGivenDefault'] : null;
        $this->container['probabilityOfDefault'] = isset($data['probabilityOfDefault']) ? $data['probabilityOfDefault'] : null;
        $this->container['expectedReturnAlpha'] = isset($data['expectedReturnAlpha']) ? $data['expectedReturnAlpha'] : null;
        $this->container['liabilitiesTotal'] = isset($data['liabilitiesTotal']) ? $data['liabilitiesTotal'] : null;
        $this->container['listedOnUTC'] = isset($data['listedOnUTC']) ? $data['listedOnUTC'] : null;
        $this->container['actualCloseDate'] = isset($data['actualCloseDate']) ? $data['actualCloseDate'] : null;
        $this->container['winningBidsAmount'] = isset($data['winningBidsAmount']) ? $data['winningBidsAmount'] : null;
        $this->container['remainingAmount'] = isset($data['remainingAmount']) ? $data['remainingAmount'] : null;
        $this->container['userBids'] = isset($data['userBids']) ? $data['userBids'] : null;
        $this->container['userBidAmount'] = isset($data['userBidAmount']) ? $data['userBidAmount'] : null;
        $this->container['fullfilled'] = isset($data['fullfilled']) ? $data['fullfilled'] : null;
        $this->container['creditScore'] = isset($data['creditScore']) ? $data['creditScore'] : null;
        $this->container['scoringDate'] = isset($data['scoringDate']) ? $data['scoringDate'] : null;
        $this->container['useOfLoan'] = isset($data['useOfLoan']) ? $data['useOfLoan'] : null;
        $this->container['maritalStatus'] = isset($data['maritalStatus']) ? $data['maritalStatus'] : null;
        $this->container['nrOfDependants'] = isset($data['nrOfDependants']) ? $data['nrOfDependants'] : null;
        $this->container['employmentStatus'] = isset($data['employmentStatus']) ? $data['employmentStatus'] : null;
        $this->container['employmentPosition'] = isset($data['employmentPosition']) ? $data['employmentPosition'] : null;
        $this->container['workExperience'] = isset($data['workExperience']) ? $data['workExperience'] : null;
        $this->container['occupationArea'] = isset($data['occupationArea']) ? $data['occupationArea'] : null;
        $this->container['incomeFromPrincipalEmployer'] = isset($data['incomeFromPrincipalEmployer']) ? $data['incomeFromPrincipalEmployer'] : null;
        $this->container['incomeFromPension'] = isset($data['incomeFromPension']) ? $data['incomeFromPension'] : null;
        $this->container['incomeFromFamilyAllowance'] = isset($data['incomeFromFamilyAllowance']) ? $data['incomeFromFamilyAllowance'] : null;
        $this->container['incomeFromSocialWelfare'] = isset($data['incomeFromSocialWelfare']) ? $data['incomeFromSocialWelfare'] : null;
        $this->container['incomeFromLeavePay'] = isset($data['incomeFromLeavePay']) ? $data['incomeFromLeavePay'] : null;
        $this->container['incomeFromChildSupport'] = isset($data['incomeFromChildSupport']) ? $data['incomeFromChildSupport'] : null;
        $this->container['incomeOther'] = isset($data['incomeOther']) ? $data['incomeOther'] : null;
        $this->container['freeCash'] = isset($data['freeCash']) ? $data['freeCash'] : null;
        $this->container['debtToIncome'] = isset($data['debtToIncome']) ? $data['debtToIncome'] : null;
        $this->container['eADRate'] = isset($data['eADRate']) ? $data['eADRate'] : null;
        $this->container['maturityFactor'] = isset($data['maturityFactor']) ? $data['maturityFactor'] : null;
        $this->container['interestRateAlpha'] = isset($data['interestRateAlpha']) ? $data['interestRateAlpha'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVerificationTypeAllowableValues();
        if (!is_null($this->container['verificationType']) && !in_array($this->container['verificationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verificationType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLanguageCodeAllowableValues();
        if (!is_null($this->container['languageCode']) && !in_array($this->container['languageCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'languageCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEducationAllowableValues();
        if (!is_null($this->container['education']) && !in_array($this->container['education'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'education', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHomeOwnershipTypeAllowableValues();
        if (!is_null($this->container['homeOwnershipType']) && !in_array($this->container['homeOwnershipType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'homeOwnershipType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($this->container['useOfLoan']) && !in_array($this->container['useOfLoan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'useOfLoan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($this->container['maritalStatus']) && !in_array($this->container['maritalStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'maritalStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEmploymentStatusAllowableValues();
        if (!is_null($this->container['employmentStatus']) && !in_array($this->container['employmentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'employmentStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOccupationAreaAllowableValues();
        if (!is_null($this->container['occupationArea']) && !in_array($this->container['occupationArea'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'occupationArea', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets liabilities
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\Liability[]|null
     */
    public function getLiabilities()
    {
        return $this->container['liabilities'];
    }

    /**
     * Sets liabilities
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\Liability[]|null $liabilities Borrower's liabilities
     *
     * @return $this
     */
    public function setLiabilities($liabilities)
    {
        $this->container['liabilities'] = $liabilities;

        return $this;
    }

    /**
     * Gets debts
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\Debt[]|null
     */
    public function getDebts()
    {
        return $this->container['debts'];
    }

    /**
     * Sets debts
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\Debt[]|null $debts Borrower's debts
     *
     * @return $this
     */
    public function setDebts($debts)
    {
        $this->container['debts'] = $debts;

        return $this;
    }

    /**
     * Gets borrowerHistory
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\BorrowerHistory|null
     */
    public function getBorrowerHistory()
    {
        return $this->container['borrowerHistory'];
    }

    /**
     * Sets borrowerHistory
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\BorrowerHistory|null $borrowerHistory borrowerHistory
     *
     * @return $this
     */
    public function setBorrowerHistory($borrowerHistory)
    {
        $this->container['borrowerHistory'] = $borrowerHistory;

        return $this;
    }

    /**
     * Gets loanId
     *
     * @return string|null
     */
    public function getLoanId()
    {
        return $this->container['loanId'];
    }

    /**
     * Sets loanId
     *
     * @param string|null $loanId Unique loan identificator
     *
     * @return $this
     */
    public function setLoanId($loanId)
    {
        $this->container['loanId'] = $loanId;

        return $this;
    }

    /**
     * Gets auctionId
     *
     * @return string|null
     */
    public function getAuctionId()
    {
        return $this->container['auctionId'];
    }

    /**
     * Sets auctionId
     *
     * @param string|null $auctionId Unique auction identificator
     *
     * @return $this
     */
    public function setAuctionId($auctionId)
    {
        $this->container['auctionId'] = $auctionId;

        return $this;
    }

    /**
     * Gets loanNumber
     *
     * @return int|null
     */
    public function getLoanNumber()
    {
        return $this->container['loanNumber'];
    }

    /**
     * Sets loanNumber
     *
     * @param int|null $loanNumber Number of the loan
     *
     * @return $this
     */
    public function setLoanNumber($loanNumber)
    {
        $this->container['loanNumber'] = $loanNumber;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName Customer's Bondora username
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets newCreditCustomer
     *
     * @return int|null
     */
    public function getNewCreditCustomer()
    {
        return $this->container['newCreditCustomer'];
    }

    /**
     * Sets newCreditCustomer
     *
     * @param int|null $newCreditCustomer Did the customer have prior credit history in Bondora              <para>0 Customer had at least 3 months of credit history in Bondora</para><para>1 No prior credit history in Bondora</para>
     *
     * @return $this
     */
    public function setNewCreditCustomer($newCreditCustomer)
    {
        $this->container['newCreditCustomer'] = $newCreditCustomer;

        return $this;
    }

    /**
     * Gets loanApplicationStartedDate
     *
     * @return \DateTime|null
     */
    public function getLoanApplicationStartedDate()
    {
        return $this->container['loanApplicationStartedDate'];
    }

    /**
     * Sets loanApplicationStartedDate
     *
     * @param \DateTime|null $loanApplicationStartedDate Date when the loan application was started
     *
     * @return $this
     */
    public function setLoanApplicationStartedDate($loanApplicationStartedDate)
    {
        $this->container['loanApplicationStartedDate'] = $loanApplicationStartedDate;

        return $this;
    }

    /**
     * Gets plannedCloseDate
     *
     * @return \DateTime|null
     */
    public function getPlannedCloseDate()
    {
        return $this->container['plannedCloseDate'];
    }

    /**
     * Sets plannedCloseDate
     *
     * @param \DateTime|null $plannedCloseDate Date and time when the auction is closed, if it's not funded 100% before that.              Auction will be closed before that, if auction is funded 100%.
     *
     * @return $this
     */
    public function setPlannedCloseDate($plannedCloseDate)
    {
        $this->container['plannedCloseDate'] = $plannedCloseDate;

        return $this;
    }

    /**
     * Gets applicationSignedHour
     *
     * @return int|null
     */
    public function getApplicationSignedHour()
    {
        return $this->container['applicationSignedHour'];
    }

    /**
     * Sets applicationSignedHour
     *
     * @param int|null $applicationSignedHour Hour of signing the loan application
     *
     * @return $this
     */
    public function setApplicationSignedHour($applicationSignedHour)
    {
        $this->container['applicationSignedHour'] = $applicationSignedHour;

        return $this;
    }

    /**
     * Gets applicationSignedWeekday
     *
     * @return int|null
     */
    public function getApplicationSignedWeekday()
    {
        return $this->container['applicationSignedWeekday'];
    }

    /**
     * Sets applicationSignedWeekday
     *
     * @param int|null $applicationSignedWeekday Weekday of signing the loan application
     *
     * @return $this
     */
    public function setApplicationSignedWeekday($applicationSignedWeekday)
    {
        $this->container['applicationSignedWeekday'] = $applicationSignedWeekday;

        return $this;
    }

    /**
     * Gets verificationType
     *
     * @return int|null
     */
    public function getVerificationType()
    {
        return $this->container['verificationType'];
    }

    /**
     * Sets verificationType
     *
     * @param int|null $verificationType Verification type
     *
     * @return $this
     */
    public function setVerificationType($verificationType)
    {
        $allowedValues = $this->getVerificationTypeAllowableValues();
        if (!is_null($verificationType) && !in_array($verificationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verificationType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verificationType'] = $verificationType;

        return $this;
    }

    /**
     * Gets languageCode
     *
     * @return int|null
     */
    public function getLanguageCode()
    {
        return $this->container['languageCode'];
    }

    /**
     * Sets languageCode
     *
     * @param int|null $languageCode Two letter language code
     *
     * @return $this
     */
    public function setLanguageCode($languageCode)
    {
        $allowedValues = $this->getLanguageCodeAllowableValues();
        if (!is_null($languageCode) && !in_array($languageCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'languageCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['languageCode'] = $languageCode;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int|null $age Age of the borrower (years)
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime|null $dateOfBirth Borrower's date of birth
     *
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int|null $gender Gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Residency of the borrower
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets creditScoreEsMicroL
     *
     * @return string|null
     */
    public function getCreditScoreEsMicroL()
    {
        return $this->container['creditScoreEsMicroL'];
    }

    /**
     * Sets creditScoreEsMicroL
     *
     * @param string|null $creditScoreEsMicroL A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>
     *
     * @return $this
     */
    public function setCreditScoreEsMicroL($creditScoreEsMicroL)
    {
        $this->container['creditScoreEsMicroL'] = $creditScoreEsMicroL;

        return $this;
    }

    /**
     * Gets creditScoreEsEquifaxRisk
     *
     * @return string|null
     */
    public function getCreditScoreEsEquifaxRisk()
    {
        return $this->container['creditScoreEsEquifaxRisk'];
    }

    /**
     * Sets creditScoreEsEquifaxRisk
     *
     * @param string|null $creditScoreEsEquifaxRisk Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>
     *
     * @return $this
     */
    public function setCreditScoreEsEquifaxRisk($creditScoreEsEquifaxRisk)
    {
        $this->container['creditScoreEsEquifaxRisk'] = $creditScoreEsEquifaxRisk;

        return $this;
    }

    /**
     * Gets creditScoreFiAsiakasTietoRiskGrade
     *
     * @return string|null
     */
    public function getCreditScoreFiAsiakasTietoRiskGrade()
    {
        return $this->container['creditScoreFiAsiakasTietoRiskGrade'];
    }

    /**
     * Sets creditScoreFiAsiakasTietoRiskGrade
     *
     * @param string|null $creditScoreFiAsiakasTietoRiskGrade Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>
     *
     * @return $this
     */
    public function setCreditScoreFiAsiakasTietoRiskGrade($creditScoreFiAsiakasTietoRiskGrade)
    {
        $this->container['creditScoreFiAsiakasTietoRiskGrade'] = $creditScoreFiAsiakasTietoRiskGrade;

        return $this;
    }

    /**
     * Gets creditScoreEeMini
     *
     * @return string|null
     */
    public function getCreditScoreEeMini()
    {
        return $this->container['creditScoreEeMini'];
    }

    /**
     * Sets creditScoreEeMini
     *
     * @param string|null $creditScoreEeMini Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>
     *
     * @return $this
     */
    public function setCreditScoreEeMini($creditScoreEeMini)
    {
        $this->container['creditScoreEeMini'] = $creditScoreEeMini;

        return $this;
    }

    /**
     * Gets appliedAmount
     *
     * @return double|null
     */
    public function getAppliedAmount()
    {
        return $this->container['appliedAmount'];
    }

    /**
     * Sets appliedAmount
     *
     * @param double|null $appliedAmount The amount borrower applied for originally
     *
     * @return $this
     */
    public function setAppliedAmount($appliedAmount)
    {
        $this->container['appliedAmount'] = $appliedAmount;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return double|null
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param double|null $interest Maximum interest rate accepted in the loan application
     *
     * @return $this
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets loanDuration
     *
     * @return int|null
     */
    public function getLoanDuration()
    {
        return $this->container['loanDuration'];
    }

    /**
     * Sets loanDuration
     *
     * @param int|null $loanDuration The loan term
     *
     * @return $this
     */
    public function setLoanDuration($loanDuration)
    {
        $this->container['loanDuration'] = $loanDuration;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county County of the borrower
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of the borrower
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets education
     *
     * @return int|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param int|null $education Education
     *
     * @return $this
     */
    public function setEducation($education)
    {
        $allowedValues = $this->getEducationAllowableValues();
        if (!is_null($education) && !in_array($education, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'education', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets employmentDurationCurrentEmployer
     *
     * @return string|null
     */
    public function getEmploymentDurationCurrentEmployer()
    {
        return $this->container['employmentDurationCurrentEmployer'];
    }

    /**
     * Sets employmentDurationCurrentEmployer
     *
     * @param string|null $employmentDurationCurrentEmployer Employment time with the current employer
     *
     * @return $this
     */
    public function setEmploymentDurationCurrentEmployer($employmentDurationCurrentEmployer)
    {
        $this->container['employmentDurationCurrentEmployer'] = $employmentDurationCurrentEmployer;

        return $this;
    }

    /**
     * Gets homeOwnershipType
     *
     * @return int|null
     */
    public function getHomeOwnershipType()
    {
        return $this->container['homeOwnershipType'];
    }

    /**
     * Sets homeOwnershipType
     *
     * @param int|null $homeOwnershipType Type of home ownership
     *
     * @return $this
     */
    public function setHomeOwnershipType($homeOwnershipType)
    {
        $allowedValues = $this->getHomeOwnershipTypeAllowableValues();
        if (!is_null($homeOwnershipType) && !in_array($homeOwnershipType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'homeOwnershipType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['homeOwnershipType'] = $homeOwnershipType;

        return $this;
    }

    /**
     * Gets incomeTotal
     *
     * @return double|null
     */
    public function getIncomeTotal()
    {
        return $this->container['incomeTotal'];
    }

    /**
     * Sets incomeTotal
     *
     * @param double|null $incomeTotal Total income
     *
     * @return $this
     */
    public function setIncomeTotal($incomeTotal)
    {
        $this->container['incomeTotal'] = $incomeTotal;

        return $this;
    }

    /**
     * Gets monthlyPayment
     *
     * @return double|null
     */
    public function getMonthlyPayment()
    {
        return $this->container['monthlyPayment'];
    }

    /**
     * Sets monthlyPayment
     *
     * @param double|null $monthlyPayment Loan monthly payment amount.
     *
     * @return $this
     */
    public function setMonthlyPayment($monthlyPayment)
    {
        $this->container['monthlyPayment'] = $monthlyPayment;

        return $this;
    }

    /**
     * Gets monthlyPaymentDay
     *
     * @return int|null
     */
    public function getMonthlyPaymentDay()
    {
        return $this->container['monthlyPaymentDay'];
    }

    /**
     * Sets monthlyPaymentDay
     *
     * @param int|null $monthlyPaymentDay The day of the month the loan payments are scheduled for.              The actual date is adjusted for weekends and bank holidays.              E.g. if 10th is a Sunday then the payment will be made on the 11th in that month.
     *
     * @return $this
     */
    public function setMonthlyPaymentDay($monthlyPaymentDay)
    {
        $this->container['monthlyPaymentDay'] = $monthlyPaymentDay;

        return $this;
    }

    /**
     * Gets modelVersion
     *
     * @return int|null
     */
    public function getModelVersion()
    {
        return $this->container['modelVersion'];
    }

    /**
     * Sets modelVersion
     *
     * @param int|null $modelVersion The version of the Rating model used for issuing the Bondora Rating
     *
     * @return $this
     */
    public function setModelVersion($modelVersion)
    {
        $this->container['modelVersion'] = $modelVersion;

        return $this;
    }

    /**
     * Gets expectedLoss
     *
     * @return double|null
     */
    public function getExpectedLoss()
    {
        return $this->container['expectedLoss'];
    }

    /**
     * Sets expectedLoss
     *
     * @param double|null $expectedLoss Expected Loss calculated by the Rating model
     *
     * @return $this
     */
    public function setExpectedLoss($expectedLoss)
    {
        $this->container['expectedLoss'] = $expectedLoss;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string|null $rating Bondora Rating issued by the Rating model
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets lossGivenDefault
     *
     * @return double|null
     */
    public function getLossGivenDefault()
    {
        return $this->container['lossGivenDefault'];
    }

    /**
     * Sets lossGivenDefault
     *
     * @param double|null $lossGivenDefault Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries. However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.
     *
     * @return $this
     */
    public function setLossGivenDefault($lossGivenDefault)
    {
        $this->container['lossGivenDefault'] = $lossGivenDefault;

        return $this;
    }

    /**
     * Gets probabilityOfDefault
     *
     * @return double|null
     */
    public function getProbabilityOfDefault()
    {
        return $this->container['probabilityOfDefault'];
    }

    /**
     * Sets probabilityOfDefault
     *
     * @param double|null $probabilityOfDefault Probability of Default, refers to a loan’s probability of default within one year horizon.
     *
     * @return $this
     */
    public function setProbabilityOfDefault($probabilityOfDefault)
    {
        $this->container['probabilityOfDefault'] = $probabilityOfDefault;

        return $this;
    }

    /**
     * Gets expectedReturnAlpha
     *
     * @return double|null
     */
    public function getExpectedReturnAlpha()
    {
        return $this->container['expectedReturnAlpha'];
    }

    /**
     * Sets expectedReturnAlpha
     *
     * @param double|null $expectedReturnAlpha Expected return alpha
     *
     * @return $this
     */
    public function setExpectedReturnAlpha($expectedReturnAlpha)
    {
        $this->container['expectedReturnAlpha'] = $expectedReturnAlpha;

        return $this;
    }

    /**
     * Gets liabilitiesTotal
     *
     * @return double|null
     */
    public function getLiabilitiesTotal()
    {
        return $this->container['liabilitiesTotal'];
    }

    /**
     * Sets liabilitiesTotal
     *
     * @param double|null $liabilitiesTotal Total liabilities
     *
     * @return $this
     */
    public function setLiabilitiesTotal($liabilitiesTotal)
    {
        $this->container['liabilitiesTotal'] = $liabilitiesTotal;

        return $this;
    }

    /**
     * Gets listedOnUTC
     *
     * @return \DateTime|null
     */
    public function getListedOnUTC()
    {
        return $this->container['listedOnUTC'];
    }

    /**
     * Sets listedOnUTC
     *
     * @param \DateTime|null $listedOnUTC Date when auction was published
     *
     * @return $this
     */
    public function setListedOnUTC($listedOnUTC)
    {
        $this->container['listedOnUTC'] = $listedOnUTC;

        return $this;
    }

    /**
     * Gets actualCloseDate
     *
     * @return \DateTime|null
     */
    public function getActualCloseDate()
    {
        return $this->container['actualCloseDate'];
    }

    /**
     * Sets actualCloseDate
     *
     * @param \DateTime|null $actualCloseDate Date and time when the auction was actually closed. Is null, if auction is active.
     *
     * @return $this
     */
    public function setActualCloseDate($actualCloseDate)
    {
        $this->container['actualCloseDate'] = $actualCloseDate;

        return $this;
    }

    /**
     * Gets winningBidsAmount
     *
     * @return double|null
     */
    public function getWinningBidsAmount()
    {
        return $this->container['winningBidsAmount'];
    }

    /**
     * Sets winningBidsAmount
     *
     * @param double|null $winningBidsAmount The amount that auction is fulfilled, taken amount only bids where investors have enough funds.              This is preliminary calculated amount and can change when trying to close auction (auction is closed, when auction is funded 100% or PlannedCloseDate is reached) and specific investor(s) do not have enough funds.
     *
     * @return $this
     */
    public function setWinningBidsAmount($winningBidsAmount)
    {
        $this->container['winningBidsAmount'] = $winningBidsAmount;

        return $this;
    }

    /**
     * Gets remainingAmount
     *
     * @return double|null
     */
    public function getRemainingAmount()
    {
        return $this->container['remainingAmount'];
    }

    /**
     * Sets remainingAmount
     *
     * @param double|null $remainingAmount The amount that is remaining to be funded (AppliedAmount - WinningBidsAmount).
     *
     * @return $this
     */
    public function setRemainingAmount($remainingAmount)
    {
        $this->container['remainingAmount'] = $remainingAmount;

        return $this;
    }

    /**
     * Gets userBids
     *
     * @return int|null
     */
    public function getUserBids()
    {
        return $this->container['userBids'];
    }

    /**
     * Sets userBids
     *
     * @param int|null $userBids How many bids current user has bidden into the auction
     *
     * @return $this
     */
    public function setUserBids($userBids)
    {
        $this->container['userBids'] = $userBids;

        return $this;
    }

    /**
     * Gets userBidAmount
     *
     * @return double|null
     */
    public function getUserBidAmount()
    {
        return $this->container['userBidAmount'];
    }

    /**
     * Sets userBidAmount
     *
     * @param double|null $userBidAmount How much current user has bidden into the auction
     *
     * @return $this
     */
    public function setUserBidAmount($userBidAmount)
    {
        $this->container['userBidAmount'] = $userBidAmount;

        return $this;
    }

    /**
     * Gets fullfilled
     *
     * @return double|null
     */
    public function getFullfilled()
    {
        return $this->container['fullfilled'];
    }

    /**
     * Sets fullfilled
     *
     * @param double|null $fullfilled Precentage, how much the auction is fulfilled. Can be more than 100%, if overfunded.
     *
     * @return $this
     */
    public function setFullfilled($fullfilled)
    {
        $this->container['fullfilled'] = $fullfilled;

        return $this;
    }

    /**
     * Gets creditScore
     *
     * @return int|null
     */
    public function getCreditScore()
    {
        return $this->container['creditScore'];
    }

    /**
     * Sets creditScore
     *
     * @param int|null $creditScore <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>
     *
     * @return $this
     */
    public function setCreditScore($creditScore)
    {
        $this->container['creditScore'] = $creditScore;

        return $this;
    }

    /**
     * Gets scoringDate
     *
     * @return \DateTime|null
     */
    public function getScoringDate()
    {
        return $this->container['scoringDate'];
    }

    /**
     * Sets scoringDate
     *
     * @param \DateTime|null $scoringDate Date when the Rating was calculated for this loan
     *
     * @return $this
     */
    public function setScoringDate($scoringDate)
    {
        $this->container['scoringDate'] = $scoringDate;

        return $this;
    }

    /**
     * Gets useOfLoan
     *
     * @return int|null
     */
    public function getUseOfLoan()
    {
        return $this->container['useOfLoan'];
    }

    /**
     * Sets useOfLoan
     *
     * @param int|null $useOfLoan Use of loan              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>
     *
     * @return $this
     */
    public function setUseOfLoan($useOfLoan)
    {
        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($useOfLoan) && !in_array($useOfLoan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'useOfLoan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['useOfLoan'] = $useOfLoan;

        return $this;
    }

    /**
     * Gets maritalStatus
     *
     * @return int|null
     */
    public function getMaritalStatus()
    {
        return $this->container['maritalStatus'];
    }

    /**
     * Sets maritalStatus
     *
     * @param int|null $maritalStatus Marital status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>
     *
     * @return $this
     */
    public function setMaritalStatus($maritalStatus)
    {
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($maritalStatus) && !in_array($maritalStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'maritalStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maritalStatus'] = $maritalStatus;

        return $this;
    }

    /**
     * Gets nrOfDependants
     *
     * @return string|null
     */
    public function getNrOfDependants()
    {
        return $this->container['nrOfDependants'];
    }

    /**
     * Sets nrOfDependants
     *
     * @param string|null $nrOfDependants Number of children or other dependants              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>
     *
     * @return $this
     */
    public function setNrOfDependants($nrOfDependants)
    {
        $this->container['nrOfDependants'] = $nrOfDependants;

        return $this;
    }

    /**
     * Gets employmentStatus
     *
     * @return int|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employmentStatus'];
    }

    /**
     * Sets employmentStatus
     *
     * @param int|null $employmentStatus Employment status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>
     *
     * @return $this
     */
    public function setEmploymentStatus($employmentStatus)
    {
        $allowedValues = $this->getEmploymentStatusAllowableValues();
        if (!is_null($employmentStatus) && !in_array($employmentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'employmentStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employmentStatus'] = $employmentStatus;

        return $this;
    }

    /**
     * Gets employmentPosition
     *
     * @return string|null
     */
    public function getEmploymentPosition()
    {
        return $this->container['employmentPosition'];
    }

    /**
     * Sets employmentPosition
     *
     * @param string|null $employmentPosition Employment position              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>
     *
     * @return $this
     */
    public function setEmploymentPosition($employmentPosition)
    {
        $this->container['employmentPosition'] = $employmentPosition;

        return $this;
    }

    /**
     * Gets workExperience
     *
     * @return string|null
     */
    public function getWorkExperience()
    {
        return $this->container['workExperience'];
    }

    /**
     * Sets workExperience
     *
     * @param string|null $workExperience Work experience in total              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>
     *
     * @return $this
     */
    public function setWorkExperience($workExperience)
    {
        $this->container['workExperience'] = $workExperience;

        return $this;
    }

    /**
     * Gets occupationArea
     *
     * @return int|null
     */
    public function getOccupationArea()
    {
        return $this->container['occupationArea'];
    }

    /**
     * Sets occupationArea
     *
     * @param int|null $occupationArea Occupation area              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>
     *
     * @return $this
     */
    public function setOccupationArea($occupationArea)
    {
        $allowedValues = $this->getOccupationAreaAllowableValues();
        if (!is_null($occupationArea) && !in_array($occupationArea, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'occupationArea', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['occupationArea'] = $occupationArea;

        return $this;
    }

    /**
     * Gets incomeFromPrincipalEmployer
     *
     * @return double|null
     */
    public function getIncomeFromPrincipalEmployer()
    {
        return $this->container['incomeFromPrincipalEmployer'];
    }

    /**
     * Sets incomeFromPrincipalEmployer
     *
     * @param double|null $incomeFromPrincipalEmployer Salary              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setIncomeFromPrincipalEmployer($incomeFromPrincipalEmployer)
    {
        $this->container['incomeFromPrincipalEmployer'] = $incomeFromPrincipalEmployer;

        return $this;
    }

    /**
     * Gets incomeFromPension
     *
     * @return double|null
     */
    public function getIncomeFromPension()
    {
        return $this->container['incomeFromPension'];
    }

    /**
     * Sets incomeFromPension
     *
     * @param double|null $incomeFromPension Pension              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setIncomeFromPension($incomeFromPension)
    {
        $this->container['incomeFromPension'] = $incomeFromPension;

        return $this;
    }

    /**
     * Gets incomeFromFamilyAllowance
     *
     * @return double|null
     */
    public function getIncomeFromFamilyAllowance()
    {
        return $this->container['incomeFromFamilyAllowance'];
    }

    /**
     * Sets incomeFromFamilyAllowance
     *
     * @param double|null $incomeFromFamilyAllowance Family allowance              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setIncomeFromFamilyAllowance($incomeFromFamilyAllowance)
    {
        $this->container['incomeFromFamilyAllowance'] = $incomeFromFamilyAllowance;

        return $this;
    }

    /**
     * Gets incomeFromSocialWelfare
     *
     * @return double|null
     */
    public function getIncomeFromSocialWelfare()
    {
        return $this->container['incomeFromSocialWelfare'];
    }

    /**
     * Sets incomeFromSocialWelfare
     *
     * @param double|null $incomeFromSocialWelfare Social welfare              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setIncomeFromSocialWelfare($incomeFromSocialWelfare)
    {
        $this->container['incomeFromSocialWelfare'] = $incomeFromSocialWelfare;

        return $this;
    }

    /**
     * Gets incomeFromLeavePay
     *
     * @return double|null
     */
    public function getIncomeFromLeavePay()
    {
        return $this->container['incomeFromLeavePay'];
    }

    /**
     * Sets incomeFromLeavePay
     *
     * @param double|null $incomeFromLeavePay Leave pay              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setIncomeFromLeavePay($incomeFromLeavePay)
    {
        $this->container['incomeFromLeavePay'] = $incomeFromLeavePay;

        return $this;
    }

    /**
     * Gets incomeFromChildSupport
     *
     * @return double|null
     */
    public function getIncomeFromChildSupport()
    {
        return $this->container['incomeFromChildSupport'];
    }

    /**
     * Sets incomeFromChildSupport
     *
     * @param double|null $incomeFromChildSupport Child support              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setIncomeFromChildSupport($incomeFromChildSupport)
    {
        $this->container['incomeFromChildSupport'] = $incomeFromChildSupport;

        return $this;
    }

    /**
     * Gets incomeOther
     *
     * @return double|null
     */
    public function getIncomeOther()
    {
        return $this->container['incomeOther'];
    }

    /**
     * Sets incomeOther
     *
     * @param double|null $incomeOther Other income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setIncomeOther($incomeOther)
    {
        $this->container['incomeOther'] = $incomeOther;

        return $this;
    }

    /**
     * Gets freeCash
     *
     * @return double|null
     */
    public function getFreeCash()
    {
        return $this->container['freeCash'];
    }

    /**
     * Sets freeCash
     *
     * @param double|null $freeCash Discretionary Income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setFreeCash($freeCash)
    {
        $this->container['freeCash'] = $freeCash;

        return $this;
    }

    /**
     * Gets debtToIncome
     *
     * @return double|null
     */
    public function getDebtToIncome()
    {
        return $this->container['debtToIncome'];
    }

    /**
     * Sets debtToIncome
     *
     * @param double|null $debtToIncome Debt to income ratio              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>
     *
     * @return $this
     */
    public function setDebtToIncome($debtToIncome)
    {
        $this->container['debtToIncome'] = $debtToIncome;

        return $this;
    }

    /**
     * Gets eADRate
     *
     * @return double|null
     */
    public function getEADRate()
    {
        return $this->container['eADRate'];
    }

    /**
     * Sets eADRate
     *
     * @param double|null $eADRate Exposure at Default (expressed as a percentage of the original loan amount), indicates outstanding investor exposure at the time of default, including outstanding principal amount plus accrued but unpaid interests.
     *
     * @return $this
     */
    public function setEADRate($eADRate)
    {
        $this->container['eADRate'] = $eADRate;

        return $this;
    }

    /**
     * Gets maturityFactor
     *
     * @return double|null
     */
    public function getMaturityFactor()
    {
        return $this->container['maturityFactor'];
    }

    /**
     * Sets maturityFactor
     *
     * @param double|null $maturityFactor Maturity Factor M of 1.3 is assumed for loans with duration exceeding one year.
     *
     * @return $this
     */
    public function setMaturityFactor($maturityFactor)
    {
        $this->container['maturityFactor'] = $maturityFactor;

        return $this;
    }

    /**
     * Gets interestRateAlpha
     *
     * @return double|null
     */
    public function getInterestRateAlpha()
    {
        return $this->container['interestRateAlpha'];
    }

    /**
     * Sets interestRateAlpha
     *
     * @param double|null $interestRateAlpha Interest rate alpha
     *
     * @return $this
     */
    public function setInterestRateAlpha($interestRateAlpha)
    {
        $this->container['interestRateAlpha'] = $interestRateAlpha;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


