<?php
/**
 * SecondMarketItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * SecondMarketItem Class Doc Comment
 *
 * @category Class
 * @description SecondaryMarket list item&#39;s information
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecondMarketItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SecondMarketItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'loanPartId' => 'string',
        'amount' => 'double',
        'auctionId' => 'string',
        'auctionName' => 'string',
        'auctionNumber' => 'int',
        'auctionBidNumber' => 'int',
        'country' => 'string',
        'creditScore' => 'double',
        'rating' => 'string',
        'interest' => 'double',
        'useOfLoan' => 'int',
        'incomeVerificationStatus' => 'int',
        'loanStatusCode' => 'int',
        'loanStatusActiveFrom' => '\DateTime',
        'latestDebtManagementStageType' => 'int',
        'latestDebtManagementDate' => '\DateTime',
        'userName' => 'string',
        'gender' => 'int',
        'dateOfBirth' => '\DateTime',
        'signedDate' => '\DateTime',
        'reScheduledOn' => '\DateTime',
        'debtOccuredOn' => '\DateTime',
        'debtOccuredOnForSecondary' => '\DateTime',
        'nextPaymentNr' => 'int',
        'nextPaymentDate' => '\DateTime',
        'nextPaymentSum' => 'double',
        'nrOfScheduledPayments' => 'int',
        'lastPaymentDate' => '\DateTime',
        'principalRepaid' => 'double',
        'interestRepaid' => 'double',
        'lateAmountPaid' => 'double',
        'principalRemaining' => 'double',
        'principalLateAmount' => 'double',
        'interestLateAmount' => 'double',
        'penaltyLateAmount' => 'double',
        'lateAmountTotal' => 'double',
        'principalWriteOffAmount' => 'double',
        'interestWriteOffAmount' => 'double',
        'penaltyWriteOffAmount' => 'double',
        'debtServicingCostMainAmount' => 'double',
        'debtServicingCostInterestAmount' => 'double',
        'debtServicingCostPenaltyAmount' => 'double',
        'price' => 'double',
        'fee' => 'double',
        'totalCost' => 'double',
        'outstandingPayments' => 'double',
        'desiredDiscountRate' => 'double',
        'xirr' => 'double',
        'listedOnDate' => '\DateTime',
        'debtManagmentEvents' => '\CedricZiel\OpenAPI\BondoraPHP\Model\DebtManagementEvent[]',
        'loanTransfers' => '\CedricZiel\OpenAPI\BondoraPHP\Model\LoanTransfer[]',
        'scheduledPayments' => '\CedricZiel\OpenAPI\BondoraPHP\Model\ScheduledPayment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'loanPartId' => null,
        'amount' => 'double',
        'auctionId' => null,
        'auctionName' => null,
        'auctionNumber' => 'int32',
        'auctionBidNumber' => 'int32',
        'country' => null,
        'creditScore' => 'double',
        'rating' => null,
        'interest' => 'double',
        'useOfLoan' => 'int32',
        'incomeVerificationStatus' => 'int32',
        'loanStatusCode' => 'int32',
        'loanStatusActiveFrom' => 'date-time',
        'latestDebtManagementStageType' => 'int32',
        'latestDebtManagementDate' => 'date-time',
        'userName' => null,
        'gender' => 'int32',
        'dateOfBirth' => 'date-time',
        'signedDate' => 'date-time',
        'reScheduledOn' => 'date-time',
        'debtOccuredOn' => 'date-time',
        'debtOccuredOnForSecondary' => 'date-time',
        'nextPaymentNr' => 'int32',
        'nextPaymentDate' => 'date-time',
        'nextPaymentSum' => 'double',
        'nrOfScheduledPayments' => 'int32',
        'lastPaymentDate' => 'date-time',
        'principalRepaid' => 'double',
        'interestRepaid' => 'double',
        'lateAmountPaid' => 'double',
        'principalRemaining' => 'double',
        'principalLateAmount' => 'double',
        'interestLateAmount' => 'double',
        'penaltyLateAmount' => 'double',
        'lateAmountTotal' => 'double',
        'principalWriteOffAmount' => 'double',
        'interestWriteOffAmount' => 'double',
        'penaltyWriteOffAmount' => 'double',
        'debtServicingCostMainAmount' => 'double',
        'debtServicingCostInterestAmount' => 'double',
        'debtServicingCostPenaltyAmount' => 'double',
        'price' => 'double',
        'fee' => 'double',
        'totalCost' => 'double',
        'outstandingPayments' => 'double',
        'desiredDiscountRate' => 'double',
        'xirr' => 'double',
        'listedOnDate' => 'date-time',
        'debtManagmentEvents' => null,
        'loanTransfers' => null,
        'scheduledPayments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'loanPartId' => 'LoanPartId',
        'amount' => 'Amount',
        'auctionId' => 'AuctionId',
        'auctionName' => 'AuctionName',
        'auctionNumber' => 'AuctionNumber',
        'auctionBidNumber' => 'AuctionBidNumber',
        'country' => 'Country',
        'creditScore' => 'CreditScore',
        'rating' => 'Rating',
        'interest' => 'Interest',
        'useOfLoan' => 'UseOfLoan',
        'incomeVerificationStatus' => 'IncomeVerificationStatus',
        'loanStatusCode' => 'LoanStatusCode',
        'loanStatusActiveFrom' => 'LoanStatusActiveFrom',
        'latestDebtManagementStageType' => 'LatestDebtManagementStageType',
        'latestDebtManagementDate' => 'LatestDebtManagementDate',
        'userName' => 'UserName',
        'gender' => 'Gender',
        'dateOfBirth' => 'DateOfBirth',
        'signedDate' => 'SignedDate',
        'reScheduledOn' => 'ReScheduledOn',
        'debtOccuredOn' => 'DebtOccuredOn',
        'debtOccuredOnForSecondary' => 'DebtOccuredOnForSecondary',
        'nextPaymentNr' => 'NextPaymentNr',
        'nextPaymentDate' => 'NextPaymentDate',
        'nextPaymentSum' => 'NextPaymentSum',
        'nrOfScheduledPayments' => 'NrOfScheduledPayments',
        'lastPaymentDate' => 'LastPaymentDate',
        'principalRepaid' => 'PrincipalRepaid',
        'interestRepaid' => 'InterestRepaid',
        'lateAmountPaid' => 'LateAmountPaid',
        'principalRemaining' => 'PrincipalRemaining',
        'principalLateAmount' => 'PrincipalLateAmount',
        'interestLateAmount' => 'InterestLateAmount',
        'penaltyLateAmount' => 'PenaltyLateAmount',
        'lateAmountTotal' => 'LateAmountTotal',
        'principalWriteOffAmount' => 'PrincipalWriteOffAmount',
        'interestWriteOffAmount' => 'InterestWriteOffAmount',
        'penaltyWriteOffAmount' => 'PenaltyWriteOffAmount',
        'debtServicingCostMainAmount' => 'DebtServicingCostMainAmount',
        'debtServicingCostInterestAmount' => 'DebtServicingCostInterestAmount',
        'debtServicingCostPenaltyAmount' => 'DebtServicingCostPenaltyAmount',
        'price' => 'Price',
        'fee' => 'Fee',
        'totalCost' => 'TotalCost',
        'outstandingPayments' => 'OutstandingPayments',
        'desiredDiscountRate' => 'DesiredDiscountRate',
        'xirr' => 'Xirr',
        'listedOnDate' => 'ListedOnDate',
        'debtManagmentEvents' => 'DebtManagmentEvents',
        'loanTransfers' => 'LoanTransfers',
        'scheduledPayments' => 'ScheduledPayments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'loanPartId' => 'setLoanPartId',
        'amount' => 'setAmount',
        'auctionId' => 'setAuctionId',
        'auctionName' => 'setAuctionName',
        'auctionNumber' => 'setAuctionNumber',
        'auctionBidNumber' => 'setAuctionBidNumber',
        'country' => 'setCountry',
        'creditScore' => 'setCreditScore',
        'rating' => 'setRating',
        'interest' => 'setInterest',
        'useOfLoan' => 'setUseOfLoan',
        'incomeVerificationStatus' => 'setIncomeVerificationStatus',
        'loanStatusCode' => 'setLoanStatusCode',
        'loanStatusActiveFrom' => 'setLoanStatusActiveFrom',
        'latestDebtManagementStageType' => 'setLatestDebtManagementStageType',
        'latestDebtManagementDate' => 'setLatestDebtManagementDate',
        'userName' => 'setUserName',
        'gender' => 'setGender',
        'dateOfBirth' => 'setDateOfBirth',
        'signedDate' => 'setSignedDate',
        'reScheduledOn' => 'setReScheduledOn',
        'debtOccuredOn' => 'setDebtOccuredOn',
        'debtOccuredOnForSecondary' => 'setDebtOccuredOnForSecondary',
        'nextPaymentNr' => 'setNextPaymentNr',
        'nextPaymentDate' => 'setNextPaymentDate',
        'nextPaymentSum' => 'setNextPaymentSum',
        'nrOfScheduledPayments' => 'setNrOfScheduledPayments',
        'lastPaymentDate' => 'setLastPaymentDate',
        'principalRepaid' => 'setPrincipalRepaid',
        'interestRepaid' => 'setInterestRepaid',
        'lateAmountPaid' => 'setLateAmountPaid',
        'principalRemaining' => 'setPrincipalRemaining',
        'principalLateAmount' => 'setPrincipalLateAmount',
        'interestLateAmount' => 'setInterestLateAmount',
        'penaltyLateAmount' => 'setPenaltyLateAmount',
        'lateAmountTotal' => 'setLateAmountTotal',
        'principalWriteOffAmount' => 'setPrincipalWriteOffAmount',
        'interestWriteOffAmount' => 'setInterestWriteOffAmount',
        'penaltyWriteOffAmount' => 'setPenaltyWriteOffAmount',
        'debtServicingCostMainAmount' => 'setDebtServicingCostMainAmount',
        'debtServicingCostInterestAmount' => 'setDebtServicingCostInterestAmount',
        'debtServicingCostPenaltyAmount' => 'setDebtServicingCostPenaltyAmount',
        'price' => 'setPrice',
        'fee' => 'setFee',
        'totalCost' => 'setTotalCost',
        'outstandingPayments' => 'setOutstandingPayments',
        'desiredDiscountRate' => 'setDesiredDiscountRate',
        'xirr' => 'setXirr',
        'listedOnDate' => 'setListedOnDate',
        'debtManagmentEvents' => 'setDebtManagmentEvents',
        'loanTransfers' => 'setLoanTransfers',
        'scheduledPayments' => 'setScheduledPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'loanPartId' => 'getLoanPartId',
        'amount' => 'getAmount',
        'auctionId' => 'getAuctionId',
        'auctionName' => 'getAuctionName',
        'auctionNumber' => 'getAuctionNumber',
        'auctionBidNumber' => 'getAuctionBidNumber',
        'country' => 'getCountry',
        'creditScore' => 'getCreditScore',
        'rating' => 'getRating',
        'interest' => 'getInterest',
        'useOfLoan' => 'getUseOfLoan',
        'incomeVerificationStatus' => 'getIncomeVerificationStatus',
        'loanStatusCode' => 'getLoanStatusCode',
        'loanStatusActiveFrom' => 'getLoanStatusActiveFrom',
        'latestDebtManagementStageType' => 'getLatestDebtManagementStageType',
        'latestDebtManagementDate' => 'getLatestDebtManagementDate',
        'userName' => 'getUserName',
        'gender' => 'getGender',
        'dateOfBirth' => 'getDateOfBirth',
        'signedDate' => 'getSignedDate',
        'reScheduledOn' => 'getReScheduledOn',
        'debtOccuredOn' => 'getDebtOccuredOn',
        'debtOccuredOnForSecondary' => 'getDebtOccuredOnForSecondary',
        'nextPaymentNr' => 'getNextPaymentNr',
        'nextPaymentDate' => 'getNextPaymentDate',
        'nextPaymentSum' => 'getNextPaymentSum',
        'nrOfScheduledPayments' => 'getNrOfScheduledPayments',
        'lastPaymentDate' => 'getLastPaymentDate',
        'principalRepaid' => 'getPrincipalRepaid',
        'interestRepaid' => 'getInterestRepaid',
        'lateAmountPaid' => 'getLateAmountPaid',
        'principalRemaining' => 'getPrincipalRemaining',
        'principalLateAmount' => 'getPrincipalLateAmount',
        'interestLateAmount' => 'getInterestLateAmount',
        'penaltyLateAmount' => 'getPenaltyLateAmount',
        'lateAmountTotal' => 'getLateAmountTotal',
        'principalWriteOffAmount' => 'getPrincipalWriteOffAmount',
        'interestWriteOffAmount' => 'getInterestWriteOffAmount',
        'penaltyWriteOffAmount' => 'getPenaltyWriteOffAmount',
        'debtServicingCostMainAmount' => 'getDebtServicingCostMainAmount',
        'debtServicingCostInterestAmount' => 'getDebtServicingCostInterestAmount',
        'debtServicingCostPenaltyAmount' => 'getDebtServicingCostPenaltyAmount',
        'price' => 'getPrice',
        'fee' => 'getFee',
        'totalCost' => 'getTotalCost',
        'outstandingPayments' => 'getOutstandingPayments',
        'desiredDiscountRate' => 'getDesiredDiscountRate',
        'xirr' => 'getXirr',
        'listedOnDate' => 'getListedOnDate',
        'debtManagmentEvents' => 'getDebtManagmentEvents',
        'loanTransfers' => 'getLoanTransfers',
        'scheduledPayments' => 'getScheduledPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const USE_OF_LOAN_0 = 0;
    const USE_OF_LOAN_1 = 1;
    const USE_OF_LOAN_2 = 2;
    const USE_OF_LOAN_3 = 3;
    const USE_OF_LOAN_4 = 4;
    const USE_OF_LOAN_5 = 5;
    const USE_OF_LOAN_6 = 6;
    const USE_OF_LOAN_7 = 7;
    const USE_OF_LOAN_8 = 8;
    const USE_OF_LOAN_101 = 101;
    const USE_OF_LOAN_102 = 102;
    const USE_OF_LOAN_103 = 103;
    const USE_OF_LOAN_104 = 104;
    const USE_OF_LOAN_105 = 105;
    const USE_OF_LOAN_106 = 106;
    const USE_OF_LOAN_107 = 107;
    const USE_OF_LOAN_108 = 108;
    const USE_OF_LOAN_109 = 109;
    const USE_OF_LOAN_110 = 110;
    const USE_OF_LOAN_201 = 201;
    const USE_OF_LOAN_202 = 202;
    const USE_OF_LOAN_203 = 203;
    const USE_OF_LOAN_204 = 204;
    const USE_OF_LOAN_205 = 205;
    const USE_OF_LOAN_206 = 206;
    const USE_OF_LOAN_207 = 207;
    const USE_OF_LOAN_208 = 208;
    const USE_OF_LOAN_209 = 209;
    const USE_OF_LOAN_210 = 210;
    const USE_OF_LOAN_211 = 211;
    const USE_OF_LOAN_MINUS_1 = -1;
    const INCOME_VERIFICATION_STATUS_1 = 1;
    const INCOME_VERIFICATION_STATUS_2 = 2;
    const INCOME_VERIFICATION_STATUS_3 = 3;
    const INCOME_VERIFICATION_STATUS_4 = 4;
    const LATEST_DEBT_MANAGEMENT_STAGE_TYPE_1 = 1;
    const LATEST_DEBT_MANAGEMENT_STAGE_TYPE_2 = 2;
    const LATEST_DEBT_MANAGEMENT_STAGE_TYPE_3 = 3;
    const LATEST_DEBT_MANAGEMENT_STAGE_TYPE_MINUS_1 = -1;
    const GENDER_0 = 0;
    const GENDER_1 = 1;
    const GENDER_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseOfLoanAllowableValues()
    {
        return [
            self::USE_OF_LOAN_0,
            self::USE_OF_LOAN_1,
            self::USE_OF_LOAN_2,
            self::USE_OF_LOAN_3,
            self::USE_OF_LOAN_4,
            self::USE_OF_LOAN_5,
            self::USE_OF_LOAN_6,
            self::USE_OF_LOAN_7,
            self::USE_OF_LOAN_8,
            self::USE_OF_LOAN_101,
            self::USE_OF_LOAN_102,
            self::USE_OF_LOAN_103,
            self::USE_OF_LOAN_104,
            self::USE_OF_LOAN_105,
            self::USE_OF_LOAN_106,
            self::USE_OF_LOAN_107,
            self::USE_OF_LOAN_108,
            self::USE_OF_LOAN_109,
            self::USE_OF_LOAN_110,
            self::USE_OF_LOAN_201,
            self::USE_OF_LOAN_202,
            self::USE_OF_LOAN_203,
            self::USE_OF_LOAN_204,
            self::USE_OF_LOAN_205,
            self::USE_OF_LOAN_206,
            self::USE_OF_LOAN_207,
            self::USE_OF_LOAN_208,
            self::USE_OF_LOAN_209,
            self::USE_OF_LOAN_210,
            self::USE_OF_LOAN_211,
            self::USE_OF_LOAN_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncomeVerificationStatusAllowableValues()
    {
        return [
            self::INCOME_VERIFICATION_STATUS_1,
            self::INCOME_VERIFICATION_STATUS_2,
            self::INCOME_VERIFICATION_STATUS_3,
            self::INCOME_VERIFICATION_STATUS_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLatestDebtManagementStageTypeAllowableValues()
    {
        return [
            self::LATEST_DEBT_MANAGEMENT_STAGE_TYPE_1,
            self::LATEST_DEBT_MANAGEMENT_STAGE_TYPE_2,
            self::LATEST_DEBT_MANAGEMENT_STAGE_TYPE_3,
            self::LATEST_DEBT_MANAGEMENT_STAGE_TYPE_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_0,
            self::GENDER_1,
            self::GENDER_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['loanPartId'] = isset($data['loanPartId']) ? $data['loanPartId'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['auctionId'] = isset($data['auctionId']) ? $data['auctionId'] : null;
        $this->container['auctionName'] = isset($data['auctionName']) ? $data['auctionName'] : null;
        $this->container['auctionNumber'] = isset($data['auctionNumber']) ? $data['auctionNumber'] : null;
        $this->container['auctionBidNumber'] = isset($data['auctionBidNumber']) ? $data['auctionBidNumber'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['creditScore'] = isset($data['creditScore']) ? $data['creditScore'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['interest'] = isset($data['interest']) ? $data['interest'] : null;
        $this->container['useOfLoan'] = isset($data['useOfLoan']) ? $data['useOfLoan'] : null;
        $this->container['incomeVerificationStatus'] = isset($data['incomeVerificationStatus']) ? $data['incomeVerificationStatus'] : null;
        $this->container['loanStatusCode'] = isset($data['loanStatusCode']) ? $data['loanStatusCode'] : null;
        $this->container['loanStatusActiveFrom'] = isset($data['loanStatusActiveFrom']) ? $data['loanStatusActiveFrom'] : null;
        $this->container['latestDebtManagementStageType'] = isset($data['latestDebtManagementStageType']) ? $data['latestDebtManagementStageType'] : null;
        $this->container['latestDebtManagementDate'] = isset($data['latestDebtManagementDate']) ? $data['latestDebtManagementDate'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['signedDate'] = isset($data['signedDate']) ? $data['signedDate'] : null;
        $this->container['reScheduledOn'] = isset($data['reScheduledOn']) ? $data['reScheduledOn'] : null;
        $this->container['debtOccuredOn'] = isset($data['debtOccuredOn']) ? $data['debtOccuredOn'] : null;
        $this->container['debtOccuredOnForSecondary'] = isset($data['debtOccuredOnForSecondary']) ? $data['debtOccuredOnForSecondary'] : null;
        $this->container['nextPaymentNr'] = isset($data['nextPaymentNr']) ? $data['nextPaymentNr'] : null;
        $this->container['nextPaymentDate'] = isset($data['nextPaymentDate']) ? $data['nextPaymentDate'] : null;
        $this->container['nextPaymentSum'] = isset($data['nextPaymentSum']) ? $data['nextPaymentSum'] : null;
        $this->container['nrOfScheduledPayments'] = isset($data['nrOfScheduledPayments']) ? $data['nrOfScheduledPayments'] : null;
        $this->container['lastPaymentDate'] = isset($data['lastPaymentDate']) ? $data['lastPaymentDate'] : null;
        $this->container['principalRepaid'] = isset($data['principalRepaid']) ? $data['principalRepaid'] : null;
        $this->container['interestRepaid'] = isset($data['interestRepaid']) ? $data['interestRepaid'] : null;
        $this->container['lateAmountPaid'] = isset($data['lateAmountPaid']) ? $data['lateAmountPaid'] : null;
        $this->container['principalRemaining'] = isset($data['principalRemaining']) ? $data['principalRemaining'] : null;
        $this->container['principalLateAmount'] = isset($data['principalLateAmount']) ? $data['principalLateAmount'] : null;
        $this->container['interestLateAmount'] = isset($data['interestLateAmount']) ? $data['interestLateAmount'] : null;
        $this->container['penaltyLateAmount'] = isset($data['penaltyLateAmount']) ? $data['penaltyLateAmount'] : null;
        $this->container['lateAmountTotal'] = isset($data['lateAmountTotal']) ? $data['lateAmountTotal'] : null;
        $this->container['principalWriteOffAmount'] = isset($data['principalWriteOffAmount']) ? $data['principalWriteOffAmount'] : null;
        $this->container['interestWriteOffAmount'] = isset($data['interestWriteOffAmount']) ? $data['interestWriteOffAmount'] : null;
        $this->container['penaltyWriteOffAmount'] = isset($data['penaltyWriteOffAmount']) ? $data['penaltyWriteOffAmount'] : null;
        $this->container['debtServicingCostMainAmount'] = isset($data['debtServicingCostMainAmount']) ? $data['debtServicingCostMainAmount'] : null;
        $this->container['debtServicingCostInterestAmount'] = isset($data['debtServicingCostInterestAmount']) ? $data['debtServicingCostInterestAmount'] : null;
        $this->container['debtServicingCostPenaltyAmount'] = isset($data['debtServicingCostPenaltyAmount']) ? $data['debtServicingCostPenaltyAmount'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['totalCost'] = isset($data['totalCost']) ? $data['totalCost'] : null;
        $this->container['outstandingPayments'] = isset($data['outstandingPayments']) ? $data['outstandingPayments'] : null;
        $this->container['desiredDiscountRate'] = isset($data['desiredDiscountRate']) ? $data['desiredDiscountRate'] : null;
        $this->container['xirr'] = isset($data['xirr']) ? $data['xirr'] : null;
        $this->container['listedOnDate'] = isset($data['listedOnDate']) ? $data['listedOnDate'] : null;
        $this->container['debtManagmentEvents'] = isset($data['debtManagmentEvents']) ? $data['debtManagmentEvents'] : null;
        $this->container['loanTransfers'] = isset($data['loanTransfers']) ? $data['loanTransfers'] : null;
        $this->container['scheduledPayments'] = isset($data['scheduledPayments']) ? $data['scheduledPayments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($this->container['useOfLoan']) && !in_array($this->container['useOfLoan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'useOfLoan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIncomeVerificationStatusAllowableValues();
        if (!is_null($this->container['incomeVerificationStatus']) && !in_array($this->container['incomeVerificationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'incomeVerificationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLatestDebtManagementStageTypeAllowableValues();
        if (!is_null($this->container['latestDebtManagementStageType']) && !in_array($this->container['latestDebtManagementStageType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'latestDebtManagementStageType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Item unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets loanPartId
     *
     * @return string|null
     */
    public function getLoanPartId()
    {
        return $this->container['loanPartId'];
    }

    /**
     * Sets loanPartId
     *
     * @param string|null $loanPartId LoanPart unique identifier
     *
     * @return $this
     */
    public function setLoanPartId($loanPartId)
    {
        $this->container['loanPartId'] = $loanPartId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount Investment amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets auctionId
     *
     * @return string|null
     */
    public function getAuctionId()
    {
        return $this->container['auctionId'];
    }

    /**
     * Sets auctionId
     *
     * @param string|null $auctionId Auction unique identifier
     *
     * @return $this
     */
    public function setAuctionId($auctionId)
    {
        $this->container['auctionId'] = $auctionId;

        return $this;
    }

    /**
     * Gets auctionName
     *
     * @return string|null
     */
    public function getAuctionName()
    {
        return $this->container['auctionName'];
    }

    /**
     * Sets auctionName
     *
     * @param string|null $auctionName Auction name
     *
     * @return $this
     */
    public function setAuctionName($auctionName)
    {
        $this->container['auctionName'] = $auctionName;

        return $this;
    }

    /**
     * Gets auctionNumber
     *
     * @return int|null
     */
    public function getAuctionNumber()
    {
        return $this->container['auctionNumber'];
    }

    /**
     * Sets auctionNumber
     *
     * @param int|null $auctionNumber Auction number
     *
     * @return $this
     */
    public function setAuctionNumber($auctionNumber)
    {
        $this->container['auctionNumber'] = $auctionNumber;

        return $this;
    }

    /**
     * Gets auctionBidNumber
     *
     * @return int|null
     */
    public function getAuctionBidNumber()
    {
        return $this->container['auctionBidNumber'];
    }

    /**
     * Sets auctionBidNumber
     *
     * @param int|null $auctionBidNumber Auction bid number
     *
     * @return $this
     */
    public function setAuctionBidNumber($auctionBidNumber)
    {
        $this->container['auctionBidNumber'] = $auctionBidNumber;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Residency of the borrower
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets creditScore
     *
     * @return double|null
     */
    public function getCreditScore()
    {
        return $this->container['creditScore'];
    }

    /**
     * Sets creditScore
     *
     * @param double|null $creditScore <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>
     *
     * @return $this
     */
    public function setCreditScore($creditScore)
    {
        $this->container['creditScore'] = $creditScore;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string|null $rating Bondora Rating issued by the Rating model
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return double|null
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param double|null $interest Interest rate
     *
     * @return $this
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets useOfLoan
     *
     * @return int|null
     */
    public function getUseOfLoan()
    {
        return $this->container['useOfLoan'];
    }

    /**
     * Sets useOfLoan
     *
     * @param int|null $useOfLoan Use of loan
     *
     * @return $this
     */
    public function setUseOfLoan($useOfLoan)
    {
        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($useOfLoan) && !in_array($useOfLoan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'useOfLoan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['useOfLoan'] = $useOfLoan;

        return $this;
    }

    /**
     * Gets incomeVerificationStatus
     *
     * @return int|null
     */
    public function getIncomeVerificationStatus()
    {
        return $this->container['incomeVerificationStatus'];
    }

    /**
     * Sets incomeVerificationStatus
     *
     * @param int|null $incomeVerificationStatus Income verification type
     *
     * @return $this
     */
    public function setIncomeVerificationStatus($incomeVerificationStatus)
    {
        $allowedValues = $this->getIncomeVerificationStatusAllowableValues();
        if (!is_null($incomeVerificationStatus) && !in_array($incomeVerificationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'incomeVerificationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incomeVerificationStatus'] = $incomeVerificationStatus;

        return $this;
    }

    /**
     * Gets loanStatusCode
     *
     * @return int|null
     */
    public function getLoanStatusCode()
    {
        return $this->container['loanStatusCode'];
    }

    /**
     * Sets loanStatusCode
     *
     * @param int|null $loanStatusCode Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>
     *
     * @return $this
     */
    public function setLoanStatusCode($loanStatusCode)
    {
        $this->container['loanStatusCode'] = $loanStatusCode;

        return $this;
    }

    /**
     * Gets loanStatusActiveFrom
     *
     * @return \DateTime|null
     */
    public function getLoanStatusActiveFrom()
    {
        return $this->container['loanStatusActiveFrom'];
    }

    /**
     * Sets loanStatusActiveFrom
     *
     * @param \DateTime|null $loanStatusActiveFrom Loan status active from
     *
     * @return $this
     */
    public function setLoanStatusActiveFrom($loanStatusActiveFrom)
    {
        $this->container['loanStatusActiveFrom'] = $loanStatusActiveFrom;

        return $this;
    }

    /**
     * Gets latestDebtManagementStageType
     *
     * @return int|null
     */
    public function getLatestDebtManagementStageType()
    {
        return $this->container['latestDebtManagementStageType'];
    }

    /**
     * Sets latestDebtManagementStageType
     *
     * @param int|null $latestDebtManagementStageType Latest debt management stage type
     *
     * @return $this
     */
    public function setLatestDebtManagementStageType($latestDebtManagementStageType)
    {
        $allowedValues = $this->getLatestDebtManagementStageTypeAllowableValues();
        if (!is_null($latestDebtManagementStageType) && !in_array($latestDebtManagementStageType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'latestDebtManagementStageType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['latestDebtManagementStageType'] = $latestDebtManagementStageType;

        return $this;
    }

    /**
     * Gets latestDebtManagementDate
     *
     * @return \DateTime|null
     */
    public function getLatestDebtManagementDate()
    {
        return $this->container['latestDebtManagementDate'];
    }

    /**
     * Sets latestDebtManagementDate
     *
     * @param \DateTime|null $latestDebtManagementDate Latest debt management date
     *
     * @return $this
     */
    public function setLatestDebtManagementDate($latestDebtManagementDate)
    {
        $this->container['latestDebtManagementDate'] = $latestDebtManagementDate;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName Borrower's username
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int|null $gender Borrower's Gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime|null $dateOfBirth Borrower's date of birth
     *
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets signedDate
     *
     * @return \DateTime|null
     */
    public function getSignedDate()
    {
        return $this->container['signedDate'];
    }

    /**
     * Sets signedDate
     *
     * @param \DateTime|null $signedDate Loan issued date
     *
     * @return $this
     */
    public function setSignedDate($signedDate)
    {
        $this->container['signedDate'] = $signedDate;

        return $this;
    }

    /**
     * Gets reScheduledOn
     *
     * @return \DateTime|null
     */
    public function getReScheduledOn()
    {
        return $this->container['reScheduledOn'];
    }

    /**
     * Sets reScheduledOn
     *
     * @param \DateTime|null $reScheduledOn Last rescheduling date
     *
     * @return $this
     */
    public function setReScheduledOn($reScheduledOn)
    {
        $this->container['reScheduledOn'] = $reScheduledOn;

        return $this;
    }

    /**
     * Gets debtOccuredOn
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOn()
    {
        return $this->container['debtOccuredOn'];
    }

    /**
     * Sets debtOccuredOn
     *
     * @param \DateTime|null $debtOccuredOn Debt occured on date
     *
     * @return $this
     */
    public function setDebtOccuredOn($debtOccuredOn)
    {
        $this->container['debtOccuredOn'] = $debtOccuredOn;

        return $this;
    }

    /**
     * Gets debtOccuredOnForSecondary
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOnForSecondary()
    {
        return $this->container['debtOccuredOnForSecondary'];
    }

    /**
     * Sets debtOccuredOnForSecondary
     *
     * @param \DateTime|null $debtOccuredOnForSecondary Debt occured on date
     *
     * @return $this
     */
    public function setDebtOccuredOnForSecondary($debtOccuredOnForSecondary)
    {
        $this->container['debtOccuredOnForSecondary'] = $debtOccuredOnForSecondary;

        return $this;
    }

    /**
     * Gets nextPaymentNr
     *
     * @return int|null
     */
    public function getNextPaymentNr()
    {
        return $this->container['nextPaymentNr'];
    }

    /**
     * Sets nextPaymentNr
     *
     * @param int|null $nextPaymentNr Next scheduled payment number
     *
     * @return $this
     */
    public function setNextPaymentNr($nextPaymentNr)
    {
        $this->container['nextPaymentNr'] = $nextPaymentNr;

        return $this;
    }

    /**
     * Gets nextPaymentDate
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDate()
    {
        return $this->container['nextPaymentDate'];
    }

    /**
     * Sets nextPaymentDate
     *
     * @param \DateTime|null $nextPaymentDate Next scheduled payment date
     *
     * @return $this
     */
    public function setNextPaymentDate($nextPaymentDate)
    {
        $this->container['nextPaymentDate'] = $nextPaymentDate;

        return $this;
    }

    /**
     * Gets nextPaymentSum
     *
     * @return double|null
     */
    public function getNextPaymentSum()
    {
        return $this->container['nextPaymentSum'];
    }

    /**
     * Sets nextPaymentSum
     *
     * @param double|null $nextPaymentSum Next scheduled payment amount
     *
     * @return $this
     */
    public function setNextPaymentSum($nextPaymentSum)
    {
        $this->container['nextPaymentSum'] = $nextPaymentSum;

        return $this;
    }

    /**
     * Gets nrOfScheduledPayments
     *
     * @return int|null
     */
    public function getNrOfScheduledPayments()
    {
        return $this->container['nrOfScheduledPayments'];
    }

    /**
     * Sets nrOfScheduledPayments
     *
     * @param int|null $nrOfScheduledPayments Total number of scheduled payments
     *
     * @return $this
     */
    public function setNrOfScheduledPayments($nrOfScheduledPayments)
    {
        $this->container['nrOfScheduledPayments'] = $nrOfScheduledPayments;

        return $this;
    }

    /**
     * Gets lastPaymentDate
     *
     * @return \DateTime|null
     */
    public function getLastPaymentDate()
    {
        return $this->container['lastPaymentDate'];
    }

    /**
     * Sets lastPaymentDate
     *
     * @param \DateTime|null $lastPaymentDate Last payment date
     *
     * @return $this
     */
    public function setLastPaymentDate($lastPaymentDate)
    {
        $this->container['lastPaymentDate'] = $lastPaymentDate;

        return $this;
    }

    /**
     * Gets principalRepaid
     *
     * @return double|null
     */
    public function getPrincipalRepaid()
    {
        return $this->container['principalRepaid'];
    }

    /**
     * Sets principalRepaid
     *
     * @param double|null $principalRepaid Total principal repaid amount
     *
     * @return $this
     */
    public function setPrincipalRepaid($principalRepaid)
    {
        $this->container['principalRepaid'] = $principalRepaid;

        return $this;
    }

    /**
     * Gets interestRepaid
     *
     * @return double|null
     */
    public function getInterestRepaid()
    {
        return $this->container['interestRepaid'];
    }

    /**
     * Sets interestRepaid
     *
     * @param double|null $interestRepaid Total interest repaid amount
     *
     * @return $this
     */
    public function setInterestRepaid($interestRepaid)
    {
        $this->container['interestRepaid'] = $interestRepaid;

        return $this;
    }

    /**
     * Gets lateAmountPaid
     *
     * @return double|null
     */
    public function getLateAmountPaid()
    {
        return $this->container['lateAmountPaid'];
    }

    /**
     * Sets lateAmountPaid
     *
     * @param double|null $lateAmountPaid Total late charges paid amount
     *
     * @return $this
     */
    public function setLateAmountPaid($lateAmountPaid)
    {
        $this->container['lateAmountPaid'] = $lateAmountPaid;

        return $this;
    }

    /**
     * Gets principalRemaining
     *
     * @return double|null
     */
    public function getPrincipalRemaining()
    {
        return $this->container['principalRemaining'];
    }

    /**
     * Sets principalRemaining
     *
     * @param double|null $principalRemaining Remaining principal amount
     *
     * @return $this
     */
    public function setPrincipalRemaining($principalRemaining)
    {
        $this->container['principalRemaining'] = $principalRemaining;

        return $this;
    }

    /**
     * Gets principalLateAmount
     *
     * @return double|null
     */
    public function getPrincipalLateAmount()
    {
        return $this->container['principalLateAmount'];
    }

    /**
     * Sets principalLateAmount
     *
     * @param double|null $principalLateAmount Principal debt amount
     *
     * @return $this
     */
    public function setPrincipalLateAmount($principalLateAmount)
    {
        $this->container['principalLateAmount'] = $principalLateAmount;

        return $this;
    }

    /**
     * Gets interestLateAmount
     *
     * @return double|null
     */
    public function getInterestLateAmount()
    {
        return $this->container['interestLateAmount'];
    }

    /**
     * Sets interestLateAmount
     *
     * @param double|null $interestLateAmount Interest debt amount
     *
     * @return $this
     */
    public function setInterestLateAmount($interestLateAmount)
    {
        $this->container['interestLateAmount'] = $interestLateAmount;

        return $this;
    }

    /**
     * Gets penaltyLateAmount
     *
     * @return double|null
     */
    public function getPenaltyLateAmount()
    {
        return $this->container['penaltyLateAmount'];
    }

    /**
     * Sets penaltyLateAmount
     *
     * @param double|null $penaltyLateAmount Late charges debt amount
     *
     * @return $this
     */
    public function setPenaltyLateAmount($penaltyLateAmount)
    {
        $this->container['penaltyLateAmount'] = $penaltyLateAmount;

        return $this;
    }

    /**
     * Gets lateAmountTotal
     *
     * @return double|null
     */
    public function getLateAmountTotal()
    {
        return $this->container['lateAmountTotal'];
    }

    /**
     * Sets lateAmountTotal
     *
     * @param double|null $lateAmountTotal Late amount total
     *
     * @return $this
     */
    public function setLateAmountTotal($lateAmountTotal)
    {
        $this->container['lateAmountTotal'] = $lateAmountTotal;

        return $this;
    }

    /**
     * Gets principalWriteOffAmount
     *
     * @return double|null
     */
    public function getPrincipalWriteOffAmount()
    {
        return $this->container['principalWriteOffAmount'];
    }

    /**
     * Sets principalWriteOffAmount
     *
     * @param double|null $principalWriteOffAmount Total amount of principal written off
     *
     * @return $this
     */
    public function setPrincipalWriteOffAmount($principalWriteOffAmount)
    {
        $this->container['principalWriteOffAmount'] = $principalWriteOffAmount;

        return $this;
    }

    /**
     * Gets interestWriteOffAmount
     *
     * @return double|null
     */
    public function getInterestWriteOffAmount()
    {
        return $this->container['interestWriteOffAmount'];
    }

    /**
     * Sets interestWriteOffAmount
     *
     * @param double|null $interestWriteOffAmount Total amount of interest written off
     *
     * @return $this
     */
    public function setInterestWriteOffAmount($interestWriteOffAmount)
    {
        $this->container['interestWriteOffAmount'] = $interestWriteOffAmount;

        return $this;
    }

    /**
     * Gets penaltyWriteOffAmount
     *
     * @return double|null
     */
    public function getPenaltyWriteOffAmount()
    {
        return $this->container['penaltyWriteOffAmount'];
    }

    /**
     * Sets penaltyWriteOffAmount
     *
     * @param double|null $penaltyWriteOffAmount Total amount of penalty written off
     *
     * @return $this
     */
    public function setPenaltyWriteOffAmount($penaltyWriteOffAmount)
    {
        $this->container['penaltyWriteOffAmount'] = $penaltyWriteOffAmount;

        return $this;
    }

    /**
     * Gets debtServicingCostMainAmount
     *
     * @return double|null
     */
    public function getDebtServicingCostMainAmount()
    {
        return $this->container['debtServicingCostMainAmount'];
    }

    /**
     * Sets debtServicingCostMainAmount
     *
     * @param double|null $debtServicingCostMainAmount Total amount of principal debt servicing cost
     *
     * @return $this
     */
    public function setDebtServicingCostMainAmount($debtServicingCostMainAmount)
    {
        $this->container['debtServicingCostMainAmount'] = $debtServicingCostMainAmount;

        return $this;
    }

    /**
     * Gets debtServicingCostInterestAmount
     *
     * @return double|null
     */
    public function getDebtServicingCostInterestAmount()
    {
        return $this->container['debtServicingCostInterestAmount'];
    }

    /**
     * Sets debtServicingCostInterestAmount
     *
     * @param double|null $debtServicingCostInterestAmount Total amount of interest debt servicing cost
     *
     * @return $this
     */
    public function setDebtServicingCostInterestAmount($debtServicingCostInterestAmount)
    {
        $this->container['debtServicingCostInterestAmount'] = $debtServicingCostInterestAmount;

        return $this;
    }

    /**
     * Gets debtServicingCostPenaltyAmount
     *
     * @return double|null
     */
    public function getDebtServicingCostPenaltyAmount()
    {
        return $this->container['debtServicingCostPenaltyAmount'];
    }

    /**
     * Sets debtServicingCostPenaltyAmount
     *
     * @param double|null $debtServicingCostPenaltyAmount Total amount of penalty debt servicing cost
     *
     * @return $this
     */
    public function setDebtServicingCostPenaltyAmount($debtServicingCostPenaltyAmount)
    {
        $this->container['debtServicingCostPenaltyAmount'] = $debtServicingCostPenaltyAmount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double|null $price Outstanding principal balance +/- discount or mark-up
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return double|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param double|null $fee Secondary market purchase fee paid to Bondora
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets totalCost
     *
     * @return double|null
     */
    public function getTotalCost()
    {
        return $this->container['totalCost'];
    }

    /**
     * Sets totalCost
     *
     * @param double|null $totalCost Total amount paid for purchase
     *
     * @return $this
     */
    public function setTotalCost($totalCost)
    {
        $this->container['totalCost'] = $totalCost;

        return $this;
    }

    /**
     * Gets outstandingPayments
     *
     * @return double|null
     */
    public function getOutstandingPayments()
    {
        return $this->container['outstandingPayments'];
    }

    /**
     * Sets outstandingPayments
     *
     * @param double|null $outstandingPayments Total amount still to be repaid by the borrower. This includes the principal balance, accrued interest and late charges as well as any future scheduled interest payments
     *
     * @return $this
     */
    public function setOutstandingPayments($outstandingPayments)
    {
        $this->container['outstandingPayments'] = $outstandingPayments;

        return $this;
    }

    /**
     * Gets desiredDiscountRate
     *
     * @return double|null
     */
    public function getDesiredDiscountRate()
    {
        return $this->container['desiredDiscountRate'];
    }

    /**
     * Sets desiredDiscountRate
     *
     * @param double|null $desiredDiscountRate Discount rate percent
     *
     * @return $this
     */
    public function setDesiredDiscountRate($desiredDiscountRate)
    {
        $this->container['desiredDiscountRate'] = $desiredDiscountRate;

        return $this;
    }

    /**
     * Gets xirr
     *
     * @return double|null
     */
    public function getXirr()
    {
        return $this->container['xirr'];
    }

    /**
     * Sets xirr
     *
     * @param double|null $xirr XIRR (extended internal rate of return) is a methodology to calculate the net return using the loan issued date and amount,               loan repayment dates and amounts and the principal balance according to the original repayment date.               All overdue principal payments are written off immediately. No provisions for future losses are made and only received (not accrued or scheduled)               interest payments are taken into account.
     *
     * @return $this
     */
    public function setXirr($xirr)
    {
        $this->container['xirr'] = $xirr;

        return $this;
    }

    /**
     * Gets listedOnDate
     *
     * @return \DateTime|null
     */
    public function getListedOnDate()
    {
        return $this->container['listedOnDate'];
    }

    /**
     * Sets listedOnDate
     *
     * @param \DateTime|null $listedOnDate Date when item was published
     *
     * @return $this
     */
    public function setListedOnDate($listedOnDate)
    {
        $this->container['listedOnDate'] = $listedOnDate;

        return $this;
    }

    /**
     * Gets debtManagmentEvents
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\DebtManagementEvent[]|null
     */
    public function getDebtManagmentEvents()
    {
        return $this->container['debtManagmentEvents'];
    }

    /**
     * Sets debtManagmentEvents
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\DebtManagementEvent[]|null $debtManagmentEvents Webhook only:              Debt managment event collection
     *
     * @return $this
     */
    public function setDebtManagmentEvents($debtManagmentEvents)
    {
        $this->container['debtManagmentEvents'] = $debtManagmentEvents;

        return $this;
    }

    /**
     * Gets loanTransfers
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\LoanTransfer[]|null
     */
    public function getLoanTransfers()
    {
        return $this->container['loanTransfers'];
    }

    /**
     * Sets loanTransfers
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\LoanTransfer[]|null $loanTransfers Webhook only:              Collection of all loan payments
     *
     * @return $this
     */
    public function setLoanTransfers($loanTransfers)
    {
        $this->container['loanTransfers'] = $loanTransfers;

        return $this;
    }

    /**
     * Gets scheduledPayments
     *
     * @return \CedricZiel\OpenAPI\BondoraPHP\Model\ScheduledPayment[]|null
     */
    public function getScheduledPayments()
    {
        return $this->container['scheduledPayments'];
    }

    /**
     * Sets scheduledPayments
     *
     * @param \CedricZiel\OpenAPI\BondoraPHP\Model\ScheduledPayment[]|null $scheduledPayments Webhook only:              Collection of all loan scheduled payments.               Contains previous period values before rescheduling was made
     *
     * @return $this
     */
    public function setScheduledPayments($scheduledPayments)
    {
        $this->container['scheduledPayments'] = $scheduledPayments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


