<?php
/**
 * PublicDatasetItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * PublicDatasetItem Class Doc Comment
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PublicDatasetItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PublicDatasetItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loanId' => 'string',
        'loanNumber' => 'int',
        'listedOnUTC' => '\DateTime',
        'biddingStartedOn' => '\DateTime',
        'bidsPortfolioManager' => 'double',
        'bidsApi' => 'double',
        'bidsManual' => 'double',
        'userName' => 'string',
        'newCreditCustomer' => 'bool',
        'loanApplicationStartedDate' => '\DateTime',
        'loanDate' => '\DateTime',
        'contractEndDate' => '\DateTime',
        'firstPaymentDate' => '\DateTime',
        'maturityDateOriginal' => '\DateTime',
        'maturityDateLast' => '\DateTime',
        'applicationSignedHour' => 'int',
        'applicationSignedWeekday' => 'int',
        'verificationType' => 'int',
        'languageCode' => 'int',
        'age' => 'int',
        'dateOfBirth' => '\DateTime',
        'gender' => 'int',
        'country' => 'string',
        'county' => 'string',
        'city' => 'string',
        'appliedAmount' => 'double',
        'amount' => 'double',
        'interest' => 'double',
        'loanDuration' => 'int',
        'monthlyPayment' => 'int',
        'useOfLoan' => 'int',
        'education' => 'int',
        'maritalStatus' => 'int',
        'nrOfDependants' => 'string',
        'employmentStatus' => 'int',
        'employmentDurationCurrentEmployer' => 'string',
        'employmentPosition' => 'string',
        'workExperience' => 'string',
        'occupationArea' => 'int',
        'homeOwnershipType' => 'int',
        'incomeFromPrincipalEmployer' => 'double',
        'incomeFromPension' => 'double',
        'incomeFromFamilyAllowance' => 'double',
        'incomeFromSocialWelfare' => 'double',
        'incomeFromLeavePay' => 'double',
        'incomeFromChildSupport' => 'double',
        'incomeOther' => 'double',
        'incomeTotal' => 'double',
        'existingLiabilities' => 'int',
        'refinanceLiabilities' => 'int',
        'liabilitiesTotal' => 'double',
        'debtToIncome' => 'double',
        'freeCash' => 'double',
        'monthlyPaymentDay' => 'int',
        'activeScheduleFirstPaymentReached' => 'bool',
        'plannedPrincipalTillDate' => 'double',
        'plannedInterestTillDate' => 'double',
        'lastPaymentOn' => '\DateTime',
        'currentDebtDaysPrimary' => 'int',
        'debtOccuredOn' => '\DateTime',
        'currentDebtDaysSecondary' => 'int',
        'debtOccuredOnForSecondary' => '\DateTime',
        'expectedLoss' => 'double',
        'lossGivenDefault' => 'double',
        'expectedReturn' => 'double',
        'probabilityOfDefault' => 'double',
        'defaultDate' => '\DateTime',
        'principalOverdueBySchedule' => 'double',
        'plannedPrincipalPostDefault' => 'double',
        'plannedInterestPostDefault' => 'double',
        'eAD1' => 'double',
        'eAD2' => 'double',
        'principalRecovery' => 'double',
        'interestRecovery' => 'double',
        'recoveryStage' => 'int',
        'stageActiveSince' => '\DateTime',
        'modelVersion' => 'int',
        'rating' => 'string',
        'eLV0' => 'double',
        'ratingV0' => 'string',
        'eLV1' => 'double',
        'ratingV1' => 'string',
        'eLV2' => 'double',
        'ratingV2' => 'string',
        'loanCancelled' => 'bool',
        'status' => 'string',
        'restructured' => 'bool',
        'activeLateCategory' => 'string',
        'worseLateCategory' => 'string',
        'creditScoreEsMicroL' => 'string',
        'creditScoreEsEquifaxRisk' => 'string',
        'creditScoreFiAsiakasTietoRiskGrade' => 'string',
        'creditScoreEeMini' => 'string',
        'principalPaymentsMade' => 'double',
        'interestAndPenaltyPaymentsMade' => 'double',
        'principalWriteOffs' => 'double',
        'interestAndPenaltyWriteOffs' => 'double',
        'principalDebtServicingCost' => 'double',
        'interestAndPenaltyDebtServicingCost' => 'double',
        'principalBalance' => 'double',
        'interestAndPenaltyBalance' => 'double',
        'noOfPreviousLoansBeforeLoan' => 'int',
        'amountOfPreviousLoansBeforeLoan' => 'double',
        'previousRepaymentsBeforeLoan' => 'double',
        'previousEarlyRepaymentsBeforeLoan' => 'double',
        'previousEarlyRepaymentsCountBeforeLoan' => 'int',
        'gracePeriodStart' => '\DateTime',
        'gracePeriodEnd' => '\DateTime',
        'nextPaymentDate' => '\DateTime',
        'nextPaymentNr' => 'int',
        'nrOfScheduledPayments' => 'int',
        'reScheduledOn' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'loanId' => null,
        'loanNumber' => 'int32',
        'listedOnUTC' => 'date-time',
        'biddingStartedOn' => 'date-time',
        'bidsPortfolioManager' => 'double',
        'bidsApi' => 'double',
        'bidsManual' => 'double',
        'userName' => null,
        'newCreditCustomer' => null,
        'loanApplicationStartedDate' => 'date-time',
        'loanDate' => 'date-time',
        'contractEndDate' => 'date-time',
        'firstPaymentDate' => 'date-time',
        'maturityDateOriginal' => 'date-time',
        'maturityDateLast' => 'date-time',
        'applicationSignedHour' => 'int32',
        'applicationSignedWeekday' => 'int32',
        'verificationType' => 'int32',
        'languageCode' => 'int32',
        'age' => 'int32',
        'dateOfBirth' => 'date-time',
        'gender' => 'int32',
        'country' => null,
        'county' => null,
        'city' => null,
        'appliedAmount' => 'double',
        'amount' => 'double',
        'interest' => 'double',
        'loanDuration' => 'int32',
        'monthlyPayment' => 'int32',
        'useOfLoan' => 'int32',
        'education' => 'int32',
        'maritalStatus' => 'int32',
        'nrOfDependants' => null,
        'employmentStatus' => 'int32',
        'employmentDurationCurrentEmployer' => null,
        'employmentPosition' => null,
        'workExperience' => null,
        'occupationArea' => 'int32',
        'homeOwnershipType' => 'int32',
        'incomeFromPrincipalEmployer' => 'double',
        'incomeFromPension' => 'double',
        'incomeFromFamilyAllowance' => 'double',
        'incomeFromSocialWelfare' => 'double',
        'incomeFromLeavePay' => 'double',
        'incomeFromChildSupport' => 'double',
        'incomeOther' => 'double',
        'incomeTotal' => 'double',
        'existingLiabilities' => 'int32',
        'refinanceLiabilities' => 'int32',
        'liabilitiesTotal' => 'double',
        'debtToIncome' => 'double',
        'freeCash' => 'double',
        'monthlyPaymentDay' => 'int32',
        'activeScheduleFirstPaymentReached' => null,
        'plannedPrincipalTillDate' => 'double',
        'plannedInterestTillDate' => 'double',
        'lastPaymentOn' => 'date-time',
        'currentDebtDaysPrimary' => 'int32',
        'debtOccuredOn' => 'date-time',
        'currentDebtDaysSecondary' => 'int32',
        'debtOccuredOnForSecondary' => 'date-time',
        'expectedLoss' => 'double',
        'lossGivenDefault' => 'double',
        'expectedReturn' => 'double',
        'probabilityOfDefault' => 'double',
        'defaultDate' => 'date-time',
        'principalOverdueBySchedule' => 'double',
        'plannedPrincipalPostDefault' => 'double',
        'plannedInterestPostDefault' => 'double',
        'eAD1' => 'double',
        'eAD2' => 'double',
        'principalRecovery' => 'double',
        'interestRecovery' => 'double',
        'recoveryStage' => 'int32',
        'stageActiveSince' => 'date-time',
        'modelVersion' => 'int32',
        'rating' => null,
        'eLV0' => 'double',
        'ratingV0' => null,
        'eLV1' => 'double',
        'ratingV1' => null,
        'eLV2' => 'double',
        'ratingV2' => null,
        'loanCancelled' => null,
        'status' => null,
        'restructured' => null,
        'activeLateCategory' => null,
        'worseLateCategory' => null,
        'creditScoreEsMicroL' => null,
        'creditScoreEsEquifaxRisk' => null,
        'creditScoreFiAsiakasTietoRiskGrade' => null,
        'creditScoreEeMini' => null,
        'principalPaymentsMade' => 'double',
        'interestAndPenaltyPaymentsMade' => 'double',
        'principalWriteOffs' => 'double',
        'interestAndPenaltyWriteOffs' => 'double',
        'principalDebtServicingCost' => 'double',
        'interestAndPenaltyDebtServicingCost' => 'double',
        'principalBalance' => 'double',
        'interestAndPenaltyBalance' => 'double',
        'noOfPreviousLoansBeforeLoan' => 'int32',
        'amountOfPreviousLoansBeforeLoan' => 'double',
        'previousRepaymentsBeforeLoan' => 'double',
        'previousEarlyRepaymentsBeforeLoan' => 'double',
        'previousEarlyRepaymentsCountBeforeLoan' => 'int32',
        'gracePeriodStart' => 'date-time',
        'gracePeriodEnd' => 'date-time',
        'nextPaymentDate' => 'date-time',
        'nextPaymentNr' => 'int32',
        'nrOfScheduledPayments' => 'int32',
        'reScheduledOn' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loanId' => 'LoanId',
        'loanNumber' => 'LoanNumber',
        'listedOnUTC' => 'ListedOnUTC',
        'biddingStartedOn' => 'BiddingStartedOn',
        'bidsPortfolioManager' => 'BidsPortfolioManager',
        'bidsApi' => 'BidsApi',
        'bidsManual' => 'BidsManual',
        'userName' => 'UserName',
        'newCreditCustomer' => 'NewCreditCustomer',
        'loanApplicationStartedDate' => 'LoanApplicationStartedDate',
        'loanDate' => 'LoanDate',
        'contractEndDate' => 'ContractEndDate',
        'firstPaymentDate' => 'FirstPaymentDate',
        'maturityDateOriginal' => 'MaturityDate_Original',
        'maturityDateLast' => 'MaturityDate_Last',
        'applicationSignedHour' => 'ApplicationSignedHour',
        'applicationSignedWeekday' => 'ApplicationSignedWeekday',
        'verificationType' => 'VerificationType',
        'languageCode' => 'LanguageCode',
        'age' => 'Age',
        'dateOfBirth' => 'DateOfBirth',
        'gender' => 'Gender',
        'country' => 'Country',
        'county' => 'County',
        'city' => 'City',
        'appliedAmount' => 'AppliedAmount',
        'amount' => 'Amount',
        'interest' => 'Interest',
        'loanDuration' => 'LoanDuration',
        'monthlyPayment' => 'MonthlyPayment',
        'useOfLoan' => 'UseOfLoan',
        'education' => 'Education',
        'maritalStatus' => 'MaritalStatus',
        'nrOfDependants' => 'NrOfDependants',
        'employmentStatus' => 'EmploymentStatus',
        'employmentDurationCurrentEmployer' => 'EmploymentDurationCurrentEmployer',
        'employmentPosition' => 'EmploymentPosition',
        'workExperience' => 'WorkExperience',
        'occupationArea' => 'OccupationArea',
        'homeOwnershipType' => 'HomeOwnershipType',
        'incomeFromPrincipalEmployer' => 'IncomeFromPrincipalEmployer',
        'incomeFromPension' => 'IncomeFromPension',
        'incomeFromFamilyAllowance' => 'IncomeFromFamilyAllowance',
        'incomeFromSocialWelfare' => 'IncomeFromSocialWelfare',
        'incomeFromLeavePay' => 'IncomeFromLeavePay',
        'incomeFromChildSupport' => 'IncomeFromChildSupport',
        'incomeOther' => 'IncomeOther',
        'incomeTotal' => 'IncomeTotal',
        'existingLiabilities' => 'ExistingLiabilities',
        'refinanceLiabilities' => 'RefinanceLiabilities',
        'liabilitiesTotal' => 'LiabilitiesTotal',
        'debtToIncome' => 'DebtToIncome',
        'freeCash' => 'FreeCash',
        'monthlyPaymentDay' => 'MonthlyPaymentDay',
        'activeScheduleFirstPaymentReached' => 'ActiveScheduleFirstPaymentReached',
        'plannedPrincipalTillDate' => 'PlannedPrincipalTillDate',
        'plannedInterestTillDate' => 'PlannedInterestTillDate',
        'lastPaymentOn' => 'LastPaymentOn',
        'currentDebtDaysPrimary' => 'CurrentDebtDaysPrimary',
        'debtOccuredOn' => 'DebtOccuredOn',
        'currentDebtDaysSecondary' => 'CurrentDebtDaysSecondary',
        'debtOccuredOnForSecondary' => 'DebtOccuredOnForSecondary',
        'expectedLoss' => 'ExpectedLoss',
        'lossGivenDefault' => 'LossGivenDefault',
        'expectedReturn' => 'ExpectedReturn',
        'probabilityOfDefault' => 'ProbabilityOfDefault',
        'defaultDate' => 'DefaultDate',
        'principalOverdueBySchedule' => 'PrincipalOverdueBySchedule',
        'plannedPrincipalPostDefault' => 'PlannedPrincipalPostDefault',
        'plannedInterestPostDefault' => 'PlannedInterestPostDefault',
        'eAD1' => 'EAD1',
        'eAD2' => 'EAD2',
        'principalRecovery' => 'PrincipalRecovery',
        'interestRecovery' => 'InterestRecovery',
        'recoveryStage' => 'RecoveryStage',
        'stageActiveSince' => 'StageActiveSince',
        'modelVersion' => 'ModelVersion',
        'rating' => 'Rating',
        'eLV0' => 'EL_V0',
        'ratingV0' => 'Rating_V0',
        'eLV1' => 'EL_V1',
        'ratingV1' => 'Rating_V1',
        'eLV2' => 'EL_V2',
        'ratingV2' => 'Rating_V2',
        'loanCancelled' => 'LoanCancelled',
        'status' => 'Status',
        'restructured' => 'Restructured',
        'activeLateCategory' => 'ActiveLateCategory',
        'worseLateCategory' => 'WorseLateCategory',
        'creditScoreEsMicroL' => 'CreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'CreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'CreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'CreditScoreEeMini',
        'principalPaymentsMade' => 'PrincipalPaymentsMade',
        'interestAndPenaltyPaymentsMade' => 'InterestAndPenaltyPaymentsMade',
        'principalWriteOffs' => 'PrincipalWriteOffs',
        'interestAndPenaltyWriteOffs' => 'InterestAndPenaltyWriteOffs',
        'principalDebtServicingCost' => 'PrincipalDebtServicingCost',
        'interestAndPenaltyDebtServicingCost' => 'InterestAndPenaltyDebtServicingCost',
        'principalBalance' => 'PrincipalBalance',
        'interestAndPenaltyBalance' => 'InterestAndPenaltyBalance',
        'noOfPreviousLoansBeforeLoan' => 'NoOfPreviousLoansBeforeLoan',
        'amountOfPreviousLoansBeforeLoan' => 'AmountOfPreviousLoansBeforeLoan',
        'previousRepaymentsBeforeLoan' => 'PreviousRepaymentsBeforeLoan',
        'previousEarlyRepaymentsBeforeLoan' => 'PreviousEarlyRepaymentsBeforeLoan',
        'previousEarlyRepaymentsCountBeforeLoan' => 'PreviousEarlyRepaymentsCountBeforeLoan',
        'gracePeriodStart' => 'GracePeriodStart',
        'gracePeriodEnd' => 'GracePeriodEnd',
        'nextPaymentDate' => 'NextPaymentDate',
        'nextPaymentNr' => 'NextPaymentNr',
        'nrOfScheduledPayments' => 'NrOfScheduledPayments',
        'reScheduledOn' => 'ReScheduledOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loanId' => 'setLoanId',
        'loanNumber' => 'setLoanNumber',
        'listedOnUTC' => 'setListedOnUTC',
        'biddingStartedOn' => 'setBiddingStartedOn',
        'bidsPortfolioManager' => 'setBidsPortfolioManager',
        'bidsApi' => 'setBidsApi',
        'bidsManual' => 'setBidsManual',
        'userName' => 'setUserName',
        'newCreditCustomer' => 'setNewCreditCustomer',
        'loanApplicationStartedDate' => 'setLoanApplicationStartedDate',
        'loanDate' => 'setLoanDate',
        'contractEndDate' => 'setContractEndDate',
        'firstPaymentDate' => 'setFirstPaymentDate',
        'maturityDateOriginal' => 'setMaturityDateOriginal',
        'maturityDateLast' => 'setMaturityDateLast',
        'applicationSignedHour' => 'setApplicationSignedHour',
        'applicationSignedWeekday' => 'setApplicationSignedWeekday',
        'verificationType' => 'setVerificationType',
        'languageCode' => 'setLanguageCode',
        'age' => 'setAge',
        'dateOfBirth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'country' => 'setCountry',
        'county' => 'setCounty',
        'city' => 'setCity',
        'appliedAmount' => 'setAppliedAmount',
        'amount' => 'setAmount',
        'interest' => 'setInterest',
        'loanDuration' => 'setLoanDuration',
        'monthlyPayment' => 'setMonthlyPayment',
        'useOfLoan' => 'setUseOfLoan',
        'education' => 'setEducation',
        'maritalStatus' => 'setMaritalStatus',
        'nrOfDependants' => 'setNrOfDependants',
        'employmentStatus' => 'setEmploymentStatus',
        'employmentDurationCurrentEmployer' => 'setEmploymentDurationCurrentEmployer',
        'employmentPosition' => 'setEmploymentPosition',
        'workExperience' => 'setWorkExperience',
        'occupationArea' => 'setOccupationArea',
        'homeOwnershipType' => 'setHomeOwnershipType',
        'incomeFromPrincipalEmployer' => 'setIncomeFromPrincipalEmployer',
        'incomeFromPension' => 'setIncomeFromPension',
        'incomeFromFamilyAllowance' => 'setIncomeFromFamilyAllowance',
        'incomeFromSocialWelfare' => 'setIncomeFromSocialWelfare',
        'incomeFromLeavePay' => 'setIncomeFromLeavePay',
        'incomeFromChildSupport' => 'setIncomeFromChildSupport',
        'incomeOther' => 'setIncomeOther',
        'incomeTotal' => 'setIncomeTotal',
        'existingLiabilities' => 'setExistingLiabilities',
        'refinanceLiabilities' => 'setRefinanceLiabilities',
        'liabilitiesTotal' => 'setLiabilitiesTotal',
        'debtToIncome' => 'setDebtToIncome',
        'freeCash' => 'setFreeCash',
        'monthlyPaymentDay' => 'setMonthlyPaymentDay',
        'activeScheduleFirstPaymentReached' => 'setActiveScheduleFirstPaymentReached',
        'plannedPrincipalTillDate' => 'setPlannedPrincipalTillDate',
        'plannedInterestTillDate' => 'setPlannedInterestTillDate',
        'lastPaymentOn' => 'setLastPaymentOn',
        'currentDebtDaysPrimary' => 'setCurrentDebtDaysPrimary',
        'debtOccuredOn' => 'setDebtOccuredOn',
        'currentDebtDaysSecondary' => 'setCurrentDebtDaysSecondary',
        'debtOccuredOnForSecondary' => 'setDebtOccuredOnForSecondary',
        'expectedLoss' => 'setExpectedLoss',
        'lossGivenDefault' => 'setLossGivenDefault',
        'expectedReturn' => 'setExpectedReturn',
        'probabilityOfDefault' => 'setProbabilityOfDefault',
        'defaultDate' => 'setDefaultDate',
        'principalOverdueBySchedule' => 'setPrincipalOverdueBySchedule',
        'plannedPrincipalPostDefault' => 'setPlannedPrincipalPostDefault',
        'plannedInterestPostDefault' => 'setPlannedInterestPostDefault',
        'eAD1' => 'setEAD1',
        'eAD2' => 'setEAD2',
        'principalRecovery' => 'setPrincipalRecovery',
        'interestRecovery' => 'setInterestRecovery',
        'recoveryStage' => 'setRecoveryStage',
        'stageActiveSince' => 'setStageActiveSince',
        'modelVersion' => 'setModelVersion',
        'rating' => 'setRating',
        'eLV0' => 'setELV0',
        'ratingV0' => 'setRatingV0',
        'eLV1' => 'setELV1',
        'ratingV1' => 'setRatingV1',
        'eLV2' => 'setELV2',
        'ratingV2' => 'setRatingV2',
        'loanCancelled' => 'setLoanCancelled',
        'status' => 'setStatus',
        'restructured' => 'setRestructured',
        'activeLateCategory' => 'setActiveLateCategory',
        'worseLateCategory' => 'setWorseLateCategory',
        'creditScoreEsMicroL' => 'setCreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'setCreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'setCreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'setCreditScoreEeMini',
        'principalPaymentsMade' => 'setPrincipalPaymentsMade',
        'interestAndPenaltyPaymentsMade' => 'setInterestAndPenaltyPaymentsMade',
        'principalWriteOffs' => 'setPrincipalWriteOffs',
        'interestAndPenaltyWriteOffs' => 'setInterestAndPenaltyWriteOffs',
        'principalDebtServicingCost' => 'setPrincipalDebtServicingCost',
        'interestAndPenaltyDebtServicingCost' => 'setInterestAndPenaltyDebtServicingCost',
        'principalBalance' => 'setPrincipalBalance',
        'interestAndPenaltyBalance' => 'setInterestAndPenaltyBalance',
        'noOfPreviousLoansBeforeLoan' => 'setNoOfPreviousLoansBeforeLoan',
        'amountOfPreviousLoansBeforeLoan' => 'setAmountOfPreviousLoansBeforeLoan',
        'previousRepaymentsBeforeLoan' => 'setPreviousRepaymentsBeforeLoan',
        'previousEarlyRepaymentsBeforeLoan' => 'setPreviousEarlyRepaymentsBeforeLoan',
        'previousEarlyRepaymentsCountBeforeLoan' => 'setPreviousEarlyRepaymentsCountBeforeLoan',
        'gracePeriodStart' => 'setGracePeriodStart',
        'gracePeriodEnd' => 'setGracePeriodEnd',
        'nextPaymentDate' => 'setNextPaymentDate',
        'nextPaymentNr' => 'setNextPaymentNr',
        'nrOfScheduledPayments' => 'setNrOfScheduledPayments',
        'reScheduledOn' => 'setReScheduledOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loanId' => 'getLoanId',
        'loanNumber' => 'getLoanNumber',
        'listedOnUTC' => 'getListedOnUTC',
        'biddingStartedOn' => 'getBiddingStartedOn',
        'bidsPortfolioManager' => 'getBidsPortfolioManager',
        'bidsApi' => 'getBidsApi',
        'bidsManual' => 'getBidsManual',
        'userName' => 'getUserName',
        'newCreditCustomer' => 'getNewCreditCustomer',
        'loanApplicationStartedDate' => 'getLoanApplicationStartedDate',
        'loanDate' => 'getLoanDate',
        'contractEndDate' => 'getContractEndDate',
        'firstPaymentDate' => 'getFirstPaymentDate',
        'maturityDateOriginal' => 'getMaturityDateOriginal',
        'maturityDateLast' => 'getMaturityDateLast',
        'applicationSignedHour' => 'getApplicationSignedHour',
        'applicationSignedWeekday' => 'getApplicationSignedWeekday',
        'verificationType' => 'getVerificationType',
        'languageCode' => 'getLanguageCode',
        'age' => 'getAge',
        'dateOfBirth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'country' => 'getCountry',
        'county' => 'getCounty',
        'city' => 'getCity',
        'appliedAmount' => 'getAppliedAmount',
        'amount' => 'getAmount',
        'interest' => 'getInterest',
        'loanDuration' => 'getLoanDuration',
        'monthlyPayment' => 'getMonthlyPayment',
        'useOfLoan' => 'getUseOfLoan',
        'education' => 'getEducation',
        'maritalStatus' => 'getMaritalStatus',
        'nrOfDependants' => 'getNrOfDependants',
        'employmentStatus' => 'getEmploymentStatus',
        'employmentDurationCurrentEmployer' => 'getEmploymentDurationCurrentEmployer',
        'employmentPosition' => 'getEmploymentPosition',
        'workExperience' => 'getWorkExperience',
        'occupationArea' => 'getOccupationArea',
        'homeOwnershipType' => 'getHomeOwnershipType',
        'incomeFromPrincipalEmployer' => 'getIncomeFromPrincipalEmployer',
        'incomeFromPension' => 'getIncomeFromPension',
        'incomeFromFamilyAllowance' => 'getIncomeFromFamilyAllowance',
        'incomeFromSocialWelfare' => 'getIncomeFromSocialWelfare',
        'incomeFromLeavePay' => 'getIncomeFromLeavePay',
        'incomeFromChildSupport' => 'getIncomeFromChildSupport',
        'incomeOther' => 'getIncomeOther',
        'incomeTotal' => 'getIncomeTotal',
        'existingLiabilities' => 'getExistingLiabilities',
        'refinanceLiabilities' => 'getRefinanceLiabilities',
        'liabilitiesTotal' => 'getLiabilitiesTotal',
        'debtToIncome' => 'getDebtToIncome',
        'freeCash' => 'getFreeCash',
        'monthlyPaymentDay' => 'getMonthlyPaymentDay',
        'activeScheduleFirstPaymentReached' => 'getActiveScheduleFirstPaymentReached',
        'plannedPrincipalTillDate' => 'getPlannedPrincipalTillDate',
        'plannedInterestTillDate' => 'getPlannedInterestTillDate',
        'lastPaymentOn' => 'getLastPaymentOn',
        'currentDebtDaysPrimary' => 'getCurrentDebtDaysPrimary',
        'debtOccuredOn' => 'getDebtOccuredOn',
        'currentDebtDaysSecondary' => 'getCurrentDebtDaysSecondary',
        'debtOccuredOnForSecondary' => 'getDebtOccuredOnForSecondary',
        'expectedLoss' => 'getExpectedLoss',
        'lossGivenDefault' => 'getLossGivenDefault',
        'expectedReturn' => 'getExpectedReturn',
        'probabilityOfDefault' => 'getProbabilityOfDefault',
        'defaultDate' => 'getDefaultDate',
        'principalOverdueBySchedule' => 'getPrincipalOverdueBySchedule',
        'plannedPrincipalPostDefault' => 'getPlannedPrincipalPostDefault',
        'plannedInterestPostDefault' => 'getPlannedInterestPostDefault',
        'eAD1' => 'getEAD1',
        'eAD2' => 'getEAD2',
        'principalRecovery' => 'getPrincipalRecovery',
        'interestRecovery' => 'getInterestRecovery',
        'recoveryStage' => 'getRecoveryStage',
        'stageActiveSince' => 'getStageActiveSince',
        'modelVersion' => 'getModelVersion',
        'rating' => 'getRating',
        'eLV0' => 'getELV0',
        'ratingV0' => 'getRatingV0',
        'eLV1' => 'getELV1',
        'ratingV1' => 'getRatingV1',
        'eLV2' => 'getELV2',
        'ratingV2' => 'getRatingV2',
        'loanCancelled' => 'getLoanCancelled',
        'status' => 'getStatus',
        'restructured' => 'getRestructured',
        'activeLateCategory' => 'getActiveLateCategory',
        'worseLateCategory' => 'getWorseLateCategory',
        'creditScoreEsMicroL' => 'getCreditScoreEsMicroL',
        'creditScoreEsEquifaxRisk' => 'getCreditScoreEsEquifaxRisk',
        'creditScoreFiAsiakasTietoRiskGrade' => 'getCreditScoreFiAsiakasTietoRiskGrade',
        'creditScoreEeMini' => 'getCreditScoreEeMini',
        'principalPaymentsMade' => 'getPrincipalPaymentsMade',
        'interestAndPenaltyPaymentsMade' => 'getInterestAndPenaltyPaymentsMade',
        'principalWriteOffs' => 'getPrincipalWriteOffs',
        'interestAndPenaltyWriteOffs' => 'getInterestAndPenaltyWriteOffs',
        'principalDebtServicingCost' => 'getPrincipalDebtServicingCost',
        'interestAndPenaltyDebtServicingCost' => 'getInterestAndPenaltyDebtServicingCost',
        'principalBalance' => 'getPrincipalBalance',
        'interestAndPenaltyBalance' => 'getInterestAndPenaltyBalance',
        'noOfPreviousLoansBeforeLoan' => 'getNoOfPreviousLoansBeforeLoan',
        'amountOfPreviousLoansBeforeLoan' => 'getAmountOfPreviousLoansBeforeLoan',
        'previousRepaymentsBeforeLoan' => 'getPreviousRepaymentsBeforeLoan',
        'previousEarlyRepaymentsBeforeLoan' => 'getPreviousEarlyRepaymentsBeforeLoan',
        'previousEarlyRepaymentsCountBeforeLoan' => 'getPreviousEarlyRepaymentsCountBeforeLoan',
        'gracePeriodStart' => 'getGracePeriodStart',
        'gracePeriodEnd' => 'getGracePeriodEnd',
        'nextPaymentDate' => 'getNextPaymentDate',
        'nextPaymentNr' => 'getNextPaymentNr',
        'nrOfScheduledPayments' => 'getNrOfScheduledPayments',
        'reScheduledOn' => 'getReScheduledOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VERIFICATION_TYPE_1 = 1;
    const VERIFICATION_TYPE_2 = 2;
    const VERIFICATION_TYPE_3 = 3;
    const VERIFICATION_TYPE_4 = 4;
    const LANGUAGE_CODE_1 = 1;
    const LANGUAGE_CODE_2 = 2;
    const LANGUAGE_CODE_3 = 3;
    const LANGUAGE_CODE_4 = 4;
    const LANGUAGE_CODE_5 = 5;
    const LANGUAGE_CODE_6 = 6;
    const LANGUAGE_CODE_7 = 7;
    const LANGUAGE_CODE_8 = 8;
    const LANGUAGE_CODE_9 = 9;
    const LANGUAGE_CODE_10 = 10;
    const LANGUAGE_CODE_11 = 11;
    const LANGUAGE_CODE_12 = 12;
    const LANGUAGE_CODE_13 = 13;
    const LANGUAGE_CODE_14 = 14;
    const LANGUAGE_CODE_15 = 15;
    const LANGUAGE_CODE_16 = 16;
    const LANGUAGE_CODE_17 = 17;
    const LANGUAGE_CODE_18 = 18;
    const LANGUAGE_CODE_19 = 19;
    const LANGUAGE_CODE_20 = 20;
    const LANGUAGE_CODE_21 = 21;
    const LANGUAGE_CODE_22 = 22;
    const LANGUAGE_CODE_23 = 23;
    const LANGUAGE_CODE_24 = 24;
    const LANGUAGE_CODE_25 = 25;
    const LANGUAGE_CODE_26 = 26;
    const GENDER_0 = 0;
    const GENDER_1 = 1;
    const GENDER_2 = 2;
    const USE_OF_LOAN_0 = 0;
    const USE_OF_LOAN_1 = 1;
    const USE_OF_LOAN_2 = 2;
    const USE_OF_LOAN_3 = 3;
    const USE_OF_LOAN_4 = 4;
    const USE_OF_LOAN_5 = 5;
    const USE_OF_LOAN_6 = 6;
    const USE_OF_LOAN_7 = 7;
    const USE_OF_LOAN_8 = 8;
    const USE_OF_LOAN_101 = 101;
    const USE_OF_LOAN_102 = 102;
    const USE_OF_LOAN_103 = 103;
    const USE_OF_LOAN_104 = 104;
    const USE_OF_LOAN_105 = 105;
    const USE_OF_LOAN_106 = 106;
    const USE_OF_LOAN_107 = 107;
    const USE_OF_LOAN_108 = 108;
    const USE_OF_LOAN_109 = 109;
    const USE_OF_LOAN_110 = 110;
    const USE_OF_LOAN_201 = 201;
    const USE_OF_LOAN_202 = 202;
    const USE_OF_LOAN_203 = 203;
    const USE_OF_LOAN_204 = 204;
    const USE_OF_LOAN_205 = 205;
    const USE_OF_LOAN_206 = 206;
    const USE_OF_LOAN_207 = 207;
    const USE_OF_LOAN_208 = 208;
    const USE_OF_LOAN_209 = 209;
    const USE_OF_LOAN_210 = 210;
    const USE_OF_LOAN_211 = 211;
    const USE_OF_LOAN_MINUS_1 = -1;
    const EDUCATION_1 = 1;
    const EDUCATION_2 = 2;
    const EDUCATION_3 = 3;
    const EDUCATION_4 = 4;
    const EDUCATION_5 = 5;
    const EDUCATION_MINUS_1 = -1;
    const MARITAL_STATUS_1 = 1;
    const MARITAL_STATUS_2 = 2;
    const MARITAL_STATUS_3 = 3;
    const MARITAL_STATUS_4 = 4;
    const MARITAL_STATUS_5 = 5;
    const MARITAL_STATUS_MINUS_1 = -1;
    const EMPLOYMENT_STATUS_1 = 1;
    const EMPLOYMENT_STATUS_2 = 2;
    const EMPLOYMENT_STATUS_3 = 3;
    const EMPLOYMENT_STATUS_4 = 4;
    const EMPLOYMENT_STATUS_5 = 5;
    const EMPLOYMENT_STATUS_6 = 6;
    const EMPLOYMENT_STATUS_MINUS_1 = -1;
    const OCCUPATION_AREA_1 = 1;
    const OCCUPATION_AREA_2 = 2;
    const OCCUPATION_AREA_3 = 3;
    const OCCUPATION_AREA_4 = 4;
    const OCCUPATION_AREA_5 = 5;
    const OCCUPATION_AREA_6 = 6;
    const OCCUPATION_AREA_7 = 7;
    const OCCUPATION_AREA_8 = 8;
    const OCCUPATION_AREA_9 = 9;
    const OCCUPATION_AREA_10 = 10;
    const OCCUPATION_AREA_11 = 11;
    const OCCUPATION_AREA_12 = 12;
    const OCCUPATION_AREA_13 = 13;
    const OCCUPATION_AREA_14 = 14;
    const OCCUPATION_AREA_15 = 15;
    const OCCUPATION_AREA_16 = 16;
    const OCCUPATION_AREA_17 = 17;
    const OCCUPATION_AREA_18 = 18;
    const OCCUPATION_AREA_19 = 19;
    const OCCUPATION_AREA_MINUS_1 = -1;
    const HOME_OWNERSHIP_TYPE_0 = 0;
    const HOME_OWNERSHIP_TYPE_1 = 1;
    const HOME_OWNERSHIP_TYPE_2 = 2;
    const HOME_OWNERSHIP_TYPE_3 = 3;
    const HOME_OWNERSHIP_TYPE_4 = 4;
    const HOME_OWNERSHIP_TYPE_5 = 5;
    const HOME_OWNERSHIP_TYPE_6 = 6;
    const HOME_OWNERSHIP_TYPE_7 = 7;
    const HOME_OWNERSHIP_TYPE_8 = 8;
    const HOME_OWNERSHIP_TYPE_9 = 9;
    const HOME_OWNERSHIP_TYPE_10 = 10;
    const HOME_OWNERSHIP_TYPE_MINUS_1 = -1;
    const RECOVERY_STAGE_1 = 1;
    const RECOVERY_STAGE_2 = 2;
    const RECOVERY_STAGE_3 = 3;
    const RECOVERY_STAGE_MINUS_1 = -1;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerificationTypeAllowableValues()
    {
        return [
            self::VERIFICATION_TYPE_1,
            self::VERIFICATION_TYPE_2,
            self::VERIFICATION_TYPE_3,
            self::VERIFICATION_TYPE_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageCodeAllowableValues()
    {
        return [
            self::LANGUAGE_CODE_1,
            self::LANGUAGE_CODE_2,
            self::LANGUAGE_CODE_3,
            self::LANGUAGE_CODE_4,
            self::LANGUAGE_CODE_5,
            self::LANGUAGE_CODE_6,
            self::LANGUAGE_CODE_7,
            self::LANGUAGE_CODE_8,
            self::LANGUAGE_CODE_9,
            self::LANGUAGE_CODE_10,
            self::LANGUAGE_CODE_11,
            self::LANGUAGE_CODE_12,
            self::LANGUAGE_CODE_13,
            self::LANGUAGE_CODE_14,
            self::LANGUAGE_CODE_15,
            self::LANGUAGE_CODE_16,
            self::LANGUAGE_CODE_17,
            self::LANGUAGE_CODE_18,
            self::LANGUAGE_CODE_19,
            self::LANGUAGE_CODE_20,
            self::LANGUAGE_CODE_21,
            self::LANGUAGE_CODE_22,
            self::LANGUAGE_CODE_23,
            self::LANGUAGE_CODE_24,
            self::LANGUAGE_CODE_25,
            self::LANGUAGE_CODE_26,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_0,
            self::GENDER_1,
            self::GENDER_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseOfLoanAllowableValues()
    {
        return [
            self::USE_OF_LOAN_0,
            self::USE_OF_LOAN_1,
            self::USE_OF_LOAN_2,
            self::USE_OF_LOAN_3,
            self::USE_OF_LOAN_4,
            self::USE_OF_LOAN_5,
            self::USE_OF_LOAN_6,
            self::USE_OF_LOAN_7,
            self::USE_OF_LOAN_8,
            self::USE_OF_LOAN_101,
            self::USE_OF_LOAN_102,
            self::USE_OF_LOAN_103,
            self::USE_OF_LOAN_104,
            self::USE_OF_LOAN_105,
            self::USE_OF_LOAN_106,
            self::USE_OF_LOAN_107,
            self::USE_OF_LOAN_108,
            self::USE_OF_LOAN_109,
            self::USE_OF_LOAN_110,
            self::USE_OF_LOAN_201,
            self::USE_OF_LOAN_202,
            self::USE_OF_LOAN_203,
            self::USE_OF_LOAN_204,
            self::USE_OF_LOAN_205,
            self::USE_OF_LOAN_206,
            self::USE_OF_LOAN_207,
            self::USE_OF_LOAN_208,
            self::USE_OF_LOAN_209,
            self::USE_OF_LOAN_210,
            self::USE_OF_LOAN_211,
            self::USE_OF_LOAN_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEducationAllowableValues()
    {
        return [
            self::EDUCATION_1,
            self::EDUCATION_2,
            self::EDUCATION_3,
            self::EDUCATION_4,
            self::EDUCATION_5,
            self::EDUCATION_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaritalStatusAllowableValues()
    {
        return [
            self::MARITAL_STATUS_1,
            self::MARITAL_STATUS_2,
            self::MARITAL_STATUS_3,
            self::MARITAL_STATUS_4,
            self::MARITAL_STATUS_5,
            self::MARITAL_STATUS_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentStatusAllowableValues()
    {
        return [
            self::EMPLOYMENT_STATUS_1,
            self::EMPLOYMENT_STATUS_2,
            self::EMPLOYMENT_STATUS_3,
            self::EMPLOYMENT_STATUS_4,
            self::EMPLOYMENT_STATUS_5,
            self::EMPLOYMENT_STATUS_6,
            self::EMPLOYMENT_STATUS_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOccupationAreaAllowableValues()
    {
        return [
            self::OCCUPATION_AREA_1,
            self::OCCUPATION_AREA_2,
            self::OCCUPATION_AREA_3,
            self::OCCUPATION_AREA_4,
            self::OCCUPATION_AREA_5,
            self::OCCUPATION_AREA_6,
            self::OCCUPATION_AREA_7,
            self::OCCUPATION_AREA_8,
            self::OCCUPATION_AREA_9,
            self::OCCUPATION_AREA_10,
            self::OCCUPATION_AREA_11,
            self::OCCUPATION_AREA_12,
            self::OCCUPATION_AREA_13,
            self::OCCUPATION_AREA_14,
            self::OCCUPATION_AREA_15,
            self::OCCUPATION_AREA_16,
            self::OCCUPATION_AREA_17,
            self::OCCUPATION_AREA_18,
            self::OCCUPATION_AREA_19,
            self::OCCUPATION_AREA_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHomeOwnershipTypeAllowableValues()
    {
        return [
            self::HOME_OWNERSHIP_TYPE_0,
            self::HOME_OWNERSHIP_TYPE_1,
            self::HOME_OWNERSHIP_TYPE_2,
            self::HOME_OWNERSHIP_TYPE_3,
            self::HOME_OWNERSHIP_TYPE_4,
            self::HOME_OWNERSHIP_TYPE_5,
            self::HOME_OWNERSHIP_TYPE_6,
            self::HOME_OWNERSHIP_TYPE_7,
            self::HOME_OWNERSHIP_TYPE_8,
            self::HOME_OWNERSHIP_TYPE_9,
            self::HOME_OWNERSHIP_TYPE_10,
            self::HOME_OWNERSHIP_TYPE_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecoveryStageAllowableValues()
    {
        return [
            self::RECOVERY_STAGE_1,
            self::RECOVERY_STAGE_2,
            self::RECOVERY_STAGE_3,
            self::RECOVERY_STAGE_MINUS_1,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loanId'] = isset($data['loanId']) ? $data['loanId'] : null;
        $this->container['loanNumber'] = isset($data['loanNumber']) ? $data['loanNumber'] : null;
        $this->container['listedOnUTC'] = isset($data['listedOnUTC']) ? $data['listedOnUTC'] : null;
        $this->container['biddingStartedOn'] = isset($data['biddingStartedOn']) ? $data['biddingStartedOn'] : null;
        $this->container['bidsPortfolioManager'] = isset($data['bidsPortfolioManager']) ? $data['bidsPortfolioManager'] : null;
        $this->container['bidsApi'] = isset($data['bidsApi']) ? $data['bidsApi'] : null;
        $this->container['bidsManual'] = isset($data['bidsManual']) ? $data['bidsManual'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['newCreditCustomer'] = isset($data['newCreditCustomer']) ? $data['newCreditCustomer'] : null;
        $this->container['loanApplicationStartedDate'] = isset($data['loanApplicationStartedDate']) ? $data['loanApplicationStartedDate'] : null;
        $this->container['loanDate'] = isset($data['loanDate']) ? $data['loanDate'] : null;
        $this->container['contractEndDate'] = isset($data['contractEndDate']) ? $data['contractEndDate'] : null;
        $this->container['firstPaymentDate'] = isset($data['firstPaymentDate']) ? $data['firstPaymentDate'] : null;
        $this->container['maturityDateOriginal'] = isset($data['maturityDateOriginal']) ? $data['maturityDateOriginal'] : null;
        $this->container['maturityDateLast'] = isset($data['maturityDateLast']) ? $data['maturityDateLast'] : null;
        $this->container['applicationSignedHour'] = isset($data['applicationSignedHour']) ? $data['applicationSignedHour'] : null;
        $this->container['applicationSignedWeekday'] = isset($data['applicationSignedWeekday']) ? $data['applicationSignedWeekday'] : null;
        $this->container['verificationType'] = isset($data['verificationType']) ? $data['verificationType'] : null;
        $this->container['languageCode'] = isset($data['languageCode']) ? $data['languageCode'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['appliedAmount'] = isset($data['appliedAmount']) ? $data['appliedAmount'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['interest'] = isset($data['interest']) ? $data['interest'] : null;
        $this->container['loanDuration'] = isset($data['loanDuration']) ? $data['loanDuration'] : null;
        $this->container['monthlyPayment'] = isset($data['monthlyPayment']) ? $data['monthlyPayment'] : null;
        $this->container['useOfLoan'] = isset($data['useOfLoan']) ? $data['useOfLoan'] : null;
        $this->container['education'] = isset($data['education']) ? $data['education'] : null;
        $this->container['maritalStatus'] = isset($data['maritalStatus']) ? $data['maritalStatus'] : null;
        $this->container['nrOfDependants'] = isset($data['nrOfDependants']) ? $data['nrOfDependants'] : null;
        $this->container['employmentStatus'] = isset($data['employmentStatus']) ? $data['employmentStatus'] : null;
        $this->container['employmentDurationCurrentEmployer'] = isset($data['employmentDurationCurrentEmployer']) ? $data['employmentDurationCurrentEmployer'] : null;
        $this->container['employmentPosition'] = isset($data['employmentPosition']) ? $data['employmentPosition'] : null;
        $this->container['workExperience'] = isset($data['workExperience']) ? $data['workExperience'] : null;
        $this->container['occupationArea'] = isset($data['occupationArea']) ? $data['occupationArea'] : null;
        $this->container['homeOwnershipType'] = isset($data['homeOwnershipType']) ? $data['homeOwnershipType'] : null;
        $this->container['incomeFromPrincipalEmployer'] = isset($data['incomeFromPrincipalEmployer']) ? $data['incomeFromPrincipalEmployer'] : null;
        $this->container['incomeFromPension'] = isset($data['incomeFromPension']) ? $data['incomeFromPension'] : null;
        $this->container['incomeFromFamilyAllowance'] = isset($data['incomeFromFamilyAllowance']) ? $data['incomeFromFamilyAllowance'] : null;
        $this->container['incomeFromSocialWelfare'] = isset($data['incomeFromSocialWelfare']) ? $data['incomeFromSocialWelfare'] : null;
        $this->container['incomeFromLeavePay'] = isset($data['incomeFromLeavePay']) ? $data['incomeFromLeavePay'] : null;
        $this->container['incomeFromChildSupport'] = isset($data['incomeFromChildSupport']) ? $data['incomeFromChildSupport'] : null;
        $this->container['incomeOther'] = isset($data['incomeOther']) ? $data['incomeOther'] : null;
        $this->container['incomeTotal'] = isset($data['incomeTotal']) ? $data['incomeTotal'] : null;
        $this->container['existingLiabilities'] = isset($data['existingLiabilities']) ? $data['existingLiabilities'] : null;
        $this->container['refinanceLiabilities'] = isset($data['refinanceLiabilities']) ? $data['refinanceLiabilities'] : null;
        $this->container['liabilitiesTotal'] = isset($data['liabilitiesTotal']) ? $data['liabilitiesTotal'] : null;
        $this->container['debtToIncome'] = isset($data['debtToIncome']) ? $data['debtToIncome'] : null;
        $this->container['freeCash'] = isset($data['freeCash']) ? $data['freeCash'] : null;
        $this->container['monthlyPaymentDay'] = isset($data['monthlyPaymentDay']) ? $data['monthlyPaymentDay'] : null;
        $this->container['activeScheduleFirstPaymentReached'] = isset($data['activeScheduleFirstPaymentReached']) ? $data['activeScheduleFirstPaymentReached'] : null;
        $this->container['plannedPrincipalTillDate'] = isset($data['plannedPrincipalTillDate']) ? $data['plannedPrincipalTillDate'] : null;
        $this->container['plannedInterestTillDate'] = isset($data['plannedInterestTillDate']) ? $data['plannedInterestTillDate'] : null;
        $this->container['lastPaymentOn'] = isset($data['lastPaymentOn']) ? $data['lastPaymentOn'] : null;
        $this->container['currentDebtDaysPrimary'] = isset($data['currentDebtDaysPrimary']) ? $data['currentDebtDaysPrimary'] : null;
        $this->container['debtOccuredOn'] = isset($data['debtOccuredOn']) ? $data['debtOccuredOn'] : null;
        $this->container['currentDebtDaysSecondary'] = isset($data['currentDebtDaysSecondary']) ? $data['currentDebtDaysSecondary'] : null;
        $this->container['debtOccuredOnForSecondary'] = isset($data['debtOccuredOnForSecondary']) ? $data['debtOccuredOnForSecondary'] : null;
        $this->container['expectedLoss'] = isset($data['expectedLoss']) ? $data['expectedLoss'] : null;
        $this->container['lossGivenDefault'] = isset($data['lossGivenDefault']) ? $data['lossGivenDefault'] : null;
        $this->container['expectedReturn'] = isset($data['expectedReturn']) ? $data['expectedReturn'] : null;
        $this->container['probabilityOfDefault'] = isset($data['probabilityOfDefault']) ? $data['probabilityOfDefault'] : null;
        $this->container['defaultDate'] = isset($data['defaultDate']) ? $data['defaultDate'] : null;
        $this->container['principalOverdueBySchedule'] = isset($data['principalOverdueBySchedule']) ? $data['principalOverdueBySchedule'] : null;
        $this->container['plannedPrincipalPostDefault'] = isset($data['plannedPrincipalPostDefault']) ? $data['plannedPrincipalPostDefault'] : null;
        $this->container['plannedInterestPostDefault'] = isset($data['plannedInterestPostDefault']) ? $data['plannedInterestPostDefault'] : null;
        $this->container['eAD1'] = isset($data['eAD1']) ? $data['eAD1'] : null;
        $this->container['eAD2'] = isset($data['eAD2']) ? $data['eAD2'] : null;
        $this->container['principalRecovery'] = isset($data['principalRecovery']) ? $data['principalRecovery'] : null;
        $this->container['interestRecovery'] = isset($data['interestRecovery']) ? $data['interestRecovery'] : null;
        $this->container['recoveryStage'] = isset($data['recoveryStage']) ? $data['recoveryStage'] : null;
        $this->container['stageActiveSince'] = isset($data['stageActiveSince']) ? $data['stageActiveSince'] : null;
        $this->container['modelVersion'] = isset($data['modelVersion']) ? $data['modelVersion'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['eLV0'] = isset($data['eLV0']) ? $data['eLV0'] : null;
        $this->container['ratingV0'] = isset($data['ratingV0']) ? $data['ratingV0'] : null;
        $this->container['eLV1'] = isset($data['eLV1']) ? $data['eLV1'] : null;
        $this->container['ratingV1'] = isset($data['ratingV1']) ? $data['ratingV1'] : null;
        $this->container['eLV2'] = isset($data['eLV2']) ? $data['eLV2'] : null;
        $this->container['ratingV2'] = isset($data['ratingV2']) ? $data['ratingV2'] : null;
        $this->container['loanCancelled'] = isset($data['loanCancelled']) ? $data['loanCancelled'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['restructured'] = isset($data['restructured']) ? $data['restructured'] : null;
        $this->container['activeLateCategory'] = isset($data['activeLateCategory']) ? $data['activeLateCategory'] : null;
        $this->container['worseLateCategory'] = isset($data['worseLateCategory']) ? $data['worseLateCategory'] : null;
        $this->container['creditScoreEsMicroL'] = isset($data['creditScoreEsMicroL']) ? $data['creditScoreEsMicroL'] : null;
        $this->container['creditScoreEsEquifaxRisk'] = isset($data['creditScoreEsEquifaxRisk']) ? $data['creditScoreEsEquifaxRisk'] : null;
        $this->container['creditScoreFiAsiakasTietoRiskGrade'] = isset($data['creditScoreFiAsiakasTietoRiskGrade']) ? $data['creditScoreFiAsiakasTietoRiskGrade'] : null;
        $this->container['creditScoreEeMini'] = isset($data['creditScoreEeMini']) ? $data['creditScoreEeMini'] : null;
        $this->container['principalPaymentsMade'] = isset($data['principalPaymentsMade']) ? $data['principalPaymentsMade'] : null;
        $this->container['interestAndPenaltyPaymentsMade'] = isset($data['interestAndPenaltyPaymentsMade']) ? $data['interestAndPenaltyPaymentsMade'] : null;
        $this->container['principalWriteOffs'] = isset($data['principalWriteOffs']) ? $data['principalWriteOffs'] : null;
        $this->container['interestAndPenaltyWriteOffs'] = isset($data['interestAndPenaltyWriteOffs']) ? $data['interestAndPenaltyWriteOffs'] : null;
        $this->container['principalDebtServicingCost'] = isset($data['principalDebtServicingCost']) ? $data['principalDebtServicingCost'] : null;
        $this->container['interestAndPenaltyDebtServicingCost'] = isset($data['interestAndPenaltyDebtServicingCost']) ? $data['interestAndPenaltyDebtServicingCost'] : null;
        $this->container['principalBalance'] = isset($data['principalBalance']) ? $data['principalBalance'] : null;
        $this->container['interestAndPenaltyBalance'] = isset($data['interestAndPenaltyBalance']) ? $data['interestAndPenaltyBalance'] : null;
        $this->container['noOfPreviousLoansBeforeLoan'] = isset($data['noOfPreviousLoansBeforeLoan']) ? $data['noOfPreviousLoansBeforeLoan'] : null;
        $this->container['amountOfPreviousLoansBeforeLoan'] = isset($data['amountOfPreviousLoansBeforeLoan']) ? $data['amountOfPreviousLoansBeforeLoan'] : null;
        $this->container['previousRepaymentsBeforeLoan'] = isset($data['previousRepaymentsBeforeLoan']) ? $data['previousRepaymentsBeforeLoan'] : null;
        $this->container['previousEarlyRepaymentsBeforeLoan'] = isset($data['previousEarlyRepaymentsBeforeLoan']) ? $data['previousEarlyRepaymentsBeforeLoan'] : null;
        $this->container['previousEarlyRepaymentsCountBeforeLoan'] = isset($data['previousEarlyRepaymentsCountBeforeLoan']) ? $data['previousEarlyRepaymentsCountBeforeLoan'] : null;
        $this->container['gracePeriodStart'] = isset($data['gracePeriodStart']) ? $data['gracePeriodStart'] : null;
        $this->container['gracePeriodEnd'] = isset($data['gracePeriodEnd']) ? $data['gracePeriodEnd'] : null;
        $this->container['nextPaymentDate'] = isset($data['nextPaymentDate']) ? $data['nextPaymentDate'] : null;
        $this->container['nextPaymentNr'] = isset($data['nextPaymentNr']) ? $data['nextPaymentNr'] : null;
        $this->container['nrOfScheduledPayments'] = isset($data['nrOfScheduledPayments']) ? $data['nrOfScheduledPayments'] : null;
        $this->container['reScheduledOn'] = isset($data['reScheduledOn']) ? $data['reScheduledOn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVerificationTypeAllowableValues();
        if (!is_null($this->container['verificationType']) && !in_array($this->container['verificationType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verificationType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLanguageCodeAllowableValues();
        if (!is_null($this->container['languageCode']) && !in_array($this->container['languageCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'languageCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($this->container['useOfLoan']) && !in_array($this->container['useOfLoan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'useOfLoan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEducationAllowableValues();
        if (!is_null($this->container['education']) && !in_array($this->container['education'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'education', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($this->container['maritalStatus']) && !in_array($this->container['maritalStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'maritalStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEmploymentStatusAllowableValues();
        if (!is_null($this->container['employmentStatus']) && !in_array($this->container['employmentStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'employmentStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOccupationAreaAllowableValues();
        if (!is_null($this->container['occupationArea']) && !in_array($this->container['occupationArea'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'occupationArea', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHomeOwnershipTypeAllowableValues();
        if (!is_null($this->container['homeOwnershipType']) && !in_array($this->container['homeOwnershipType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'homeOwnershipType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRecoveryStageAllowableValues();
        if (!is_null($this->container['recoveryStage']) && !in_array($this->container['recoveryStage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'recoveryStage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loanId
     *
     * @return string|null
     */
    public function getLoanId()
    {
        return $this->container['loanId'];
    }

    /**
     * Sets loanId
     *
     * @param string|null $loanId A unique ID given to a loan
     *
     * @return $this
     */
    public function setLoanId($loanId)
    {
        $this->container['loanId'] = $loanId;

        return $this;
    }

    /**
     * Gets loanNumber
     *
     * @return int|null
     */
    public function getLoanNumber()
    {
        return $this->container['loanNumber'];
    }

    /**
     * Sets loanNumber
     *
     * @param int|null $loanNumber A unique loan number displayed in Bondora's system
     *
     * @return $this
     */
    public function setLoanNumber($loanNumber)
    {
        $this->container['loanNumber'] = $loanNumber;

        return $this;
    }

    /**
     * Gets listedOnUTC
     *
     * @return \DateTime|null
     */
    public function getListedOnUTC()
    {
        return $this->container['listedOnUTC'];
    }

    /**
     * Sets listedOnUTC
     *
     * @param \DateTime|null $listedOnUTC Date when the loan application appeared on Primary Market
     *
     * @return $this
     */
    public function setListedOnUTC($listedOnUTC)
    {
        $this->container['listedOnUTC'] = $listedOnUTC;

        return $this;
    }

    /**
     * Gets biddingStartedOn
     *
     * @return \DateTime|null
     */
    public function getBiddingStartedOn()
    {
        return $this->container['biddingStartedOn'];
    }

    /**
     * Sets biddingStartedOn
     *
     * @param \DateTime|null $biddingStartedOn Date when the auction bidding started on
     *
     * @return $this
     */
    public function setBiddingStartedOn($biddingStartedOn)
    {
        $this->container['biddingStartedOn'] = $biddingStartedOn;

        return $this;
    }

    /**
     * Gets bidsPortfolioManager
     *
     * @return double|null
     */
    public function getBidsPortfolioManager()
    {
        return $this->container['bidsPortfolioManager'];
    }

    /**
     * Sets bidsPortfolioManager
     *
     * @param double|null $bidsPortfolioManager The amount of investment offers made by Portfolio Managers
     *
     * @return $this
     */
    public function setBidsPortfolioManager($bidsPortfolioManager)
    {
        $this->container['bidsPortfolioManager'] = $bidsPortfolioManager;

        return $this;
    }

    /**
     * Gets bidsApi
     *
     * @return double|null
     */
    public function getBidsApi()
    {
        return $this->container['bidsApi'];
    }

    /**
     * Sets bidsApi
     *
     * @param double|null $bidsApi The amount of investment offers made via Api
     *
     * @return $this
     */
    public function setBidsApi($bidsApi)
    {
        $this->container['bidsApi'] = $bidsApi;

        return $this;
    }

    /**
     * Gets bidsManual
     *
     * @return double|null
     */
    public function getBidsManual()
    {
        return $this->container['bidsManual'];
    }

    /**
     * Sets bidsManual
     *
     * @param double|null $bidsManual The amount of investment offers made manually
     *
     * @return $this
     */
    public function setBidsManual($bidsManual)
    {
        $this->container['bidsManual'] = $bidsManual;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName Customer's Bondora username
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets newCreditCustomer
     *
     * @return bool|null
     */
    public function getNewCreditCustomer()
    {
        return $this->container['newCreditCustomer'];
    }

    /**
     * Sets newCreditCustomer
     *
     * @param bool|null $newCreditCustomer <para>Did the customer have prior credit history in Bondora</para>  <para>    false Customer had at least 3 months of credit history in Bondora</para>  <para>    true No prior credit history in Bondora</para>
     *
     * @return $this
     */
    public function setNewCreditCustomer($newCreditCustomer)
    {
        $this->container['newCreditCustomer'] = $newCreditCustomer;

        return $this;
    }

    /**
     * Gets loanApplicationStartedDate
     *
     * @return \DateTime|null
     */
    public function getLoanApplicationStartedDate()
    {
        return $this->container['loanApplicationStartedDate'];
    }

    /**
     * Sets loanApplicationStartedDate
     *
     * @param \DateTime|null $loanApplicationStartedDate Date when the loan application was started
     *
     * @return $this
     */
    public function setLoanApplicationStartedDate($loanApplicationStartedDate)
    {
        $this->container['loanApplicationStartedDate'] = $loanApplicationStartedDate;

        return $this;
    }

    /**
     * Gets loanDate
     *
     * @return \DateTime|null
     */
    public function getLoanDate()
    {
        return $this->container['loanDate'];
    }

    /**
     * Sets loanDate
     *
     * @param \DateTime|null $loanDate Date when the loan was issued
     *
     * @return $this
     */
    public function setLoanDate($loanDate)
    {
        $this->container['loanDate'] = $loanDate;

        return $this;
    }

    /**
     * Gets contractEndDate
     *
     * @return \DateTime|null
     */
    public function getContractEndDate()
    {
        return $this->container['contractEndDate'];
    }

    /**
     * Sets contractEndDate
     *
     * @param \DateTime|null $contractEndDate Date when the loan contract ended
     *
     * @return $this
     */
    public function setContractEndDate($contractEndDate)
    {
        $this->container['contractEndDate'] = $contractEndDate;

        return $this;
    }

    /**
     * Gets firstPaymentDate
     *
     * @return \DateTime|null
     */
    public function getFirstPaymentDate()
    {
        return $this->container['firstPaymentDate'];
    }

    /**
     * Sets firstPaymentDate
     *
     * @param \DateTime|null $firstPaymentDate First payment date according to initial loan schedule
     *
     * @return $this
     */
    public function setFirstPaymentDate($firstPaymentDate)
    {
        $this->container['firstPaymentDate'] = $firstPaymentDate;

        return $this;
    }

    /**
     * Gets maturityDateOriginal
     *
     * @return \DateTime|null
     */
    public function getMaturityDateOriginal()
    {
        return $this->container['maturityDateOriginal'];
    }

    /**
     * Sets maturityDateOriginal
     *
     * @param \DateTime|null $maturityDateOriginal Loan maturity date according to the original loan schedule
     *
     * @return $this
     */
    public function setMaturityDateOriginal($maturityDateOriginal)
    {
        $this->container['maturityDateOriginal'] = $maturityDateOriginal;

        return $this;
    }

    /**
     * Gets maturityDateLast
     *
     * @return \DateTime|null
     */
    public function getMaturityDateLast()
    {
        return $this->container['maturityDateLast'];
    }

    /**
     * Sets maturityDateLast
     *
     * @param \DateTime|null $maturityDateLast Loan maturity date as of the report generation date
     *
     * @return $this
     */
    public function setMaturityDateLast($maturityDateLast)
    {
        $this->container['maturityDateLast'] = $maturityDateLast;

        return $this;
    }

    /**
     * Gets applicationSignedHour
     *
     * @return int|null
     */
    public function getApplicationSignedHour()
    {
        return $this->container['applicationSignedHour'];
    }

    /**
     * Sets applicationSignedHour
     *
     * @param int|null $applicationSignedHour Hour of signing the loan application
     *
     * @return $this
     */
    public function setApplicationSignedHour($applicationSignedHour)
    {
        $this->container['applicationSignedHour'] = $applicationSignedHour;

        return $this;
    }

    /**
     * Gets applicationSignedWeekday
     *
     * @return int|null
     */
    public function getApplicationSignedWeekday()
    {
        return $this->container['applicationSignedWeekday'];
    }

    /**
     * Sets applicationSignedWeekday
     *
     * @param int|null $applicationSignedWeekday Weekday of signing the loan application
     *
     * @return $this
     */
    public function setApplicationSignedWeekday($applicationSignedWeekday)
    {
        $this->container['applicationSignedWeekday'] = $applicationSignedWeekday;

        return $this;
    }

    /**
     * Gets verificationType
     *
     * @return int|null
     */
    public function getVerificationType()
    {
        return $this->container['verificationType'];
    }

    /**
     * Sets verificationType
     *
     * @param int|null $verificationType Method used for loan application data verification
     *
     * @return $this
     */
    public function setVerificationType($verificationType)
    {
        $allowedValues = $this->getVerificationTypeAllowableValues();
        if (!is_null($verificationType) && !in_array($verificationType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verificationType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verificationType'] = $verificationType;

        return $this;
    }

    /**
     * Gets languageCode
     *
     * @return int|null
     */
    public function getLanguageCode()
    {
        return $this->container['languageCode'];
    }

    /**
     * Sets languageCode
     *
     * @param int|null $languageCode Customer two letter language code
     *
     * @return $this
     */
    public function setLanguageCode($languageCode)
    {
        $allowedValues = $this->getLanguageCodeAllowableValues();
        if (!is_null($languageCode) && !in_array($languageCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'languageCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['languageCode'] = $languageCode;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int|null $age Age of the borrower (years)
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime|null $dateOfBirth DateOfBirth of the borrower
     *
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int|null $gender Borrower gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Residency of the borrower
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county County of the borrower
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of the borrower
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets appliedAmount
     *
     * @return double|null
     */
    public function getAppliedAmount()
    {
        return $this->container['appliedAmount'];
    }

    /**
     * Sets appliedAmount
     *
     * @param double|null $appliedAmount Amount applied
     *
     * @return $this
     */
    public function setAppliedAmount($appliedAmount)
    {
        $this->container['appliedAmount'] = $appliedAmount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount Amount the borrower received
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return double|null
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param double|null $interest Interest rate
     *
     * @return $this
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets loanDuration
     *
     * @return int|null
     */
    public function getLoanDuration()
    {
        return $this->container['loanDuration'];
    }

    /**
     * Sets loanDuration
     *
     * @param int|null $loanDuration The loan term
     *
     * @return $this
     */
    public function setLoanDuration($loanDuration)
    {
        $this->container['loanDuration'] = $loanDuration;

        return $this;
    }

    /**
     * Gets monthlyPayment
     *
     * @return int|null
     */
    public function getMonthlyPayment()
    {
        return $this->container['monthlyPayment'];
    }

    /**
     * Sets monthlyPayment
     *
     * @param int|null $monthlyPayment Estimated amount the borrower has to pay every month
     *
     * @return $this
     */
    public function setMonthlyPayment($monthlyPayment)
    {
        $this->container['monthlyPayment'] = $monthlyPayment;

        return $this;
    }

    /**
     * Gets useOfLoan
     *
     * @return int|null
     */
    public function getUseOfLoan()
    {
        return $this->container['useOfLoan'];
    }

    /**
     * Sets useOfLoan
     *
     * @param int|null $useOfLoan Use of loan
     *
     * @return $this
     */
    public function setUseOfLoan($useOfLoan)
    {
        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($useOfLoan) && !in_array($useOfLoan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'useOfLoan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['useOfLoan'] = $useOfLoan;

        return $this;
    }

    /**
     * Gets education
     *
     * @return int|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param int|null $education Education
     *
     * @return $this
     */
    public function setEducation($education)
    {
        $allowedValues = $this->getEducationAllowableValues();
        if (!is_null($education) && !in_array($education, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'education', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets maritalStatus
     *
     * @return int|null
     */
    public function getMaritalStatus()
    {
        return $this->container['maritalStatus'];
    }

    /**
     * Sets maritalStatus
     *
     * @param int|null $maritalStatus Marital status
     *
     * @return $this
     */
    public function setMaritalStatus($maritalStatus)
    {
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($maritalStatus) && !in_array($maritalStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'maritalStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maritalStatus'] = $maritalStatus;

        return $this;
    }

    /**
     * Gets nrOfDependants
     *
     * @return string|null
     */
    public function getNrOfDependants()
    {
        return $this->container['nrOfDependants'];
    }

    /**
     * Sets nrOfDependants
     *
     * @param string|null $nrOfDependants Number of children or other dependants
     *
     * @return $this
     */
    public function setNrOfDependants($nrOfDependants)
    {
        $this->container['nrOfDependants'] = $nrOfDependants;

        return $this;
    }

    /**
     * Gets employmentStatus
     *
     * @return int|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employmentStatus'];
    }

    /**
     * Sets employmentStatus
     *
     * @param int|null $employmentStatus Employment status
     *
     * @return $this
     */
    public function setEmploymentStatus($employmentStatus)
    {
        $allowedValues = $this->getEmploymentStatusAllowableValues();
        if (!is_null($employmentStatus) && !in_array($employmentStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'employmentStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employmentStatus'] = $employmentStatus;

        return $this;
    }

    /**
     * Gets employmentDurationCurrentEmployer
     *
     * @return string|null
     */
    public function getEmploymentDurationCurrentEmployer()
    {
        return $this->container['employmentDurationCurrentEmployer'];
    }

    /**
     * Sets employmentDurationCurrentEmployer
     *
     * @param string|null $employmentDurationCurrentEmployer Employment time with the current employer
     *
     * @return $this
     */
    public function setEmploymentDurationCurrentEmployer($employmentDurationCurrentEmployer)
    {
        $this->container['employmentDurationCurrentEmployer'] = $employmentDurationCurrentEmployer;

        return $this;
    }

    /**
     * Gets employmentPosition
     *
     * @return string|null
     */
    public function getEmploymentPosition()
    {
        return $this->container['employmentPosition'];
    }

    /**
     * Sets employmentPosition
     *
     * @param string|null $employmentPosition Employment position with the current employer
     *
     * @return $this
     */
    public function setEmploymentPosition($employmentPosition)
    {
        $this->container['employmentPosition'] = $employmentPosition;

        return $this;
    }

    /**
     * Gets workExperience
     *
     * @return string|null
     */
    public function getWorkExperience()
    {
        return $this->container['workExperience'];
    }

    /**
     * Sets workExperience
     *
     * @param string|null $workExperience Work experience in total
     *
     * @return $this
     */
    public function setWorkExperience($workExperience)
    {
        $this->container['workExperience'] = $workExperience;

        return $this;
    }

    /**
     * Gets occupationArea
     *
     * @return int|null
     */
    public function getOccupationArea()
    {
        return $this->container['occupationArea'];
    }

    /**
     * Sets occupationArea
     *
     * @param int|null $occupationArea Occupation area
     *
     * @return $this
     */
    public function setOccupationArea($occupationArea)
    {
        $allowedValues = $this->getOccupationAreaAllowableValues();
        if (!is_null($occupationArea) && !in_array($occupationArea, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'occupationArea', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['occupationArea'] = $occupationArea;

        return $this;
    }

    /**
     * Gets homeOwnershipType
     *
     * @return int|null
     */
    public function getHomeOwnershipType()
    {
        return $this->container['homeOwnershipType'];
    }

    /**
     * Sets homeOwnershipType
     *
     * @param int|null $homeOwnershipType Home ownership type
     *
     * @return $this
     */
    public function setHomeOwnershipType($homeOwnershipType)
    {
        $allowedValues = $this->getHomeOwnershipTypeAllowableValues();
        if (!is_null($homeOwnershipType) && !in_array($homeOwnershipType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'homeOwnershipType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['homeOwnershipType'] = $homeOwnershipType;

        return $this;
    }

    /**
     * Gets incomeFromPrincipalEmployer
     *
     * @return double|null
     */
    public function getIncomeFromPrincipalEmployer()
    {
        return $this->container['incomeFromPrincipalEmployer'];
    }

    /**
     * Sets incomeFromPrincipalEmployer
     *
     * @param double|null $incomeFromPrincipalEmployer Salary
     *
     * @return $this
     */
    public function setIncomeFromPrincipalEmployer($incomeFromPrincipalEmployer)
    {
        $this->container['incomeFromPrincipalEmployer'] = $incomeFromPrincipalEmployer;

        return $this;
    }

    /**
     * Gets incomeFromPension
     *
     * @return double|null
     */
    public function getIncomeFromPension()
    {
        return $this->container['incomeFromPension'];
    }

    /**
     * Sets incomeFromPension
     *
     * @param double|null $incomeFromPension Pension
     *
     * @return $this
     */
    public function setIncomeFromPension($incomeFromPension)
    {
        $this->container['incomeFromPension'] = $incomeFromPension;

        return $this;
    }

    /**
     * Gets incomeFromFamilyAllowance
     *
     * @return double|null
     */
    public function getIncomeFromFamilyAllowance()
    {
        return $this->container['incomeFromFamilyAllowance'];
    }

    /**
     * Sets incomeFromFamilyAllowance
     *
     * @param double|null $incomeFromFamilyAllowance Family allowance
     *
     * @return $this
     */
    public function setIncomeFromFamilyAllowance($incomeFromFamilyAllowance)
    {
        $this->container['incomeFromFamilyAllowance'] = $incomeFromFamilyAllowance;

        return $this;
    }

    /**
     * Gets incomeFromSocialWelfare
     *
     * @return double|null
     */
    public function getIncomeFromSocialWelfare()
    {
        return $this->container['incomeFromSocialWelfare'];
    }

    /**
     * Sets incomeFromSocialWelfare
     *
     * @param double|null $incomeFromSocialWelfare Social welfare
     *
     * @return $this
     */
    public function setIncomeFromSocialWelfare($incomeFromSocialWelfare)
    {
        $this->container['incomeFromSocialWelfare'] = $incomeFromSocialWelfare;

        return $this;
    }

    /**
     * Gets incomeFromLeavePay
     *
     * @return double|null
     */
    public function getIncomeFromLeavePay()
    {
        return $this->container['incomeFromLeavePay'];
    }

    /**
     * Sets incomeFromLeavePay
     *
     * @param double|null $incomeFromLeavePay Leave pay
     *
     * @return $this
     */
    public function setIncomeFromLeavePay($incomeFromLeavePay)
    {
        $this->container['incomeFromLeavePay'] = $incomeFromLeavePay;

        return $this;
    }

    /**
     * Gets incomeFromChildSupport
     *
     * @return double|null
     */
    public function getIncomeFromChildSupport()
    {
        return $this->container['incomeFromChildSupport'];
    }

    /**
     * Sets incomeFromChildSupport
     *
     * @param double|null $incomeFromChildSupport Child support
     *
     * @return $this
     */
    public function setIncomeFromChildSupport($incomeFromChildSupport)
    {
        $this->container['incomeFromChildSupport'] = $incomeFromChildSupport;

        return $this;
    }

    /**
     * Gets incomeOther
     *
     * @return double|null
     */
    public function getIncomeOther()
    {
        return $this->container['incomeOther'];
    }

    /**
     * Sets incomeOther
     *
     * @param double|null $incomeOther Other income
     *
     * @return $this
     */
    public function setIncomeOther($incomeOther)
    {
        $this->container['incomeOther'] = $incomeOther;

        return $this;
    }

    /**
     * Gets incomeTotal
     *
     * @return double|null
     */
    public function getIncomeTotal()
    {
        return $this->container['incomeTotal'];
    }

    /**
     * Sets incomeTotal
     *
     * @param double|null $incomeTotal Total income
     *
     * @return $this
     */
    public function setIncomeTotal($incomeTotal)
    {
        $this->container['incomeTotal'] = $incomeTotal;

        return $this;
    }

    /**
     * Gets existingLiabilities
     *
     * @return int|null
     */
    public function getExistingLiabilities()
    {
        return $this->container['existingLiabilities'];
    }

    /**
     * Sets existingLiabilities
     *
     * @param int|null $existingLiabilities Borrower's number of existing liabilities
     *
     * @return $this
     */
    public function setExistingLiabilities($existingLiabilities)
    {
        $this->container['existingLiabilities'] = $existingLiabilities;

        return $this;
    }

    /**
     * Gets refinanceLiabilities
     *
     * @return int|null
     */
    public function getRefinanceLiabilities()
    {
        return $this->container['refinanceLiabilities'];
    }

    /**
     * Sets refinanceLiabilities
     *
     * @param int|null $refinanceLiabilities The total amount of liabilities after refinancing
     *
     * @return $this
     */
    public function setRefinanceLiabilities($refinanceLiabilities)
    {
        $this->container['refinanceLiabilities'] = $refinanceLiabilities;

        return $this;
    }

    /**
     * Gets liabilitiesTotal
     *
     * @return double|null
     */
    public function getLiabilitiesTotal()
    {
        return $this->container['liabilitiesTotal'];
    }

    /**
     * Sets liabilitiesTotal
     *
     * @param double|null $liabilitiesTotal Total monthly liabilities
     *
     * @return $this
     */
    public function setLiabilitiesTotal($liabilitiesTotal)
    {
        $this->container['liabilitiesTotal'] = $liabilitiesTotal;

        return $this;
    }

    /**
     * Gets debtToIncome
     *
     * @return double|null
     */
    public function getDebtToIncome()
    {
        return $this->container['debtToIncome'];
    }

    /**
     * Sets debtToIncome
     *
     * @param double|null $debtToIncome Debt to income ratio
     *
     * @return $this
     */
    public function setDebtToIncome($debtToIncome)
    {
        $this->container['debtToIncome'] = $debtToIncome;

        return $this;
    }

    /**
     * Gets freeCash
     *
     * @return double|null
     */
    public function getFreeCash()
    {
        return $this->container['freeCash'];
    }

    /**
     * Sets freeCash
     *
     * @param double|null $freeCash Discretionary income after monthly liabilities
     *
     * @return $this
     */
    public function setFreeCash($freeCash)
    {
        $this->container['freeCash'] = $freeCash;

        return $this;
    }

    /**
     * Gets monthlyPaymentDay
     *
     * @return int|null
     */
    public function getMonthlyPaymentDay()
    {
        return $this->container['monthlyPaymentDay'];
    }

    /**
     * Sets monthlyPaymentDay
     *
     * @param int|null $monthlyPaymentDay The day of the month the loan payments are scheduled for The actual date is adjusted for weekends and bank holidays (e.g. if 10th is Sunday then the payment will be made on the 11th in that month)
     *
     * @return $this
     */
    public function setMonthlyPaymentDay($monthlyPaymentDay)
    {
        $this->container['monthlyPaymentDay'] = $monthlyPaymentDay;

        return $this;
    }

    /**
     * Gets activeScheduleFirstPaymentReached
     *
     * @return bool|null
     */
    public function getActiveScheduleFirstPaymentReached()
    {
        return $this->container['activeScheduleFirstPaymentReached'];
    }

    /**
     * Sets activeScheduleFirstPaymentReached
     *
     * @param bool|null $activeScheduleFirstPaymentReached Whether the first payment date has been reached according to the active schedule
     *
     * @return $this
     */
    public function setActiveScheduleFirstPaymentReached($activeScheduleFirstPaymentReached)
    {
        $this->container['activeScheduleFirstPaymentReached'] = $activeScheduleFirstPaymentReached;

        return $this;
    }

    /**
     * Gets plannedPrincipalTillDate
     *
     * @return double|null
     */
    public function getPlannedPrincipalTillDate()
    {
        return $this->container['plannedPrincipalTillDate'];
    }

    /**
     * Sets plannedPrincipalTillDate
     *
     * @param double|null $plannedPrincipalTillDate According to active schedule the amount of principal the investment should have received
     *
     * @return $this
     */
    public function setPlannedPrincipalTillDate($plannedPrincipalTillDate)
    {
        $this->container['plannedPrincipalTillDate'] = $plannedPrincipalTillDate;

        return $this;
    }

    /**
     * Gets plannedInterestTillDate
     *
     * @return double|null
     */
    public function getPlannedInterestTillDate()
    {
        return $this->container['plannedInterestTillDate'];
    }

    /**
     * Sets plannedInterestTillDate
     *
     * @param double|null $plannedInterestTillDate According to active schedule the amount of interest the investment should have received
     *
     * @return $this
     */
    public function setPlannedInterestTillDate($plannedInterestTillDate)
    {
        $this->container['plannedInterestTillDate'] = $plannedInterestTillDate;

        return $this;
    }

    /**
     * Gets lastPaymentOn
     *
     * @return \DateTime|null
     */
    public function getLastPaymentOn()
    {
        return $this->container['lastPaymentOn'];
    }

    /**
     * Sets lastPaymentOn
     *
     * @param \DateTime|null $lastPaymentOn The date of the current last payment received from the borrower
     *
     * @return $this
     */
    public function setLastPaymentOn($lastPaymentOn)
    {
        $this->container['lastPaymentOn'] = $lastPaymentOn;

        return $this;
    }

    /**
     * Gets currentDebtDaysPrimary
     *
     * @return int|null
     */
    public function getCurrentDebtDaysPrimary()
    {
        return $this->container['currentDebtDaysPrimary'];
    }

    /**
     * Sets currentDebtDaysPrimary
     *
     * @param int|null $currentDebtDaysPrimary How long the loan has been in Principal Debt
     *
     * @return $this
     */
    public function setCurrentDebtDaysPrimary($currentDebtDaysPrimary)
    {
        $this->container['currentDebtDaysPrimary'] = $currentDebtDaysPrimary;

        return $this;
    }

    /**
     * Gets debtOccuredOn
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOn()
    {
        return $this->container['debtOccuredOn'];
    }

    /**
     * Sets debtOccuredOn
     *
     * @param \DateTime|null $debtOccuredOn The date when Principal Debt occurred
     *
     * @return $this
     */
    public function setDebtOccuredOn($debtOccuredOn)
    {
        $this->container['debtOccuredOn'] = $debtOccuredOn;

        return $this;
    }

    /**
     * Gets currentDebtDaysSecondary
     *
     * @return int|null
     */
    public function getCurrentDebtDaysSecondary()
    {
        return $this->container['currentDebtDaysSecondary'];
    }

    /**
     * Sets currentDebtDaysSecondary
     *
     * @param int|null $currentDebtDaysSecondary How long the loan has been in Interest Debt
     *
     * @return $this
     */
    public function setCurrentDebtDaysSecondary($currentDebtDaysSecondary)
    {
        $this->container['currentDebtDaysSecondary'] = $currentDebtDaysSecondary;

        return $this;
    }

    /**
     * Gets debtOccuredOnForSecondary
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOnForSecondary()
    {
        return $this->container['debtOccuredOnForSecondary'];
    }

    /**
     * Sets debtOccuredOnForSecondary
     *
     * @param \DateTime|null $debtOccuredOnForSecondary The date when Interest Debt occurred
     *
     * @return $this
     */
    public function setDebtOccuredOnForSecondary($debtOccuredOnForSecondary)
    {
        $this->container['debtOccuredOnForSecondary'] = $debtOccuredOnForSecondary;

        return $this;
    }

    /**
     * Gets expectedLoss
     *
     * @return double|null
     */
    public function getExpectedLoss()
    {
        return $this->container['expectedLoss'];
    }

    /**
     * Sets expectedLoss
     *
     * @param double|null $expectedLoss Expected Loss calculated by the current Rating model
     *
     * @return $this
     */
    public function setExpectedLoss($expectedLoss)
    {
        $this->container['expectedLoss'] = $expectedLoss;

        return $this;
    }

    /**
     * Gets lossGivenDefault
     *
     * @return double|null
     */
    public function getLossGivenDefault()
    {
        return $this->container['lossGivenDefault'];
    }

    /**
     * Sets lossGivenDefault
     *
     * @param double|null $lossGivenDefault Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries.               However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.
     *
     * @return $this
     */
    public function setLossGivenDefault($lossGivenDefault)
    {
        $this->container['lossGivenDefault'] = $lossGivenDefault;

        return $this;
    }

    /**
     * Gets expectedReturn
     *
     * @return double|null
     */
    public function getExpectedReturn()
    {
        return $this->container['expectedReturn'];
    }

    /**
     * Sets expectedReturn
     *
     * @param double|null $expectedReturn Expected Return calculated by the current Rating model
     *
     * @return $this
     */
    public function setExpectedReturn($expectedReturn)
    {
        $this->container['expectedReturn'] = $expectedReturn;

        return $this;
    }

    /**
     * Gets probabilityOfDefault
     *
     * @return double|null
     */
    public function getProbabilityOfDefault()
    {
        return $this->container['probabilityOfDefault'];
    }

    /**
     * Sets probabilityOfDefault
     *
     * @param double|null $probabilityOfDefault Probability of Default, refers to a loan’s probability of default within one year horizon.
     *
     * @return $this
     */
    public function setProbabilityOfDefault($probabilityOfDefault)
    {
        $this->container['probabilityOfDefault'] = $probabilityOfDefault;

        return $this;
    }

    /**
     * Gets defaultDate
     *
     * @return \DateTime|null
     */
    public function getDefaultDate()
    {
        return $this->container['defaultDate'];
    }

    /**
     * Sets defaultDate
     *
     * @param \DateTime|null $defaultDate The date when loan went into defaulted state and collection process was started
     *
     * @return $this
     */
    public function setDefaultDate($defaultDate)
    {
        $this->container['defaultDate'] = $defaultDate;

        return $this;
    }

    /**
     * Gets principalOverdueBySchedule
     *
     * @return double|null
     */
    public function getPrincipalOverdueBySchedule()
    {
        return $this->container['principalOverdueBySchedule'];
    }

    /**
     * Sets principalOverdueBySchedule
     *
     * @param double|null $principalOverdueBySchedule According to the current schedule, principal that is overdue
     *
     * @return $this
     */
    public function setPrincipalOverdueBySchedule($principalOverdueBySchedule)
    {
        $this->container['principalOverdueBySchedule'] = $principalOverdueBySchedule;

        return $this;
    }

    /**
     * Gets plannedPrincipalPostDefault
     *
     * @return double|null
     */
    public function getPlannedPrincipalPostDefault()
    {
        return $this->container['plannedPrincipalPostDefault'];
    }

    /**
     * Sets plannedPrincipalPostDefault
     *
     * @param double|null $plannedPrincipalPostDefault The amount of principal that was planned to be received after the default occurred
     *
     * @return $this
     */
    public function setPlannedPrincipalPostDefault($plannedPrincipalPostDefault)
    {
        $this->container['plannedPrincipalPostDefault'] = $plannedPrincipalPostDefault;

        return $this;
    }

    /**
     * Gets plannedInterestPostDefault
     *
     * @return double|null
     */
    public function getPlannedInterestPostDefault()
    {
        return $this->container['plannedInterestPostDefault'];
    }

    /**
     * Sets plannedInterestPostDefault
     *
     * @param double|null $plannedInterestPostDefault The amount of interest that was planned to be received after the default occurred
     *
     * @return $this
     */
    public function setPlannedInterestPostDefault($plannedInterestPostDefault)
    {
        $this->container['plannedInterestPostDefault'] = $plannedInterestPostDefault;

        return $this;
    }

    /**
     * Gets eAD1
     *
     * @return double|null
     */
    public function getEAD1()
    {
        return $this->container['eAD1'];
    }

    /**
     * Sets eAD1
     *
     * @param double|null $eAD1 Exposure at default, outstanding principal at default
     *
     * @return $this
     */
    public function setEAD1($eAD1)
    {
        $this->container['eAD1'] = $eAD1;

        return $this;
    }

    /**
     * Gets eAD2
     *
     * @return double|null
     */
    public function getEAD2()
    {
        return $this->container['eAD2'];
    }

    /**
     * Sets eAD2
     *
     * @param double|null $eAD2 Exposure at default, loan amount less all payments prior to default
     *
     * @return $this
     */
    public function setEAD2($eAD2)
    {
        $this->container['eAD2'] = $eAD2;

        return $this;
    }

    /**
     * Gets principalRecovery
     *
     * @return double|null
     */
    public function getPrincipalRecovery()
    {
        return $this->container['principalRecovery'];
    }

    /**
     * Sets principalRecovery
     *
     * @param double|null $principalRecovery Principal recovered due to collection process from in debt loans
     *
     * @return $this
     */
    public function setPrincipalRecovery($principalRecovery)
    {
        $this->container['principalRecovery'] = $principalRecovery;

        return $this;
    }

    /**
     * Gets interestRecovery
     *
     * @return double|null
     */
    public function getInterestRecovery()
    {
        return $this->container['interestRecovery'];
    }

    /**
     * Sets interestRecovery
     *
     * @param double|null $interestRecovery Interest recovered due to collection process from in debt loans
     *
     * @return $this
     */
    public function setInterestRecovery($interestRecovery)
    {
        $this->container['interestRecovery'] = $interestRecovery;

        return $this;
    }

    /**
     * Gets recoveryStage
     *
     * @return int|null
     */
    public function getRecoveryStage()
    {
        return $this->container['recoveryStage'];
    }

    /**
     * Sets recoveryStage
     *
     * @param int|null $recoveryStage Current stage according to the recovery model 1 Collection 2 Recovery 3 Write Off
     *
     * @return $this
     */
    public function setRecoveryStage($recoveryStage)
    {
        $allowedValues = $this->getRecoveryStageAllowableValues();
        if (!is_null($recoveryStage) && !in_array($recoveryStage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'recoveryStage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['recoveryStage'] = $recoveryStage;

        return $this;
    }

    /**
     * Gets stageActiveSince
     *
     * @return \DateTime|null
     */
    public function getStageActiveSince()
    {
        return $this->container['stageActiveSince'];
    }

    /**
     * Sets stageActiveSince
     *
     * @param \DateTime|null $stageActiveSince How long the current recovery stage has been active
     *
     * @return $this
     */
    public function setStageActiveSince($stageActiveSince)
    {
        $this->container['stageActiveSince'] = $stageActiveSince;

        return $this;
    }

    /**
     * Gets modelVersion
     *
     * @return int|null
     */
    public function getModelVersion()
    {
        return $this->container['modelVersion'];
    }

    /**
     * Sets modelVersion
     *
     * @param int|null $modelVersion The version of the Rating model used for issuing the Bondora Rating
     *
     * @return $this
     */
    public function setModelVersion($modelVersion)
    {
        $this->container['modelVersion'] = $modelVersion;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string|null $rating Bondora Rating issued by the Rating model
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets eLV0
     *
     * @return double|null
     */
    public function getELV0()
    {
        return $this->container['eLV0'];
    }

    /**
     * Sets eLV0
     *
     * @param double|null $eLV0 Expected loss calculated by the specified version of Rating model
     *
     * @return $this
     */
    public function setELV0($eLV0)
    {
        $this->container['eLV0'] = $eLV0;

        return $this;
    }

    /**
     * Gets ratingV0
     *
     * @return string|null
     */
    public function getRatingV0()
    {
        return $this->container['ratingV0'];
    }

    /**
     * Sets ratingV0
     *
     * @param string|null $ratingV0 Bondora Rating issued by version 0 of the Rating model
     *
     * @return $this
     */
    public function setRatingV0($ratingV0)
    {
        $this->container['ratingV0'] = $ratingV0;

        return $this;
    }

    /**
     * Gets eLV1
     *
     * @return double|null
     */
    public function getELV1()
    {
        return $this->container['eLV1'];
    }

    /**
     * Sets eLV1
     *
     * @param double|null $eLV1 Expected loss calculated by the specified version of Rating model
     *
     * @return $this
     */
    public function setELV1($eLV1)
    {
        $this->container['eLV1'] = $eLV1;

        return $this;
    }

    /**
     * Gets ratingV1
     *
     * @return string|null
     */
    public function getRatingV1()
    {
        return $this->container['ratingV1'];
    }

    /**
     * Sets ratingV1
     *
     * @param string|null $ratingV1 Bondora Rating issued by version 1 of the Rating model
     *
     * @return $this
     */
    public function setRatingV1($ratingV1)
    {
        $this->container['ratingV1'] = $ratingV1;

        return $this;
    }

    /**
     * Gets eLV2
     *
     * @return double|null
     */
    public function getELV2()
    {
        return $this->container['eLV2'];
    }

    /**
     * Sets eLV2
     *
     * @param double|null $eLV2 Expected loss calculated by the specified version of Rating model
     *
     * @return $this
     */
    public function setELV2($eLV2)
    {
        $this->container['eLV2'] = $eLV2;

        return $this;
    }

    /**
     * Gets ratingV2
     *
     * @return string|null
     */
    public function getRatingV2()
    {
        return $this->container['ratingV2'];
    }

    /**
     * Sets ratingV2
     *
     * @param string|null $ratingV2 Bondora Rating issued by version 2 of the Rating model
     *
     * @return $this
     */
    public function setRatingV2($ratingV2)
    {
        $this->container['ratingV2'] = $ratingV2;

        return $this;
    }

    /**
     * Gets loanCancelled
     *
     * @return bool|null
     */
    public function getLoanCancelled()
    {
        return $this->container['loanCancelled'];
    }

    /**
     * Sets loanCancelled
     *
     * @param bool|null $loanCancelled If Loan was cancelled
     *
     * @return $this
     */
    public function setLoanCancelled($loanCancelled)
    {
        $this->container['loanCancelled'] = $loanCancelled;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current status of the loan application
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets restructured
     *
     * @return bool|null
     */
    public function getRestructured()
    {
        return $this->container['restructured'];
    }

    /**
     * Sets restructured
     *
     * @param bool|null $restructured The original maturity date of the loan has been increased by more than 60 days
     *
     * @return $this
     */
    public function setRestructured($restructured)
    {
        $this->container['restructured'] = $restructured;

        return $this;
    }

    /**
     * Gets activeLateCategory
     *
     * @return string|null
     */
    public function getActiveLateCategory()
    {
        return $this->container['activeLateCategory'];
    }

    /**
     * Sets activeLateCategory
     *
     * @param string|null $activeLateCategory When a loan is in Principal Debt then it will be categorized by Principal Debt days
     *
     * @return $this
     */
    public function setActiveLateCategory($activeLateCategory)
    {
        $this->container['activeLateCategory'] = $activeLateCategory;

        return $this;
    }

    /**
     * Gets worseLateCategory
     *
     * @return string|null
     */
    public function getWorseLateCategory()
    {
        return $this->container['worseLateCategory'];
    }

    /**
     * Sets worseLateCategory
     *
     * @param string|null $worseLateCategory Displays the last longest period of days when the loan was in Principal Debt
     *
     * @return $this
     */
    public function setWorseLateCategory($worseLateCategory)
    {
        $this->container['worseLateCategory'] = $worseLateCategory;

        return $this;
    }

    /**
     * Gets creditScoreEsMicroL
     *
     * @return string|null
     */
    public function getCreditScoreEsMicroL()
    {
        return $this->container['creditScoreEsMicroL'];
    }

    /**
     * Sets creditScoreEsMicroL
     *
     * @param string|null $creditScoreEsMicroL A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>
     *
     * @return $this
     */
    public function setCreditScoreEsMicroL($creditScoreEsMicroL)
    {
        $this->container['creditScoreEsMicroL'] = $creditScoreEsMicroL;

        return $this;
    }

    /**
     * Gets creditScoreEsEquifaxRisk
     *
     * @return string|null
     */
    public function getCreditScoreEsEquifaxRisk()
    {
        return $this->container['creditScoreEsEquifaxRisk'];
    }

    /**
     * Sets creditScoreEsEquifaxRisk
     *
     * @param string|null $creditScoreEsEquifaxRisk Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>
     *
     * @return $this
     */
    public function setCreditScoreEsEquifaxRisk($creditScoreEsEquifaxRisk)
    {
        $this->container['creditScoreEsEquifaxRisk'] = $creditScoreEsEquifaxRisk;

        return $this;
    }

    /**
     * Gets creditScoreFiAsiakasTietoRiskGrade
     *
     * @return string|null
     */
    public function getCreditScoreFiAsiakasTietoRiskGrade()
    {
        return $this->container['creditScoreFiAsiakasTietoRiskGrade'];
    }

    /**
     * Sets creditScoreFiAsiakasTietoRiskGrade
     *
     * @param string|null $creditScoreFiAsiakasTietoRiskGrade Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>
     *
     * @return $this
     */
    public function setCreditScoreFiAsiakasTietoRiskGrade($creditScoreFiAsiakasTietoRiskGrade)
    {
        $this->container['creditScoreFiAsiakasTietoRiskGrade'] = $creditScoreFiAsiakasTietoRiskGrade;

        return $this;
    }

    /**
     * Gets creditScoreEeMini
     *
     * @return string|null
     */
    public function getCreditScoreEeMini()
    {
        return $this->container['creditScoreEeMini'];
    }

    /**
     * Sets creditScoreEeMini
     *
     * @param string|null $creditScoreEeMini Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>
     *
     * @return $this
     */
    public function setCreditScoreEeMini($creditScoreEeMini)
    {
        $this->container['creditScoreEeMini'] = $creditScoreEeMini;

        return $this;
    }

    /**
     * Gets principalPaymentsMade
     *
     * @return double|null
     */
    public function getPrincipalPaymentsMade()
    {
        return $this->container['principalPaymentsMade'];
    }

    /**
     * Sets principalPaymentsMade
     *
     * @param double|null $principalPaymentsMade Note owner received loan transfers principal amount
     *
     * @return $this
     */
    public function setPrincipalPaymentsMade($principalPaymentsMade)
    {
        $this->container['principalPaymentsMade'] = $principalPaymentsMade;

        return $this;
    }

    /**
     * Gets interestAndPenaltyPaymentsMade
     *
     * @return double|null
     */
    public function getInterestAndPenaltyPaymentsMade()
    {
        return $this->container['interestAndPenaltyPaymentsMade'];
    }

    /**
     * Sets interestAndPenaltyPaymentsMade
     *
     * @param double|null $interestAndPenaltyPaymentsMade Note owner received loan transfers earned interest, penalties total amount
     *
     * @return $this
     */
    public function setInterestAndPenaltyPaymentsMade($interestAndPenaltyPaymentsMade)
    {
        $this->container['interestAndPenaltyPaymentsMade'] = $interestAndPenaltyPaymentsMade;

        return $this;
    }

    /**
     * Gets principalWriteOffs
     *
     * @return double|null
     */
    public function getPrincipalWriteOffs()
    {
        return $this->container['principalWriteOffs'];
    }

    /**
     * Sets principalWriteOffs
     *
     * @param double|null $principalWriteOffs Principal that was written off on the investment
     *
     * @return $this
     */
    public function setPrincipalWriteOffs($principalWriteOffs)
    {
        $this->container['principalWriteOffs'] = $principalWriteOffs;

        return $this;
    }

    /**
     * Gets interestAndPenaltyWriteOffs
     *
     * @return double|null
     */
    public function getInterestAndPenaltyWriteOffs()
    {
        return $this->container['interestAndPenaltyWriteOffs'];
    }

    /**
     * Sets interestAndPenaltyWriteOffs
     *
     * @param double|null $interestAndPenaltyWriteOffs Interest that was written off on the investment
     *
     * @return $this
     */
    public function setInterestAndPenaltyWriteOffs($interestAndPenaltyWriteOffs)
    {
        $this->container['interestAndPenaltyWriteOffs'] = $interestAndPenaltyWriteOffs;

        return $this;
    }

    /**
     * Gets principalDebtServicingCost
     *
     * @return double|null
     */
    public function getPrincipalDebtServicingCost()
    {
        return $this->container['principalDebtServicingCost'];
    }

    /**
     * Sets principalDebtServicingCost
     *
     * @param double|null $principalDebtServicingCost Service cost related to the recovery of the debt based on the principal of the investment
     *
     * @return $this
     */
    public function setPrincipalDebtServicingCost($principalDebtServicingCost)
    {
        $this->container['principalDebtServicingCost'] = $principalDebtServicingCost;

        return $this;
    }

    /**
     * Gets interestAndPenaltyDebtServicingCost
     *
     * @return double|null
     */
    public function getInterestAndPenaltyDebtServicingCost()
    {
        return $this->container['interestAndPenaltyDebtServicingCost'];
    }

    /**
     * Sets interestAndPenaltyDebtServicingCost
     *
     * @param double|null $interestAndPenaltyDebtServicingCost Service cost related to the recovery of the debt based on the interest and penalties of the investment
     *
     * @return $this
     */
    public function setInterestAndPenaltyDebtServicingCost($interestAndPenaltyDebtServicingCost)
    {
        $this->container['interestAndPenaltyDebtServicingCost'] = $interestAndPenaltyDebtServicingCost;

        return $this;
    }

    /**
     * Gets principalBalance
     *
     * @return double|null
     */
    public function getPrincipalBalance()
    {
        return $this->container['principalBalance'];
    }

    /**
     * Sets principalBalance
     *
     * @param double|null $principalBalance Principal that still needs to be paid by the borrower
     *
     * @return $this
     */
    public function setPrincipalBalance($principalBalance)
    {
        $this->container['principalBalance'] = $principalBalance;

        return $this;
    }

    /**
     * Gets interestAndPenaltyBalance
     *
     * @return double|null
     */
    public function getInterestAndPenaltyBalance()
    {
        return $this->container['interestAndPenaltyBalance'];
    }

    /**
     * Sets interestAndPenaltyBalance
     *
     * @param double|null $interestAndPenaltyBalance Unpaid interest and penalties
     *
     * @return $this
     */
    public function setInterestAndPenaltyBalance($interestAndPenaltyBalance)
    {
        $this->container['interestAndPenaltyBalance'] = $interestAndPenaltyBalance;

        return $this;
    }

    /**
     * Gets noOfPreviousLoansBeforeLoan
     *
     * @return int|null
     */
    public function getNoOfPreviousLoansBeforeLoan()
    {
        return $this->container['noOfPreviousLoansBeforeLoan'];
    }

    /**
     * Sets noOfPreviousLoansBeforeLoan
     *
     * @param int|null $noOfPreviousLoansBeforeLoan Number of previous loans
     *
     * @return $this
     */
    public function setNoOfPreviousLoansBeforeLoan($noOfPreviousLoansBeforeLoan)
    {
        $this->container['noOfPreviousLoansBeforeLoan'] = $noOfPreviousLoansBeforeLoan;

        return $this;
    }

    /**
     * Gets amountOfPreviousLoansBeforeLoan
     *
     * @return double|null
     */
    public function getAmountOfPreviousLoansBeforeLoan()
    {
        return $this->container['amountOfPreviousLoansBeforeLoan'];
    }

    /**
     * Sets amountOfPreviousLoansBeforeLoan
     *
     * @param double|null $amountOfPreviousLoansBeforeLoan Value of previous loans
     *
     * @return $this
     */
    public function setAmountOfPreviousLoansBeforeLoan($amountOfPreviousLoansBeforeLoan)
    {
        $this->container['amountOfPreviousLoansBeforeLoan'] = $amountOfPreviousLoansBeforeLoan;

        return $this;
    }

    /**
     * Gets previousRepaymentsBeforeLoan
     *
     * @return double|null
     */
    public function getPreviousRepaymentsBeforeLoan()
    {
        return $this->container['previousRepaymentsBeforeLoan'];
    }

    /**
     * Sets previousRepaymentsBeforeLoan
     *
     * @param double|null $previousRepaymentsBeforeLoan How much the borrower had repaid before the loan
     *
     * @return $this
     */
    public function setPreviousRepaymentsBeforeLoan($previousRepaymentsBeforeLoan)
    {
        $this->container['previousRepaymentsBeforeLoan'] = $previousRepaymentsBeforeLoan;

        return $this;
    }

    /**
     * Gets previousEarlyRepaymentsBeforeLoan
     *
     * @return double|null
     */
    public function getPreviousEarlyRepaymentsBeforeLoan()
    {
        return $this->container['previousEarlyRepaymentsBeforeLoan'];
    }

    /**
     * Sets previousEarlyRepaymentsBeforeLoan
     *
     * @param double|null $previousEarlyRepaymentsBeforeLoan Previous early repaid amount before this loan
     *
     * @return $this
     */
    public function setPreviousEarlyRepaymentsBeforeLoan($previousEarlyRepaymentsBeforeLoan)
    {
        $this->container['previousEarlyRepaymentsBeforeLoan'] = $previousEarlyRepaymentsBeforeLoan;

        return $this;
    }

    /**
     * Gets previousEarlyRepaymentsCountBeforeLoan
     *
     * @return int|null
     */
    public function getPreviousEarlyRepaymentsCountBeforeLoan()
    {
        return $this->container['previousEarlyRepaymentsCountBeforeLoan'];
    }

    /**
     * Sets previousEarlyRepaymentsCountBeforeLoan
     *
     * @param int|null $previousEarlyRepaymentsCountBeforeLoan Previous early repaid loans before this loan
     *
     * @return $this
     */
    public function setPreviousEarlyRepaymentsCountBeforeLoan($previousEarlyRepaymentsCountBeforeLoan)
    {
        $this->container['previousEarlyRepaymentsCountBeforeLoan'] = $previousEarlyRepaymentsCountBeforeLoan;

        return $this;
    }

    /**
     * Gets gracePeriodStart
     *
     * @return \DateTime|null
     */
    public function getGracePeriodStart()
    {
        return $this->container['gracePeriodStart'];
    }

    /**
     * Sets gracePeriodStart
     *
     * @param \DateTime|null $gracePeriodStart Date of the beginning of Grace period
     *
     * @return $this
     */
    public function setGracePeriodStart($gracePeriodStart)
    {
        $this->container['gracePeriodStart'] = $gracePeriodStart;

        return $this;
    }

    /**
     * Gets gracePeriodEnd
     *
     * @return \DateTime|null
     */
    public function getGracePeriodEnd()
    {
        return $this->container['gracePeriodEnd'];
    }

    /**
     * Sets gracePeriodEnd
     *
     * @param \DateTime|null $gracePeriodEnd Date of the end of Grace period
     *
     * @return $this
     */
    public function setGracePeriodEnd($gracePeriodEnd)
    {
        $this->container['gracePeriodEnd'] = $gracePeriodEnd;

        return $this;
    }

    /**
     * Gets nextPaymentDate
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDate()
    {
        return $this->container['nextPaymentDate'];
    }

    /**
     * Sets nextPaymentDate
     *
     * @param \DateTime|null $nextPaymentDate According to schedule the next date for borrower to make their payment
     *
     * @return $this
     */
    public function setNextPaymentDate($nextPaymentDate)
    {
        $this->container['nextPaymentDate'] = $nextPaymentDate;

        return $this;
    }

    /**
     * Gets nextPaymentNr
     *
     * @return int|null
     */
    public function getNextPaymentNr()
    {
        return $this->container['nextPaymentNr'];
    }

    /**
     * Sets nextPaymentNr
     *
     * @param int|null $nextPaymentNr According to schedule the number of the next payment
     *
     * @return $this
     */
    public function setNextPaymentNr($nextPaymentNr)
    {
        $this->container['nextPaymentNr'] = $nextPaymentNr;

        return $this;
    }

    /**
     * Gets nrOfScheduledPayments
     *
     * @return int|null
     */
    public function getNrOfScheduledPayments()
    {
        return $this->container['nrOfScheduledPayments'];
    }

    /**
     * Sets nrOfScheduledPayments
     *
     * @param int|null $nrOfScheduledPayments According to schedule the count of scheduled payments
     *
     * @return $this
     */
    public function setNrOfScheduledPayments($nrOfScheduledPayments)
    {
        $this->container['nrOfScheduledPayments'] = $nrOfScheduledPayments;

        return $this;
    }

    /**
     * Gets reScheduledOn
     *
     * @return \DateTime|null
     */
    public function getReScheduledOn()
    {
        return $this->container['reScheduledOn'];
    }

    /**
     * Sets reScheduledOn
     *
     * @param \DateTime|null $reScheduledOn The date when the a new schedule was assigned to the borrower
     *
     * @return $this
     */
    public function setReScheduledOn($reScheduledOn)
    {
        $this->container['reScheduledOn'] = $reScheduledOn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


