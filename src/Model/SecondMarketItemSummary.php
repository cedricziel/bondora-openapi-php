<?php
/**
 * SecondMarketItemSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * SecondMarketItemSummary Class Doc Comment
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecondMarketItemSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SecondMarketItemSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'int',
        'startDate' => '\DateTime',
        'plannedCloseDate' => '\DateTime',
        'actualCloseDate' => '\DateTime',
        'userCancelledOn' => '\DateTime',
        'loanPartId' => 'string',
        'desiredDiscountRate' => 'double',
        'desiredDiscountRateDecimalFraction' => 'double',
        'statusCode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'number' => 'int32',
        'startDate' => 'date-time',
        'plannedCloseDate' => 'date-time',
        'actualCloseDate' => 'date-time',
        'userCancelledOn' => 'date-time',
        'loanPartId' => null,
        'desiredDiscountRate' => 'double',
        'desiredDiscountRateDecimalFraction' => 'double',
        'statusCode' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'number' => 'Number',
        'startDate' => 'StartDate',
        'plannedCloseDate' => 'PlannedCloseDate',
        'actualCloseDate' => 'ActualCloseDate',
        'userCancelledOn' => 'UserCancelledOn',
        'loanPartId' => 'LoanPart_id',
        'desiredDiscountRate' => 'DesiredDiscountRate',
        'desiredDiscountRateDecimalFraction' => 'DesiredDiscountRateDecimalFraction',
        'statusCode' => 'StatusCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'startDate' => 'setStartDate',
        'plannedCloseDate' => 'setPlannedCloseDate',
        'actualCloseDate' => 'setActualCloseDate',
        'userCancelledOn' => 'setUserCancelledOn',
        'loanPartId' => 'setLoanPartId',
        'desiredDiscountRate' => 'setDesiredDiscountRate',
        'desiredDiscountRateDecimalFraction' => 'setDesiredDiscountRateDecimalFraction',
        'statusCode' => 'setStatusCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'startDate' => 'getStartDate',
        'plannedCloseDate' => 'getPlannedCloseDate',
        'actualCloseDate' => 'getActualCloseDate',
        'userCancelledOn' => 'getUserCancelledOn',
        'loanPartId' => 'getLoanPartId',
        'desiredDiscountRate' => 'getDesiredDiscountRate',
        'desiredDiscountRateDecimalFraction' => 'getDesiredDiscountRateDecimalFraction',
        'statusCode' => 'getStatusCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_CODE_0 = 0;
    const STATUS_CODE_1 = 1;
    const STATUS_CODE_2 = 2;
    const STATUS_CODE_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusCodeAllowableValues()
    {
        return [
            self::STATUS_CODE_0,
            self::STATUS_CODE_1,
            self::STATUS_CODE_2,
            self::STATUS_CODE_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['plannedCloseDate'] = isset($data['plannedCloseDate']) ? $data['plannedCloseDate'] : null;
        $this->container['actualCloseDate'] = isset($data['actualCloseDate']) ? $data['actualCloseDate'] : null;
        $this->container['userCancelledOn'] = isset($data['userCancelledOn']) ? $data['userCancelledOn'] : null;
        $this->container['loanPartId'] = isset($data['loanPartId']) ? $data['loanPartId'] : null;
        $this->container['desiredDiscountRate'] = isset($data['desiredDiscountRate']) ? $data['desiredDiscountRate'] : null;
        $this->container['desiredDiscountRateDecimalFraction'] = isset($data['desiredDiscountRateDecimalFraction']) ? $data['desiredDiscountRateDecimalFraction'] : null;
        $this->container['statusCode'] = isset($data['statusCode']) ? $data['statusCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($this->container['statusCode']) && !in_array($this->container['statusCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'statusCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Item unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number Number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate Item start date
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets plannedCloseDate
     *
     * @return \DateTime|null
     */
    public function getPlannedCloseDate()
    {
        return $this->container['plannedCloseDate'];
    }

    /**
     * Sets plannedCloseDate
     *
     * @param \DateTime|null $plannedCloseDate Planned close date
     *
     * @return $this
     */
    public function setPlannedCloseDate($plannedCloseDate)
    {
        $this->container['plannedCloseDate'] = $plannedCloseDate;

        return $this;
    }

    /**
     * Gets actualCloseDate
     *
     * @return \DateTime|null
     */
    public function getActualCloseDate()
    {
        return $this->container['actualCloseDate'];
    }

    /**
     * Sets actualCloseDate
     *
     * @param \DateTime|null $actualCloseDate Actual close date
     *
     * @return $this
     */
    public function setActualCloseDate($actualCloseDate)
    {
        $this->container['actualCloseDate'] = $actualCloseDate;

        return $this;
    }

    /**
     * Gets userCancelledOn
     *
     * @return \DateTime|null
     */
    public function getUserCancelledOn()
    {
        return $this->container['userCancelledOn'];
    }

    /**
     * Sets userCancelledOn
     *
     * @param \DateTime|null $userCancelledOn User cancelled on
     *
     * @return $this
     */
    public function setUserCancelledOn($userCancelledOn)
    {
        $this->container['userCancelledOn'] = $userCancelledOn;

        return $this;
    }

    /**
     * Gets loanPartId
     *
     * @return string|null
     */
    public function getLoanPartId()
    {
        return $this->container['loanPartId'];
    }

    /**
     * Sets loanPartId
     *
     * @param string|null $loanPartId LoanPart being sold
     *
     * @return $this
     */
    public function setLoanPartId($loanPartId)
    {
        $this->container['loanPartId'] = $loanPartId;

        return $this;
    }

    /**
     * Gets desiredDiscountRate
     *
     * @return double|null
     */
    public function getDesiredDiscountRate()
    {
        return $this->container['desiredDiscountRate'];
    }

    /**
     * Sets desiredDiscountRate
     *
     * @param double|null $desiredDiscountRate Discount rate percent
     *
     * @return $this
     */
    public function setDesiredDiscountRate($desiredDiscountRate)
    {
        $this->container['desiredDiscountRate'] = $desiredDiscountRate;

        return $this;
    }

    /**
     * Gets desiredDiscountRateDecimalFraction
     *
     * @return double|null
     */
    public function getDesiredDiscountRateDecimalFraction()
    {
        return $this->container['desiredDiscountRateDecimalFraction'];
    }

    /**
     * Sets desiredDiscountRateDecimalFraction
     *
     * @param double|null $desiredDiscountRateDecimalFraction Discount rate as fraction (0.0 - 1.0)
     *
     * @return $this
     */
    public function setDesiredDiscountRateDecimalFraction($desiredDiscountRateDecimalFraction)
    {
        $this->container['desiredDiscountRateDecimalFraction'] = $desiredDiscountRateDecimalFraction;

        return $this;
    }

    /**
     * Gets statusCode
     *
     * @return int|null
     */
    public function getStatusCode()
    {
        return $this->container['statusCode'];
    }

    /**
     * Sets statusCode
     *
     * @param int|null $statusCode Current status code              <para>0 Created</para><para>1 Open in marketplace</para><para>2 Successfully sold</para><para>3 Failed</para>
     *
     * @return $this
     */
    public function setStatusCode($statusCode)
    {
        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($statusCode) && !in_array($statusCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'statusCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['statusCode'] = $statusCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


