<?php
/**
 * SecondMarketRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * SecondMarketRequest Class Doc Comment
 *
 * @category Class
 * @description Request object for filtering secondary market
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SecondMarketRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SecondMarketRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loanIssuedDateFrom' => '\DateTime',
        'loanIssuedDateTo' => '\DateTime',
        'principalMin' => 'double',
        'principalMax' => 'double',
        'interestMin' => 'double',
        'interestMax' => 'double',
        'lengthMax' => 'int',
        'lengthMin' => 'int',
        'hasDebt' => 'bool',
        'loanStatusCode' => 'int[]',
        'loanDebtManagementStageType' => 'int',
        'loanDebtManagementDateActiveFrom' => '\DateTime',
        'loanDebtManagementDateActiveTo' => '\DateTime',
        'latePrincipalAmountMin' => 'double',
        'latePrincipalAmountMax' => 'double',
        'priceMin' => 'double',
        'priceMax' => 'double',
        'useOfLoan' => 'int',
        'hasNewSchedule' => 'bool',
        'countries' => 'string[]',
        'ratings' => 'string[]',
        'creditScoreMin' => 'int',
        'creditScoreMax' => 'int',
        'userName' => 'string',
        'gender' => 'int',
        'ageMin' => 'int',
        'ageMax' => 'int',
        'incomeVerificationStatus' => 'int',
        'showMyItems' => 'bool',
        'auctionId' => 'string',
        'listedOnDateFrom' => '\DateTime',
        'listedOnDateTo' => '\DateTime',
        'debtOccuredOnFrom' => '\DateTime',
        'debtOccuredOnTo' => '\DateTime',
        'debtOccuredOnForSecondaryFrom' => '\DateTime',
        'debtOccuredOnForSecondaryTo' => '\DateTime',
        'defaultedDateFrom' => '\DateTime',
        'defaultedDateTo' => '\DateTime',
        'rescheduledFrom' => '\DateTime',
        'rescheduledTo' => '\DateTime',
        'lastPaymentDateFrom' => '\DateTime',
        'lastPaymentDateTo' => '\DateTime',
        'nextPaymentDateFrom' => '\DateTime',
        'nextPaymentDateTo' => '\DateTime',
        'desiredDiscountRateMin' => 'double',
        'desiredDiscountRateMax' => 'double',
        'xirrMin' => 'double',
        'xirrMax' => 'double',
        'pageSize' => 'int',
        'pageNr' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'loanIssuedDateFrom' => 'date-time',
        'loanIssuedDateTo' => 'date-time',
        'principalMin' => 'double',
        'principalMax' => 'double',
        'interestMin' => 'double',
        'interestMax' => 'double',
        'lengthMax' => 'int32',
        'lengthMin' => 'int32',
        'hasDebt' => null,
        'loanStatusCode' => 'int32',
        'loanDebtManagementStageType' => 'int32',
        'loanDebtManagementDateActiveFrom' => 'date-time',
        'loanDebtManagementDateActiveTo' => 'date-time',
        'latePrincipalAmountMin' => 'double',
        'latePrincipalAmountMax' => 'double',
        'priceMin' => 'double',
        'priceMax' => 'double',
        'useOfLoan' => 'int32',
        'hasNewSchedule' => null,
        'countries' => null,
        'ratings' => null,
        'creditScoreMin' => 'int32',
        'creditScoreMax' => 'int32',
        'userName' => null,
        'gender' => 'int32',
        'ageMin' => 'int32',
        'ageMax' => 'int32',
        'incomeVerificationStatus' => 'int32',
        'showMyItems' => null,
        'auctionId' => null,
        'listedOnDateFrom' => 'date-time',
        'listedOnDateTo' => 'date-time',
        'debtOccuredOnFrom' => 'date-time',
        'debtOccuredOnTo' => 'date-time',
        'debtOccuredOnForSecondaryFrom' => 'date-time',
        'debtOccuredOnForSecondaryTo' => 'date-time',
        'defaultedDateFrom' => 'date-time',
        'defaultedDateTo' => 'date-time',
        'rescheduledFrom' => 'date-time',
        'rescheduledTo' => 'date-time',
        'lastPaymentDateFrom' => 'date-time',
        'lastPaymentDateTo' => 'date-time',
        'nextPaymentDateFrom' => 'date-time',
        'nextPaymentDateTo' => 'date-time',
        'desiredDiscountRateMin' => 'double',
        'desiredDiscountRateMax' => 'double',
        'xirrMin' => 'double',
        'xirrMax' => 'double',
        'pageSize' => 'int32',
        'pageNr' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loanIssuedDateFrom' => 'LoanIssuedDateFrom',
        'loanIssuedDateTo' => 'LoanIssuedDateTo',
        'principalMin' => 'PrincipalMin',
        'principalMax' => 'PrincipalMax',
        'interestMin' => 'InterestMin',
        'interestMax' => 'InterestMax',
        'lengthMax' => 'LengthMax',
        'lengthMin' => 'LengthMin',
        'hasDebt' => 'HasDebt',
        'loanStatusCode' => 'LoanStatusCode',
        'loanDebtManagementStageType' => 'LoanDebtManagementStageType',
        'loanDebtManagementDateActiveFrom' => 'LoanDebtManagementDateActiveFrom',
        'loanDebtManagementDateActiveTo' => 'LoanDebtManagementDateActiveTo',
        'latePrincipalAmountMin' => 'LatePrincipalAmountMin',
        'latePrincipalAmountMax' => 'LatePrincipalAmountMax',
        'priceMin' => 'PriceMin',
        'priceMax' => 'PriceMax',
        'useOfLoan' => 'UseOfLoan',
        'hasNewSchedule' => 'HasNewSchedule',
        'countries' => 'Countries',
        'ratings' => 'Ratings',
        'creditScoreMin' => 'CreditScoreMin',
        'creditScoreMax' => 'CreditScoreMax',
        'userName' => 'UserName',
        'gender' => 'Gender',
        'ageMin' => 'AgeMin',
        'ageMax' => 'AgeMax',
        'incomeVerificationStatus' => 'IncomeVerificationStatus',
        'showMyItems' => 'ShowMyItems',
        'auctionId' => 'AuctionId',
        'listedOnDateFrom' => 'ListedOnDateFrom',
        'listedOnDateTo' => 'ListedOnDateTo',
        'debtOccuredOnFrom' => 'DebtOccuredOnFrom',
        'debtOccuredOnTo' => 'DebtOccuredOnTo',
        'debtOccuredOnForSecondaryFrom' => 'DebtOccuredOnForSecondaryFrom',
        'debtOccuredOnForSecondaryTo' => 'DebtOccuredOnForSecondaryTo',
        'defaultedDateFrom' => 'DefaultedDateFrom',
        'defaultedDateTo' => 'DefaultedDateTo',
        'rescheduledFrom' => 'RescheduledFrom',
        'rescheduledTo' => 'RescheduledTo',
        'lastPaymentDateFrom' => 'LastPaymentDateFrom',
        'lastPaymentDateTo' => 'LastPaymentDateTo',
        'nextPaymentDateFrom' => 'NextPaymentDateFrom',
        'nextPaymentDateTo' => 'NextPaymentDateTo',
        'desiredDiscountRateMin' => 'DesiredDiscountRateMin',
        'desiredDiscountRateMax' => 'DesiredDiscountRateMax',
        'xirrMin' => 'XirrMin',
        'xirrMax' => 'XirrMax',
        'pageSize' => 'PageSize',
        'pageNr' => 'PageNr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loanIssuedDateFrom' => 'setLoanIssuedDateFrom',
        'loanIssuedDateTo' => 'setLoanIssuedDateTo',
        'principalMin' => 'setPrincipalMin',
        'principalMax' => 'setPrincipalMax',
        'interestMin' => 'setInterestMin',
        'interestMax' => 'setInterestMax',
        'lengthMax' => 'setLengthMax',
        'lengthMin' => 'setLengthMin',
        'hasDebt' => 'setHasDebt',
        'loanStatusCode' => 'setLoanStatusCode',
        'loanDebtManagementStageType' => 'setLoanDebtManagementStageType',
        'loanDebtManagementDateActiveFrom' => 'setLoanDebtManagementDateActiveFrom',
        'loanDebtManagementDateActiveTo' => 'setLoanDebtManagementDateActiveTo',
        'latePrincipalAmountMin' => 'setLatePrincipalAmountMin',
        'latePrincipalAmountMax' => 'setLatePrincipalAmountMax',
        'priceMin' => 'setPriceMin',
        'priceMax' => 'setPriceMax',
        'useOfLoan' => 'setUseOfLoan',
        'hasNewSchedule' => 'setHasNewSchedule',
        'countries' => 'setCountries',
        'ratings' => 'setRatings',
        'creditScoreMin' => 'setCreditScoreMin',
        'creditScoreMax' => 'setCreditScoreMax',
        'userName' => 'setUserName',
        'gender' => 'setGender',
        'ageMin' => 'setAgeMin',
        'ageMax' => 'setAgeMax',
        'incomeVerificationStatus' => 'setIncomeVerificationStatus',
        'showMyItems' => 'setShowMyItems',
        'auctionId' => 'setAuctionId',
        'listedOnDateFrom' => 'setListedOnDateFrom',
        'listedOnDateTo' => 'setListedOnDateTo',
        'debtOccuredOnFrom' => 'setDebtOccuredOnFrom',
        'debtOccuredOnTo' => 'setDebtOccuredOnTo',
        'debtOccuredOnForSecondaryFrom' => 'setDebtOccuredOnForSecondaryFrom',
        'debtOccuredOnForSecondaryTo' => 'setDebtOccuredOnForSecondaryTo',
        'defaultedDateFrom' => 'setDefaultedDateFrom',
        'defaultedDateTo' => 'setDefaultedDateTo',
        'rescheduledFrom' => 'setRescheduledFrom',
        'rescheduledTo' => 'setRescheduledTo',
        'lastPaymentDateFrom' => 'setLastPaymentDateFrom',
        'lastPaymentDateTo' => 'setLastPaymentDateTo',
        'nextPaymentDateFrom' => 'setNextPaymentDateFrom',
        'nextPaymentDateTo' => 'setNextPaymentDateTo',
        'desiredDiscountRateMin' => 'setDesiredDiscountRateMin',
        'desiredDiscountRateMax' => 'setDesiredDiscountRateMax',
        'xirrMin' => 'setXirrMin',
        'xirrMax' => 'setXirrMax',
        'pageSize' => 'setPageSize',
        'pageNr' => 'setPageNr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loanIssuedDateFrom' => 'getLoanIssuedDateFrom',
        'loanIssuedDateTo' => 'getLoanIssuedDateTo',
        'principalMin' => 'getPrincipalMin',
        'principalMax' => 'getPrincipalMax',
        'interestMin' => 'getInterestMin',
        'interestMax' => 'getInterestMax',
        'lengthMax' => 'getLengthMax',
        'lengthMin' => 'getLengthMin',
        'hasDebt' => 'getHasDebt',
        'loanStatusCode' => 'getLoanStatusCode',
        'loanDebtManagementStageType' => 'getLoanDebtManagementStageType',
        'loanDebtManagementDateActiveFrom' => 'getLoanDebtManagementDateActiveFrom',
        'loanDebtManagementDateActiveTo' => 'getLoanDebtManagementDateActiveTo',
        'latePrincipalAmountMin' => 'getLatePrincipalAmountMin',
        'latePrincipalAmountMax' => 'getLatePrincipalAmountMax',
        'priceMin' => 'getPriceMin',
        'priceMax' => 'getPriceMax',
        'useOfLoan' => 'getUseOfLoan',
        'hasNewSchedule' => 'getHasNewSchedule',
        'countries' => 'getCountries',
        'ratings' => 'getRatings',
        'creditScoreMin' => 'getCreditScoreMin',
        'creditScoreMax' => 'getCreditScoreMax',
        'userName' => 'getUserName',
        'gender' => 'getGender',
        'ageMin' => 'getAgeMin',
        'ageMax' => 'getAgeMax',
        'incomeVerificationStatus' => 'getIncomeVerificationStatus',
        'showMyItems' => 'getShowMyItems',
        'auctionId' => 'getAuctionId',
        'listedOnDateFrom' => 'getListedOnDateFrom',
        'listedOnDateTo' => 'getListedOnDateTo',
        'debtOccuredOnFrom' => 'getDebtOccuredOnFrom',
        'debtOccuredOnTo' => 'getDebtOccuredOnTo',
        'debtOccuredOnForSecondaryFrom' => 'getDebtOccuredOnForSecondaryFrom',
        'debtOccuredOnForSecondaryTo' => 'getDebtOccuredOnForSecondaryTo',
        'defaultedDateFrom' => 'getDefaultedDateFrom',
        'defaultedDateTo' => 'getDefaultedDateTo',
        'rescheduledFrom' => 'getRescheduledFrom',
        'rescheduledTo' => 'getRescheduledTo',
        'lastPaymentDateFrom' => 'getLastPaymentDateFrom',
        'lastPaymentDateTo' => 'getLastPaymentDateTo',
        'nextPaymentDateFrom' => 'getNextPaymentDateFrom',
        'nextPaymentDateTo' => 'getNextPaymentDateTo',
        'desiredDiscountRateMin' => 'getDesiredDiscountRateMin',
        'desiredDiscountRateMax' => 'getDesiredDiscountRateMax',
        'xirrMin' => 'getXirrMin',
        'xirrMax' => 'getXirrMax',
        'pageSize' => 'getPageSize',
        'pageNr' => 'getPageNr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LOAN_DEBT_MANAGEMENT_STAGE_TYPE_1 = 1;
    const LOAN_DEBT_MANAGEMENT_STAGE_TYPE_2 = 2;
    const LOAN_DEBT_MANAGEMENT_STAGE_TYPE_3 = 3;
    const LOAN_DEBT_MANAGEMENT_STAGE_TYPE_MINUS_1 = -1;
    const USE_OF_LOAN_0 = 0;
    const USE_OF_LOAN_1 = 1;
    const USE_OF_LOAN_2 = 2;
    const USE_OF_LOAN_3 = 3;
    const USE_OF_LOAN_4 = 4;
    const USE_OF_LOAN_5 = 5;
    const USE_OF_LOAN_6 = 6;
    const USE_OF_LOAN_7 = 7;
    const USE_OF_LOAN_8 = 8;
    const USE_OF_LOAN_101 = 101;
    const USE_OF_LOAN_102 = 102;
    const USE_OF_LOAN_103 = 103;
    const USE_OF_LOAN_104 = 104;
    const USE_OF_LOAN_105 = 105;
    const USE_OF_LOAN_106 = 106;
    const USE_OF_LOAN_107 = 107;
    const USE_OF_LOAN_108 = 108;
    const USE_OF_LOAN_109 = 109;
    const USE_OF_LOAN_110 = 110;
    const USE_OF_LOAN_201 = 201;
    const USE_OF_LOAN_202 = 202;
    const USE_OF_LOAN_203 = 203;
    const USE_OF_LOAN_204 = 204;
    const USE_OF_LOAN_205 = 205;
    const USE_OF_LOAN_206 = 206;
    const USE_OF_LOAN_207 = 207;
    const USE_OF_LOAN_208 = 208;
    const USE_OF_LOAN_209 = 209;
    const USE_OF_LOAN_210 = 210;
    const USE_OF_LOAN_211 = 211;
    const USE_OF_LOAN_MINUS_1 = -1;
    const INCOME_VERIFICATION_STATUS_1 = 1;
    const INCOME_VERIFICATION_STATUS_2 = 2;
    const INCOME_VERIFICATION_STATUS_3 = 3;
    const INCOME_VERIFICATION_STATUS_4 = 4;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoanDebtManagementStageTypeAllowableValues()
    {
        return [
            self::LOAN_DEBT_MANAGEMENT_STAGE_TYPE_1,
            self::LOAN_DEBT_MANAGEMENT_STAGE_TYPE_2,
            self::LOAN_DEBT_MANAGEMENT_STAGE_TYPE_3,
            self::LOAN_DEBT_MANAGEMENT_STAGE_TYPE_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUseOfLoanAllowableValues()
    {
        return [
            self::USE_OF_LOAN_0,
            self::USE_OF_LOAN_1,
            self::USE_OF_LOAN_2,
            self::USE_OF_LOAN_3,
            self::USE_OF_LOAN_4,
            self::USE_OF_LOAN_5,
            self::USE_OF_LOAN_6,
            self::USE_OF_LOAN_7,
            self::USE_OF_LOAN_8,
            self::USE_OF_LOAN_101,
            self::USE_OF_LOAN_102,
            self::USE_OF_LOAN_103,
            self::USE_OF_LOAN_104,
            self::USE_OF_LOAN_105,
            self::USE_OF_LOAN_106,
            self::USE_OF_LOAN_107,
            self::USE_OF_LOAN_108,
            self::USE_OF_LOAN_109,
            self::USE_OF_LOAN_110,
            self::USE_OF_LOAN_201,
            self::USE_OF_LOAN_202,
            self::USE_OF_LOAN_203,
            self::USE_OF_LOAN_204,
            self::USE_OF_LOAN_205,
            self::USE_OF_LOAN_206,
            self::USE_OF_LOAN_207,
            self::USE_OF_LOAN_208,
            self::USE_OF_LOAN_209,
            self::USE_OF_LOAN_210,
            self::USE_OF_LOAN_211,
            self::USE_OF_LOAN_MINUS_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncomeVerificationStatusAllowableValues()
    {
        return [
            self::INCOME_VERIFICATION_STATUS_1,
            self::INCOME_VERIFICATION_STATUS_2,
            self::INCOME_VERIFICATION_STATUS_3,
            self::INCOME_VERIFICATION_STATUS_4,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loanIssuedDateFrom'] = isset($data['loanIssuedDateFrom']) ? $data['loanIssuedDateFrom'] : null;
        $this->container['loanIssuedDateTo'] = isset($data['loanIssuedDateTo']) ? $data['loanIssuedDateTo'] : null;
        $this->container['principalMin'] = isset($data['principalMin']) ? $data['principalMin'] : null;
        $this->container['principalMax'] = isset($data['principalMax']) ? $data['principalMax'] : null;
        $this->container['interestMin'] = isset($data['interestMin']) ? $data['interestMin'] : null;
        $this->container['interestMax'] = isset($data['interestMax']) ? $data['interestMax'] : null;
        $this->container['lengthMax'] = isset($data['lengthMax']) ? $data['lengthMax'] : null;
        $this->container['lengthMin'] = isset($data['lengthMin']) ? $data['lengthMin'] : null;
        $this->container['hasDebt'] = isset($data['hasDebt']) ? $data['hasDebt'] : null;
        $this->container['loanStatusCode'] = isset($data['loanStatusCode']) ? $data['loanStatusCode'] : null;
        $this->container['loanDebtManagementStageType'] = isset($data['loanDebtManagementStageType']) ? $data['loanDebtManagementStageType'] : null;
        $this->container['loanDebtManagementDateActiveFrom'] = isset($data['loanDebtManagementDateActiveFrom']) ? $data['loanDebtManagementDateActiveFrom'] : null;
        $this->container['loanDebtManagementDateActiveTo'] = isset($data['loanDebtManagementDateActiveTo']) ? $data['loanDebtManagementDateActiveTo'] : null;
        $this->container['latePrincipalAmountMin'] = isset($data['latePrincipalAmountMin']) ? $data['latePrincipalAmountMin'] : null;
        $this->container['latePrincipalAmountMax'] = isset($data['latePrincipalAmountMax']) ? $data['latePrincipalAmountMax'] : null;
        $this->container['priceMin'] = isset($data['priceMin']) ? $data['priceMin'] : null;
        $this->container['priceMax'] = isset($data['priceMax']) ? $data['priceMax'] : null;
        $this->container['useOfLoan'] = isset($data['useOfLoan']) ? $data['useOfLoan'] : null;
        $this->container['hasNewSchedule'] = isset($data['hasNewSchedule']) ? $data['hasNewSchedule'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['ratings'] = isset($data['ratings']) ? $data['ratings'] : null;
        $this->container['creditScoreMin'] = isset($data['creditScoreMin']) ? $data['creditScoreMin'] : null;
        $this->container['creditScoreMax'] = isset($data['creditScoreMax']) ? $data['creditScoreMax'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['ageMin'] = isset($data['ageMin']) ? $data['ageMin'] : null;
        $this->container['ageMax'] = isset($data['ageMax']) ? $data['ageMax'] : null;
        $this->container['incomeVerificationStatus'] = isset($data['incomeVerificationStatus']) ? $data['incomeVerificationStatus'] : null;
        $this->container['showMyItems'] = isset($data['showMyItems']) ? $data['showMyItems'] : null;
        $this->container['auctionId'] = isset($data['auctionId']) ? $data['auctionId'] : null;
        $this->container['listedOnDateFrom'] = isset($data['listedOnDateFrom']) ? $data['listedOnDateFrom'] : null;
        $this->container['listedOnDateTo'] = isset($data['listedOnDateTo']) ? $data['listedOnDateTo'] : null;
        $this->container['debtOccuredOnFrom'] = isset($data['debtOccuredOnFrom']) ? $data['debtOccuredOnFrom'] : null;
        $this->container['debtOccuredOnTo'] = isset($data['debtOccuredOnTo']) ? $data['debtOccuredOnTo'] : null;
        $this->container['debtOccuredOnForSecondaryFrom'] = isset($data['debtOccuredOnForSecondaryFrom']) ? $data['debtOccuredOnForSecondaryFrom'] : null;
        $this->container['debtOccuredOnForSecondaryTo'] = isset($data['debtOccuredOnForSecondaryTo']) ? $data['debtOccuredOnForSecondaryTo'] : null;
        $this->container['defaultedDateFrom'] = isset($data['defaultedDateFrom']) ? $data['defaultedDateFrom'] : null;
        $this->container['defaultedDateTo'] = isset($data['defaultedDateTo']) ? $data['defaultedDateTo'] : null;
        $this->container['rescheduledFrom'] = isset($data['rescheduledFrom']) ? $data['rescheduledFrom'] : null;
        $this->container['rescheduledTo'] = isset($data['rescheduledTo']) ? $data['rescheduledTo'] : null;
        $this->container['lastPaymentDateFrom'] = isset($data['lastPaymentDateFrom']) ? $data['lastPaymentDateFrom'] : null;
        $this->container['lastPaymentDateTo'] = isset($data['lastPaymentDateTo']) ? $data['lastPaymentDateTo'] : null;
        $this->container['nextPaymentDateFrom'] = isset($data['nextPaymentDateFrom']) ? $data['nextPaymentDateFrom'] : null;
        $this->container['nextPaymentDateTo'] = isset($data['nextPaymentDateTo']) ? $data['nextPaymentDateTo'] : null;
        $this->container['desiredDiscountRateMin'] = isset($data['desiredDiscountRateMin']) ? $data['desiredDiscountRateMin'] : null;
        $this->container['desiredDiscountRateMax'] = isset($data['desiredDiscountRateMax']) ? $data['desiredDiscountRateMax'] : null;
        $this->container['xirrMin'] = isset($data['xirrMin']) ? $data['xirrMin'] : null;
        $this->container['xirrMax'] = isset($data['xirrMax']) ? $data['xirrMax'] : null;
        $this->container['pageSize'] = isset($data['pageSize']) ? $data['pageSize'] : null;
        $this->container['pageNr'] = isset($data['pageNr']) ? $data['pageNr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLoanDebtManagementStageTypeAllowableValues();
        if (!is_null($this->container['loanDebtManagementStageType']) && !in_array($this->container['loanDebtManagementStageType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'loanDebtManagementStageType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($this->container['useOfLoan']) && !in_array($this->container['useOfLoan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'useOfLoan', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIncomeVerificationStatusAllowableValues();
        if (!is_null($this->container['incomeVerificationStatus']) && !in_array($this->container['incomeVerificationStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'incomeVerificationStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pageSize']) && ($this->container['pageSize'] > 100000)) {
            $invalidProperties[] = "invalid value for 'pageSize', must be smaller than or equal to 100000.";
        }

        if (!is_null($this->container['pageSize']) && ($this->container['pageSize'] < 1)) {
            $invalidProperties[] = "invalid value for 'pageSize', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pageNr']) && ($this->container['pageNr'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'pageNr', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['pageNr']) && ($this->container['pageNr'] < 1)) {
            $invalidProperties[] = "invalid value for 'pageNr', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loanIssuedDateFrom
     *
     * @return \DateTime|null
     */
    public function getLoanIssuedDateFrom()
    {
        return $this->container['loanIssuedDateFrom'];
    }

    /**
     * Sets loanIssuedDateFrom
     *
     * @param \DateTime|null $loanIssuedDateFrom Loan issued start date from
     *
     * @return $this
     */
    public function setLoanIssuedDateFrom($loanIssuedDateFrom)
    {
        $this->container['loanIssuedDateFrom'] = $loanIssuedDateFrom;

        return $this;
    }

    /**
     * Gets loanIssuedDateTo
     *
     * @return \DateTime|null
     */
    public function getLoanIssuedDateTo()
    {
        return $this->container['loanIssuedDateTo'];
    }

    /**
     * Sets loanIssuedDateTo
     *
     * @param \DateTime|null $loanIssuedDateTo Loan issued start date to
     *
     * @return $this
     */
    public function setLoanIssuedDateTo($loanIssuedDateTo)
    {
        $this->container['loanIssuedDateTo'] = $loanIssuedDateTo;

        return $this;
    }

    /**
     * Gets principalMin
     *
     * @return double|null
     */
    public function getPrincipalMin()
    {
        return $this->container['principalMin'];
    }

    /**
     * Sets principalMin
     *
     * @param double|null $principalMin Remaining principal amount min
     *
     * @return $this
     */
    public function setPrincipalMin($principalMin)
    {
        $this->container['principalMin'] = $principalMin;

        return $this;
    }

    /**
     * Gets principalMax
     *
     * @return double|null
     */
    public function getPrincipalMax()
    {
        return $this->container['principalMax'];
    }

    /**
     * Sets principalMax
     *
     * @param double|null $principalMax Remaining principal amount max
     *
     * @return $this
     */
    public function setPrincipalMax($principalMax)
    {
        $this->container['principalMax'] = $principalMax;

        return $this;
    }

    /**
     * Gets interestMin
     *
     * @return double|null
     */
    public function getInterestMin()
    {
        return $this->container['interestMin'];
    }

    /**
     * Sets interestMin
     *
     * @param double|null $interestMin Interest rate min
     *
     * @return $this
     */
    public function setInterestMin($interestMin)
    {
        $this->container['interestMin'] = $interestMin;

        return $this;
    }

    /**
     * Gets interestMax
     *
     * @return double|null
     */
    public function getInterestMax()
    {
        return $this->container['interestMax'];
    }

    /**
     * Sets interestMax
     *
     * @param double|null $interestMax Interest rate max
     *
     * @return $this
     */
    public function setInterestMax($interestMax)
    {
        $this->container['interestMax'] = $interestMax;

        return $this;
    }

    /**
     * Gets lengthMax
     *
     * @return int|null
     */
    public function getLengthMax()
    {
        return $this->container['lengthMax'];
    }

    /**
     * Sets lengthMax
     *
     * @param int|null $lengthMax Loan lenght min
     *
     * @return $this
     */
    public function setLengthMax($lengthMax)
    {
        $this->container['lengthMax'] = $lengthMax;

        return $this;
    }

    /**
     * Gets lengthMin
     *
     * @return int|null
     */
    public function getLengthMin()
    {
        return $this->container['lengthMin'];
    }

    /**
     * Sets lengthMin
     *
     * @param int|null $lengthMin Loan lenght max
     *
     * @return $this
     */
    public function setLengthMin($lengthMin)
    {
        $this->container['lengthMin'] = $lengthMin;

        return $this;
    }

    /**
     * Gets hasDebt
     *
     * @return bool|null
     */
    public function getHasDebt()
    {
        return $this->container['hasDebt'];
    }

    /**
     * Sets hasDebt
     *
     * @param bool|null $hasDebt Is overdue
     *
     * @return $this
     */
    public function setHasDebt($hasDebt)
    {
        $this->container['hasDebt'] = $hasDebt;

        return $this;
    }

    /**
     * Gets loanStatusCode
     *
     * @return int[]|null
     */
    public function getLoanStatusCode()
    {
        return $this->container['loanStatusCode'];
    }

    /**
     * Sets loanStatusCode
     *
     * @param int[]|null $loanStatusCode Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para>
     *
     * @return $this
     */
    public function setLoanStatusCode($loanStatusCode)
    {
        $this->container['loanStatusCode'] = $loanStatusCode;

        return $this;
    }

    /**
     * Gets loanDebtManagementStageType
     *
     * @return int|null
     */
    public function getLoanDebtManagementStageType()
    {
        return $this->container['loanDebtManagementStageType'];
    }

    /**
     * Sets loanDebtManagementStageType
     *
     * @param int|null $loanDebtManagementStageType Latest debt management stage type
     *
     * @return $this
     */
    public function setLoanDebtManagementStageType($loanDebtManagementStageType)
    {
        $allowedValues = $this->getLoanDebtManagementStageTypeAllowableValues();
        if (!is_null($loanDebtManagementStageType) && !in_array($loanDebtManagementStageType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'loanDebtManagementStageType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loanDebtManagementStageType'] = $loanDebtManagementStageType;

        return $this;
    }

    /**
     * Gets loanDebtManagementDateActiveFrom
     *
     * @return \DateTime|null
     */
    public function getLoanDebtManagementDateActiveFrom()
    {
        return $this->container['loanDebtManagementDateActiveFrom'];
    }

    /**
     * Sets loanDebtManagementDateActiveFrom
     *
     * @param \DateTime|null $loanDebtManagementDateActiveFrom Latest debt management date active from
     *
     * @return $this
     */
    public function setLoanDebtManagementDateActiveFrom($loanDebtManagementDateActiveFrom)
    {
        $this->container['loanDebtManagementDateActiveFrom'] = $loanDebtManagementDateActiveFrom;

        return $this;
    }

    /**
     * Gets loanDebtManagementDateActiveTo
     *
     * @return \DateTime|null
     */
    public function getLoanDebtManagementDateActiveTo()
    {
        return $this->container['loanDebtManagementDateActiveTo'];
    }

    /**
     * Sets loanDebtManagementDateActiveTo
     *
     * @param \DateTime|null $loanDebtManagementDateActiveTo Latest debt management date active to
     *
     * @return $this
     */
    public function setLoanDebtManagementDateActiveTo($loanDebtManagementDateActiveTo)
    {
        $this->container['loanDebtManagementDateActiveTo'] = $loanDebtManagementDateActiveTo;

        return $this;
    }

    /**
     * Gets latePrincipalAmountMin
     *
     * @return double|null
     */
    public function getLatePrincipalAmountMin()
    {
        return $this->container['latePrincipalAmountMin'];
    }

    /**
     * Sets latePrincipalAmountMin
     *
     * @param double|null $latePrincipalAmountMin Principal debt amount min
     *
     * @return $this
     */
    public function setLatePrincipalAmountMin($latePrincipalAmountMin)
    {
        $this->container['latePrincipalAmountMin'] = $latePrincipalAmountMin;

        return $this;
    }

    /**
     * Gets latePrincipalAmountMax
     *
     * @return double|null
     */
    public function getLatePrincipalAmountMax()
    {
        return $this->container['latePrincipalAmountMax'];
    }

    /**
     * Sets latePrincipalAmountMax
     *
     * @param double|null $latePrincipalAmountMax Principal debt amount max
     *
     * @return $this
     */
    public function setLatePrincipalAmountMax($latePrincipalAmountMax)
    {
        $this->container['latePrincipalAmountMax'] = $latePrincipalAmountMax;

        return $this;
    }

    /**
     * Gets priceMin
     *
     * @return double|null
     */
    public function getPriceMin()
    {
        return $this->container['priceMin'];
    }

    /**
     * Sets priceMin
     *
     * @param double|null $priceMin Price amount min
     *
     * @return $this
     */
    public function setPriceMin($priceMin)
    {
        $this->container['priceMin'] = $priceMin;

        return $this;
    }

    /**
     * Gets priceMax
     *
     * @return double|null
     */
    public function getPriceMax()
    {
        return $this->container['priceMax'];
    }

    /**
     * Sets priceMax
     *
     * @param double|null $priceMax Price amount max
     *
     * @return $this
     */
    public function setPriceMax($priceMax)
    {
        $this->container['priceMax'] = $priceMax;

        return $this;
    }

    /**
     * Gets useOfLoan
     *
     * @return int|null
     */
    public function getUseOfLoan()
    {
        return $this->container['useOfLoan'];
    }

    /**
     * Sets useOfLoan
     *
     * @param int|null $useOfLoan Use of loan
     *
     * @return $this
     */
    public function setUseOfLoan($useOfLoan)
    {
        $allowedValues = $this->getUseOfLoanAllowableValues();
        if (!is_null($useOfLoan) && !in_array($useOfLoan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'useOfLoan', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['useOfLoan'] = $useOfLoan;

        return $this;
    }

    /**
     * Gets hasNewSchedule
     *
     * @return bool|null
     */
    public function getHasNewSchedule()
    {
        return $this->container['hasNewSchedule'];
    }

    /**
     * Sets hasNewSchedule
     *
     * @param bool|null $hasNewSchedule Has been rescheduled
     *
     * @return $this
     */
    public function setHasNewSchedule($hasNewSchedule)
    {
        $this->container['hasNewSchedule'] = $hasNewSchedule;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[]|null $countries Two letter iso code for country of origin: EE, ES, FI
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets ratings
     *
     * @return string[]|null
     */
    public function getRatings()
    {
        return $this->container['ratings'];
    }

    /**
     * Sets ratings
     *
     * @param string[]|null $ratings Bondora's rating: AA, A, B, C, D, E, F, HR
     *
     * @return $this
     */
    public function setRatings($ratings)
    {
        $this->container['ratings'] = $ratings;

        return $this;
    }

    /**
     * Gets creditScoreMin
     *
     * @return int|null
     */
    public function getCreditScoreMin()
    {
        return $this->container['creditScoreMin'];
    }

    /**
     * Sets creditScoreMin
     *
     * @param int|null $creditScoreMin Minimum credit score
     *
     * @return $this
     */
    public function setCreditScoreMin($creditScoreMin)
    {
        $this->container['creditScoreMin'] = $creditScoreMin;

        return $this;
    }

    /**
     * Gets creditScoreMax
     *
     * @return int|null
     */
    public function getCreditScoreMax()
    {
        return $this->container['creditScoreMax'];
    }

    /**
     * Sets creditScoreMax
     *
     * @param int|null $creditScoreMax Maximum credit score
     *
     * @return $this
     */
    public function setCreditScoreMax($creditScoreMax)
    {
        $this->container['creditScoreMax'] = $creditScoreMax;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName Borrower's username
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int|null $gender Borrower's gender: Male 0, Female 1, Unknown 2
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets ageMin
     *
     * @return int|null
     */
    public function getAgeMin()
    {
        return $this->container['ageMin'];
    }

    /**
     * Sets ageMin
     *
     * @param int|null $ageMin Minimal age
     *
     * @return $this
     */
    public function setAgeMin($ageMin)
    {
        $this->container['ageMin'] = $ageMin;

        return $this;
    }

    /**
     * Gets ageMax
     *
     * @return int|null
     */
    public function getAgeMax()
    {
        return $this->container['ageMax'];
    }

    /**
     * Sets ageMax
     *
     * @param int|null $ageMax Maximum age
     *
     * @return $this
     */
    public function setAgeMax($ageMax)
    {
        $this->container['ageMax'] = $ageMax;

        return $this;
    }

    /**
     * Gets incomeVerificationStatus
     *
     * @return int|null
     */
    public function getIncomeVerificationStatus()
    {
        return $this->container['incomeVerificationStatus'];
    }

    /**
     * Sets incomeVerificationStatus
     *
     * @param int|null $incomeVerificationStatus Income verification type
     *
     * @return $this
     */
    public function setIncomeVerificationStatus($incomeVerificationStatus)
    {
        $allowedValues = $this->getIncomeVerificationStatusAllowableValues();
        if (!is_null($incomeVerificationStatus) && !in_array($incomeVerificationStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'incomeVerificationStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incomeVerificationStatus'] = $incomeVerificationStatus;

        return $this;
    }

    /**
     * Gets showMyItems
     *
     * @return bool|null
     */
    public function getShowMyItems()
    {
        return $this->container['showMyItems'];
    }

    /**
     * Sets showMyItems
     *
     * @param bool|null $showMyItems Can find your own items from market: Value Null = ALL, True = only your items, False = other user items
     *
     * @return $this
     */
    public function setShowMyItems($showMyItems)
    {
        $this->container['showMyItems'] = $showMyItems;

        return $this;
    }

    /**
     * Gets auctionId
     *
     * @return string|null
     */
    public function getAuctionId()
    {
        return $this->container['auctionId'];
    }

    /**
     * Sets auctionId
     *
     * @param string|null $auctionId Can find specific auction from market
     *
     * @return $this
     */
    public function setAuctionId($auctionId)
    {
        $this->container['auctionId'] = $auctionId;

        return $this;
    }

    /**
     * Gets listedOnDateFrom
     *
     * @return \DateTime|null
     */
    public function getListedOnDateFrom()
    {
        return $this->container['listedOnDateFrom'];
    }

    /**
     * Sets listedOnDateFrom
     *
     * @param \DateTime|null $listedOnDateFrom Date when item was published from
     *
     * @return $this
     */
    public function setListedOnDateFrom($listedOnDateFrom)
    {
        $this->container['listedOnDateFrom'] = $listedOnDateFrom;

        return $this;
    }

    /**
     * Gets listedOnDateTo
     *
     * @return \DateTime|null
     */
    public function getListedOnDateTo()
    {
        return $this->container['listedOnDateTo'];
    }

    /**
     * Sets listedOnDateTo
     *
     * @param \DateTime|null $listedOnDateTo Date when item was published to
     *
     * @return $this
     */
    public function setListedOnDateTo($listedOnDateTo)
    {
        $this->container['listedOnDateTo'] = $listedOnDateTo;

        return $this;
    }

    /**
     * Gets debtOccuredOnFrom
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOnFrom()
    {
        return $this->container['debtOccuredOnFrom'];
    }

    /**
     * Sets debtOccuredOnFrom
     *
     * @param \DateTime|null $debtOccuredOnFrom Principal debt started date from
     *
     * @return $this
     */
    public function setDebtOccuredOnFrom($debtOccuredOnFrom)
    {
        $this->container['debtOccuredOnFrom'] = $debtOccuredOnFrom;

        return $this;
    }

    /**
     * Gets debtOccuredOnTo
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOnTo()
    {
        return $this->container['debtOccuredOnTo'];
    }

    /**
     * Sets debtOccuredOnTo
     *
     * @param \DateTime|null $debtOccuredOnTo Principal debt started date to
     *
     * @return $this
     */
    public function setDebtOccuredOnTo($debtOccuredOnTo)
    {
        $this->container['debtOccuredOnTo'] = $debtOccuredOnTo;

        return $this;
    }

    /**
     * Gets debtOccuredOnForSecondaryFrom
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOnForSecondaryFrom()
    {
        return $this->container['debtOccuredOnForSecondaryFrom'];
    }

    /**
     * Sets debtOccuredOnForSecondaryFrom
     *
     * @param \DateTime|null $debtOccuredOnForSecondaryFrom Interest debt started date from
     *
     * @return $this
     */
    public function setDebtOccuredOnForSecondaryFrom($debtOccuredOnForSecondaryFrom)
    {
        $this->container['debtOccuredOnForSecondaryFrom'] = $debtOccuredOnForSecondaryFrom;

        return $this;
    }

    /**
     * Gets debtOccuredOnForSecondaryTo
     *
     * @return \DateTime|null
     */
    public function getDebtOccuredOnForSecondaryTo()
    {
        return $this->container['debtOccuredOnForSecondaryTo'];
    }

    /**
     * Sets debtOccuredOnForSecondaryTo
     *
     * @param \DateTime|null $debtOccuredOnForSecondaryTo Interest debt started date to
     *
     * @return $this
     */
    public function setDebtOccuredOnForSecondaryTo($debtOccuredOnForSecondaryTo)
    {
        $this->container['debtOccuredOnForSecondaryTo'] = $debtOccuredOnForSecondaryTo;

        return $this;
    }

    /**
     * Gets defaultedDateFrom
     *
     * @return \DateTime|null
     */
    public function getDefaultedDateFrom()
    {
        return $this->container['defaultedDateFrom'];
    }

    /**
     * Sets defaultedDateFrom
     *
     * @param \DateTime|null $defaultedDateFrom Defaulted date from
     *
     * @return $this
     */
    public function setDefaultedDateFrom($defaultedDateFrom)
    {
        $this->container['defaultedDateFrom'] = $defaultedDateFrom;

        return $this;
    }

    /**
     * Gets defaultedDateTo
     *
     * @return \DateTime|null
     */
    public function getDefaultedDateTo()
    {
        return $this->container['defaultedDateTo'];
    }

    /**
     * Sets defaultedDateTo
     *
     * @param \DateTime|null $defaultedDateTo Defaulted date to
     *
     * @return $this
     */
    public function setDefaultedDateTo($defaultedDateTo)
    {
        $this->container['defaultedDateTo'] = $defaultedDateTo;

        return $this;
    }

    /**
     * Gets rescheduledFrom
     *
     * @return \DateTime|null
     */
    public function getRescheduledFrom()
    {
        return $this->container['rescheduledFrom'];
    }

    /**
     * Sets rescheduledFrom
     *
     * @param \DateTime|null $rescheduledFrom Rescheduled date from
     *
     * @return $this
     */
    public function setRescheduledFrom($rescheduledFrom)
    {
        $this->container['rescheduledFrom'] = $rescheduledFrom;

        return $this;
    }

    /**
     * Gets rescheduledTo
     *
     * @return \DateTime|null
     */
    public function getRescheduledTo()
    {
        return $this->container['rescheduledTo'];
    }

    /**
     * Sets rescheduledTo
     *
     * @param \DateTime|null $rescheduledTo Rescheduled date to
     *
     * @return $this
     */
    public function setRescheduledTo($rescheduledTo)
    {
        $this->container['rescheduledTo'] = $rescheduledTo;

        return $this;
    }

    /**
     * Gets lastPaymentDateFrom
     *
     * @return \DateTime|null
     */
    public function getLastPaymentDateFrom()
    {
        return $this->container['lastPaymentDateFrom'];
    }

    /**
     * Sets lastPaymentDateFrom
     *
     * @param \DateTime|null $lastPaymentDateFrom Last payment date from
     *
     * @return $this
     */
    public function setLastPaymentDateFrom($lastPaymentDateFrom)
    {
        $this->container['lastPaymentDateFrom'] = $lastPaymentDateFrom;

        return $this;
    }

    /**
     * Gets lastPaymentDateTo
     *
     * @return \DateTime|null
     */
    public function getLastPaymentDateTo()
    {
        return $this->container['lastPaymentDateTo'];
    }

    /**
     * Sets lastPaymentDateTo
     *
     * @param \DateTime|null $lastPaymentDateTo Last payment date to
     *
     * @return $this
     */
    public function setLastPaymentDateTo($lastPaymentDateTo)
    {
        $this->container['lastPaymentDateTo'] = $lastPaymentDateTo;

        return $this;
    }

    /**
     * Gets nextPaymentDateFrom
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDateFrom()
    {
        return $this->container['nextPaymentDateFrom'];
    }

    /**
     * Sets nextPaymentDateFrom
     *
     * @param \DateTime|null $nextPaymentDateFrom Next payment date from
     *
     * @return $this
     */
    public function setNextPaymentDateFrom($nextPaymentDateFrom)
    {
        $this->container['nextPaymentDateFrom'] = $nextPaymentDateFrom;

        return $this;
    }

    /**
     * Gets nextPaymentDateTo
     *
     * @return \DateTime|null
     */
    public function getNextPaymentDateTo()
    {
        return $this->container['nextPaymentDateTo'];
    }

    /**
     * Sets nextPaymentDateTo
     *
     * @param \DateTime|null $nextPaymentDateTo Next payment date to
     *
     * @return $this
     */
    public function setNextPaymentDateTo($nextPaymentDateTo)
    {
        $this->container['nextPaymentDateTo'] = $nextPaymentDateTo;

        return $this;
    }

    /**
     * Gets desiredDiscountRateMin
     *
     * @return double|null
     */
    public function getDesiredDiscountRateMin()
    {
        return $this->container['desiredDiscountRateMin'];
    }

    /**
     * Sets desiredDiscountRateMin
     *
     * @param double|null $desiredDiscountRateMin Minimal DesiredDiscountRate
     *
     * @return $this
     */
    public function setDesiredDiscountRateMin($desiredDiscountRateMin)
    {
        $this->container['desiredDiscountRateMin'] = $desiredDiscountRateMin;

        return $this;
    }

    /**
     * Gets desiredDiscountRateMax
     *
     * @return double|null
     */
    public function getDesiredDiscountRateMax()
    {
        return $this->container['desiredDiscountRateMax'];
    }

    /**
     * Sets desiredDiscountRateMax
     *
     * @param double|null $desiredDiscountRateMax Maximal DesiredDiscountRate
     *
     * @return $this
     */
    public function setDesiredDiscountRateMax($desiredDiscountRateMax)
    {
        $this->container['desiredDiscountRateMax'] = $desiredDiscountRateMax;

        return $this;
    }

    /**
     * Gets xirrMin
     *
     * @return double|null
     */
    public function getXirrMin()
    {
        return $this->container['xirrMin'];
    }

    /**
     * Sets xirrMin
     *
     * @param double|null $xirrMin Minimal Xirr
     *
     * @return $this
     */
    public function setXirrMin($xirrMin)
    {
        $this->container['xirrMin'] = $xirrMin;

        return $this;
    }

    /**
     * Gets xirrMax
     *
     * @return double|null
     */
    public function getXirrMax()
    {
        return $this->container['xirrMax'];
    }

    /**
     * Sets xirrMax
     *
     * @param double|null $xirrMax Maximal Xirr
     *
     * @return $this
     */
    public function setXirrMax($xirrMax)
    {
        $this->container['xirrMax'] = $xirrMax;

        return $this;
    }

    /**
     * Gets pageSize
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['pageSize'];
    }

    /**
     * Sets pageSize
     *
     * @param int|null $pageSize Max items in result, up to 100000
     *
     * @return $this
     */
    public function setPageSize($pageSize)
    {

        if (!is_null($pageSize) && ($pageSize > 100000)) {
            throw new \InvalidArgumentException('invalid value for $pageSize when calling SecondMarketRequest., must be smaller than or equal to 100000.');
        }
        if (!is_null($pageSize) && ($pageSize < 1)) {
            throw new \InvalidArgumentException('invalid value for $pageSize when calling SecondMarketRequest., must be bigger than or equal to 1.');
        }

        $this->container['pageSize'] = $pageSize;

        return $this;
    }

    /**
     * Gets pageNr
     *
     * @return int|null
     */
    public function getPageNr()
    {
        return $this->container['pageNr'];
    }

    /**
     * Sets pageNr
     *
     * @param int|null $pageNr Result page nr
     *
     * @return $this
     */
    public function setPageNr($pageNr)
    {

        if (!is_null($pageNr) && ($pageNr > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $pageNr when calling SecondMarketRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($pageNr) && ($pageNr < 1)) {
            throw new \InvalidArgumentException('invalid value for $pageNr when calling SecondMarketRequest., must be bigger than or equal to 1.');
        }

        $this->container['pageNr'] = $pageNr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


