<?php
/**
 * ReportItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * ReportItem Class Doc Comment
 *
 * @category Class
 * @description Generec Report data
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'reportId' => 'string',
        'createdOn' => '\DateTime',
        'generatedOn' => '\DateTime',
        'periodStart' => '\DateTime',
        'periodEnd' => '\DateTime',
        'reportType' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'reportId' => null,
        'createdOn' => 'date-time',
        'generatedOn' => 'date-time',
        'periodStart' => 'date-time',
        'periodEnd' => 'date-time',
        'reportType' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reportId' => 'ReportId',
        'createdOn' => 'CreatedOn',
        'generatedOn' => 'GeneratedOn',
        'periodStart' => 'PeriodStart',
        'periodEnd' => 'PeriodEnd',
        'reportType' => 'ReportType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reportId' => 'setReportId',
        'createdOn' => 'setCreatedOn',
        'generatedOn' => 'setGeneratedOn',
        'periodStart' => 'setPeriodStart',
        'periodEnd' => 'setPeriodEnd',
        'reportType' => 'setReportType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reportId' => 'getReportId',
        'createdOn' => 'getCreatedOn',
        'generatedOn' => 'getGeneratedOn',
        'periodStart' => 'getPeriodStart',
        'periodEnd' => 'getPeriodEnd',
        'reportType' => 'getReportType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REPORT_TYPE_1 = 1;
    const REPORT_TYPE_2 = 2;
    const REPORT_TYPE_3 = 3;
    const REPORT_TYPE_4 = 4;
    const REPORT_TYPE_5 = 5;
    const REPORT_TYPE_6 = 6;
    const REPORT_TYPE_7 = 7;
    const REPORT_TYPE_8 = 8;
    const REPORT_TYPE_9 = 9;
    const REPORT_TYPE_10 = 10;
    const REPORT_TYPE_11 = 11;
    const REPORT_TYPE_12 = 12;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportTypeAllowableValues()
    {
        return [
            self::REPORT_TYPE_1,
            self::REPORT_TYPE_2,
            self::REPORT_TYPE_3,
            self::REPORT_TYPE_4,
            self::REPORT_TYPE_5,
            self::REPORT_TYPE_6,
            self::REPORT_TYPE_7,
            self::REPORT_TYPE_8,
            self::REPORT_TYPE_9,
            self::REPORT_TYPE_10,
            self::REPORT_TYPE_11,
            self::REPORT_TYPE_12,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reportId'] = isset($data['reportId']) ? $data['reportId'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['generatedOn'] = isset($data['generatedOn']) ? $data['generatedOn'] : null;
        $this->container['periodStart'] = isset($data['periodStart']) ? $data['periodStart'] : null;
        $this->container['periodEnd'] = isset($data['periodEnd']) ? $data['periodEnd'] : null;
        $this->container['reportType'] = isset($data['reportType']) ? $data['reportType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($this->container['reportType']) && !in_array($this->container['reportType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reportType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reportId
     *
     * @return string|null
     */
    public function getReportId()
    {
        return $this->container['reportId'];
    }

    /**
     * Sets reportId
     *
     * @param string|null $reportId Reports unique identifier
     *
     * @return $this
     */
    public function setReportId($reportId)
    {
        $this->container['reportId'] = $reportId;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime|null $createdOn Report created date
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets generatedOn
     *
     * @return \DateTime|null
     */
    public function getGeneratedOn()
    {
        return $this->container['generatedOn'];
    }

    /**
     * Sets generatedOn
     *
     * @param \DateTime|null $generatedOn Report generated date
     *
     * @return $this
     */
    public function setGeneratedOn($generatedOn)
    {
        $this->container['generatedOn'] = $generatedOn;

        return $this;
    }

    /**
     * Gets periodStart
     *
     * @return \DateTime|null
     */
    public function getPeriodStart()
    {
        return $this->container['periodStart'];
    }

    /**
     * Sets periodStart
     *
     * @param \DateTime|null $periodStart Report period end date
     *
     * @return $this
     */
    public function setPeriodStart($periodStart)
    {
        $this->container['periodStart'] = $periodStart;

        return $this;
    }

    /**
     * Gets periodEnd
     *
     * @return \DateTime|null
     */
    public function getPeriodEnd()
    {
        return $this->container['periodEnd'];
    }

    /**
     * Sets periodEnd
     *
     * @param \DateTime|null $periodEnd Report period start date
     *
     * @return $this
     */
    public function setPeriodEnd($periodEnd)
    {
        $this->container['periodEnd'] = $periodEnd;

        return $this;
    }

    /**
     * Gets reportType
     *
     * @return int|null
     */
    public function getReportType()
    {
        return $this->container['reportType'];
    }

    /**
     * Sets reportType
     *
     * @param int|null $reportType Report's type
     *
     * @return $this
     */
    public function setReportType($reportType)
    {
        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($reportType) && !in_array($reportType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reportType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reportType'] = $reportType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


