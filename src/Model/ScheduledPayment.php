<?php
/**
 * ScheduledPayment
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * ScheduledPayment Class Doc Comment
 *
 * @category Class
 * @description Scheduled payment item information
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ScheduledPayment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduledPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduledDate' => '\DateTime',
        'principalAmount' => 'double',
        'principalAmountLeft' => 'double',
        'interestAmount' => 'double',
        'intrestAmountCarriedOver' => 'double',
        'penaltyAmountCarriedOver' => 'double',
        'totalAmount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'scheduledDate' => 'date-time',
        'principalAmount' => 'double',
        'principalAmountLeft' => 'double',
        'interestAmount' => 'double',
        'intrestAmountCarriedOver' => 'double',
        'penaltyAmountCarriedOver' => 'double',
        'totalAmount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduledDate' => 'ScheduledDate',
        'principalAmount' => 'PrincipalAmount',
        'principalAmountLeft' => 'PrincipalAmountLeft',
        'interestAmount' => 'InterestAmount',
        'intrestAmountCarriedOver' => 'IntrestAmountCarriedOver',
        'penaltyAmountCarriedOver' => 'PenaltyAmountCarriedOver',
        'totalAmount' => 'TotalAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduledDate' => 'setScheduledDate',
        'principalAmount' => 'setPrincipalAmount',
        'principalAmountLeft' => 'setPrincipalAmountLeft',
        'interestAmount' => 'setInterestAmount',
        'intrestAmountCarriedOver' => 'setIntrestAmountCarriedOver',
        'penaltyAmountCarriedOver' => 'setPenaltyAmountCarriedOver',
        'totalAmount' => 'setTotalAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduledDate' => 'getScheduledDate',
        'principalAmount' => 'getPrincipalAmount',
        'principalAmountLeft' => 'getPrincipalAmountLeft',
        'interestAmount' => 'getInterestAmount',
        'intrestAmountCarriedOver' => 'getIntrestAmountCarriedOver',
        'penaltyAmountCarriedOver' => 'getPenaltyAmountCarriedOver',
        'totalAmount' => 'getTotalAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scheduledDate'] = isset($data['scheduledDate']) ? $data['scheduledDate'] : null;
        $this->container['principalAmount'] = isset($data['principalAmount']) ? $data['principalAmount'] : null;
        $this->container['principalAmountLeft'] = isset($data['principalAmountLeft']) ? $data['principalAmountLeft'] : null;
        $this->container['interestAmount'] = isset($data['interestAmount']) ? $data['interestAmount'] : null;
        $this->container['intrestAmountCarriedOver'] = isset($data['intrestAmountCarriedOver']) ? $data['intrestAmountCarriedOver'] : null;
        $this->container['penaltyAmountCarriedOver'] = isset($data['penaltyAmountCarriedOver']) ? $data['penaltyAmountCarriedOver'] : null;
        $this->container['totalAmount'] = isset($data['totalAmount']) ? $data['totalAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduledDate
     *
     * @return \DateTime|null
     */
    public function getScheduledDate()
    {
        return $this->container['scheduledDate'];
    }

    /**
     * Sets scheduledDate
     *
     * @param \DateTime|null $scheduledDate Scheduled payment date
     *
     * @return $this
     */
    public function setScheduledDate($scheduledDate)
    {
        $this->container['scheduledDate'] = $scheduledDate;

        return $this;
    }

    /**
     * Gets principalAmount
     *
     * @return double|null
     */
    public function getPrincipalAmount()
    {
        return $this->container['principalAmount'];
    }

    /**
     * Sets principalAmount
     *
     * @param double|null $principalAmount Scheduled principal amount
     *
     * @return $this
     */
    public function setPrincipalAmount($principalAmount)
    {
        $this->container['principalAmount'] = $principalAmount;

        return $this;
    }

    /**
     * Gets principalAmountLeft
     *
     * @return double|null
     */
    public function getPrincipalAmountLeft()
    {
        return $this->container['principalAmountLeft'];
    }

    /**
     * Sets principalAmountLeft
     *
     * @param double|null $principalAmountLeft Scheduled principal amount remaining after payment
     *
     * @return $this
     */
    public function setPrincipalAmountLeft($principalAmountLeft)
    {
        $this->container['principalAmountLeft'] = $principalAmountLeft;

        return $this;
    }

    /**
     * Gets interestAmount
     *
     * @return double|null
     */
    public function getInterestAmount()
    {
        return $this->container['interestAmount'];
    }

    /**
     * Sets interestAmount
     *
     * @param double|null $interestAmount Scheduled interest amount
     *
     * @return $this
     */
    public function setInterestAmount($interestAmount)
    {
        $this->container['interestAmount'] = $interestAmount;

        return $this;
    }

    /**
     * Gets intrestAmountCarriedOver
     *
     * @return double|null
     */
    public function getIntrestAmountCarriedOver()
    {
        return $this->container['intrestAmountCarriedOver'];
    }

    /**
     * Sets intrestAmountCarriedOver
     *
     * @param double|null $intrestAmountCarriedOver Interest amount carried over from rescheduling
     *
     * @return $this
     */
    public function setIntrestAmountCarriedOver($intrestAmountCarriedOver)
    {
        $this->container['intrestAmountCarriedOver'] = $intrestAmountCarriedOver;

        return $this;
    }

    /**
     * Gets penaltyAmountCarriedOver
     *
     * @return double|null
     */
    public function getPenaltyAmountCarriedOver()
    {
        return $this->container['penaltyAmountCarriedOver'];
    }

    /**
     * Sets penaltyAmountCarriedOver
     *
     * @param double|null $penaltyAmountCarriedOver Penalty amount carried over from rescheduling
     *
     * @return $this
     */
    public function setPenaltyAmountCarriedOver($penaltyAmountCarriedOver)
    {
        $this->container['penaltyAmountCarriedOver'] = $penaltyAmountCarriedOver;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return double|null
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param double|null $totalAmount Total payment amount
     *
     * @return $this
     */
    public function setTotalAmount($totalAmount)
    {
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


