<?php
/**
 * BorrowerHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * BorrowerHistory Class Doc Comment
 *
 * @category Class
 * @description Borrower&#39;s history
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BorrowerHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BorrowerHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'overdue' => 'double',
        'principalRepaid' => 'double',
        'interestRepaid' => 'double',
        'lateChargesRepaid' => 'double',
        'repaimentsTotal' => 'double',
        'issuedLoans' => 'int',
        'issuedLoanAmount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'overdue' => 'double',
        'principalRepaid' => 'double',
        'interestRepaid' => 'double',
        'lateChargesRepaid' => 'double',
        'repaimentsTotal' => 'double',
        'issuedLoans' => 'int32',
        'issuedLoanAmount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overdue' => 'Overdue',
        'principalRepaid' => 'PrincipalRepaid',
        'interestRepaid' => 'InterestRepaid',
        'lateChargesRepaid' => 'LateChargesRepaid',
        'repaimentsTotal' => 'RepaimentsTotal',
        'issuedLoans' => 'IssuedLoans',
        'issuedLoanAmount' => 'IssuedLoanAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overdue' => 'setOverdue',
        'principalRepaid' => 'setPrincipalRepaid',
        'interestRepaid' => 'setInterestRepaid',
        'lateChargesRepaid' => 'setLateChargesRepaid',
        'repaimentsTotal' => 'setRepaimentsTotal',
        'issuedLoans' => 'setIssuedLoans',
        'issuedLoanAmount' => 'setIssuedLoanAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overdue' => 'getOverdue',
        'principalRepaid' => 'getPrincipalRepaid',
        'interestRepaid' => 'getInterestRepaid',
        'lateChargesRepaid' => 'getLateChargesRepaid',
        'repaimentsTotal' => 'getRepaimentsTotal',
        'issuedLoans' => 'getIssuedLoans',
        'issuedLoanAmount' => 'getIssuedLoanAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overdue'] = isset($data['overdue']) ? $data['overdue'] : null;
        $this->container['principalRepaid'] = isset($data['principalRepaid']) ? $data['principalRepaid'] : null;
        $this->container['interestRepaid'] = isset($data['interestRepaid']) ? $data['interestRepaid'] : null;
        $this->container['lateChargesRepaid'] = isset($data['lateChargesRepaid']) ? $data['lateChargesRepaid'] : null;
        $this->container['repaimentsTotal'] = isset($data['repaimentsTotal']) ? $data['repaimentsTotal'] : null;
        $this->container['issuedLoans'] = isset($data['issuedLoans']) ? $data['issuedLoans'] : null;
        $this->container['issuedLoanAmount'] = isset($data['issuedLoanAmount']) ? $data['issuedLoanAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets overdue
     *
     * @return double|null
     */
    public function getOverdue()
    {
        return $this->container['overdue'];
    }

    /**
     * Sets overdue
     *
     * @param double|null $overdue Borrower's current overdue amount
     *
     * @return $this
     */
    public function setOverdue($overdue)
    {
        $this->container['overdue'] = $overdue;

        return $this;
    }

    /**
     * Gets principalRepaid
     *
     * @return double|null
     */
    public function getPrincipalRepaid()
    {
        return $this->container['principalRepaid'];
    }

    /**
     * Sets principalRepaid
     *
     * @param double|null $principalRepaid Borrower's total principal repaid
     *
     * @return $this
     */
    public function setPrincipalRepaid($principalRepaid)
    {
        $this->container['principalRepaid'] = $principalRepaid;

        return $this;
    }

    /**
     * Gets interestRepaid
     *
     * @return double|null
     */
    public function getInterestRepaid()
    {
        return $this->container['interestRepaid'];
    }

    /**
     * Sets interestRepaid
     *
     * @param double|null $interestRepaid Borrower's total interest paid
     *
     * @return $this
     */
    public function setInterestRepaid($interestRepaid)
    {
        $this->container['interestRepaid'] = $interestRepaid;

        return $this;
    }

    /**
     * Gets lateChargesRepaid
     *
     * @return double|null
     */
    public function getLateChargesRepaid()
    {
        return $this->container['lateChargesRepaid'];
    }

    /**
     * Sets lateChargesRepaid
     *
     * @param double|null $lateChargesRepaid Borrower's total late charges paid
     *
     * @return $this
     */
    public function setLateChargesRepaid($lateChargesRepaid)
    {
        $this->container['lateChargesRepaid'] = $lateChargesRepaid;

        return $this;
    }

    /**
     * Gets repaimentsTotal
     *
     * @return double|null
     */
    public function getRepaimentsTotal()
    {
        return $this->container['repaimentsTotal'];
    }

    /**
     * Sets repaimentsTotal
     *
     * @param double|null $repaimentsTotal Borrower's total repaiments
     *
     * @return $this
     */
    public function setRepaimentsTotal($repaimentsTotal)
    {
        $this->container['repaimentsTotal'] = $repaimentsTotal;

        return $this;
    }

    /**
     * Gets issuedLoans
     *
     * @return int|null
     */
    public function getIssuedLoans()
    {
        return $this->container['issuedLoans'];
    }

    /**
     * Sets issuedLoans
     *
     * @param int|null $issuedLoans Borrower's issued loans count
     *
     * @return $this
     */
    public function setIssuedLoans($issuedLoans)
    {
        $this->container['issuedLoans'] = $issuedLoans;

        return $this;
    }

    /**
     * Gets issuedLoanAmount
     *
     * @return double|null
     */
    public function getIssuedLoanAmount()
    {
        return $this->container['issuedLoanAmount'];
    }

    /**
     * Sets issuedLoanAmount
     *
     * @param double|null $issuedLoanAmount Borrower's issued loans amount
     *
     * @return $this
     */
    public function setIssuedLoanAmount($issuedLoanAmount)
    {
        $this->container['issuedLoanAmount'] = $issuedLoanAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


