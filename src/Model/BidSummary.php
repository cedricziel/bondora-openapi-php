<?php
/**
 * BidSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * BidSummary Class Doc Comment
 *
 * @category Class
 * @description Bid&#39;s information
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BidSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BidSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'auctionId' => 'string',
        'requestedBidAmount' => 'double',
        'actualBidAmount' => 'double',
        'requestedBidMinimumLimit' => 'double',
        'bidRequestedDate' => '\DateTime',
        'bidProcessedDate' => '\DateTime',
        'isRequestBeingProcessed' => 'bool',
        'statusCode' => 'int',
        'failureReason' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'auctionId' => null,
        'requestedBidAmount' => 'double',
        'actualBidAmount' => 'double',
        'requestedBidMinimumLimit' => 'double',
        'bidRequestedDate' => 'date-time',
        'bidProcessedDate' => 'date-time',
        'isRequestBeingProcessed' => null,
        'statusCode' => 'int32',
        'failureReason' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'auctionId' => 'AuctionId',
        'requestedBidAmount' => 'RequestedBidAmount',
        'actualBidAmount' => 'ActualBidAmount',
        'requestedBidMinimumLimit' => 'RequestedBidMinimumLimit',
        'bidRequestedDate' => 'BidRequestedDate',
        'bidProcessedDate' => 'BidProcessedDate',
        'isRequestBeingProcessed' => 'IsRequestBeingProcessed',
        'statusCode' => 'StatusCode',
        'failureReason' => 'FailureReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'auctionId' => 'setAuctionId',
        'requestedBidAmount' => 'setRequestedBidAmount',
        'actualBidAmount' => 'setActualBidAmount',
        'requestedBidMinimumLimit' => 'setRequestedBidMinimumLimit',
        'bidRequestedDate' => 'setBidRequestedDate',
        'bidProcessedDate' => 'setBidProcessedDate',
        'isRequestBeingProcessed' => 'setIsRequestBeingProcessed',
        'statusCode' => 'setStatusCode',
        'failureReason' => 'setFailureReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'auctionId' => 'getAuctionId',
        'requestedBidAmount' => 'getRequestedBidAmount',
        'actualBidAmount' => 'getActualBidAmount',
        'requestedBidMinimumLimit' => 'getRequestedBidMinimumLimit',
        'bidRequestedDate' => 'getBidRequestedDate',
        'bidProcessedDate' => 'getBidProcessedDate',
        'isRequestBeingProcessed' => 'getIsRequestBeingProcessed',
        'statusCode' => 'getStatusCode',
        'failureReason' => 'getFailureReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_CODE_0 = 0;
    const STATUS_CODE_1 = 1;
    const STATUS_CODE_2 = 2;
    const STATUS_CODE_3 = 3;
    const STATUS_CODE_4 = 4;
    const STATUS_CODE_5 = 5;
    const FAILURE_REASON_0 = 0;
    const FAILURE_REASON_1 = 1;
    const FAILURE_REASON_2 = 2;
    const FAILURE_REASON_3 = 3;
    const FAILURE_REASON_4 = 4;
    const FAILURE_REASON_5 = 5;
    const FAILURE_REASON_6 = 6;
    const FAILURE_REASON_7 = 7;
    const FAILURE_REASON_8 = 8;
    const FAILURE_REASON_9 = 9;
    const FAILURE_REASON_10 = 10;
    const FAILURE_REASON_11 = 11;
    const FAILURE_REASON_12 = 12;
    const FAILURE_REASON_13 = 13;
    const FAILURE_REASON_14 = 14;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusCodeAllowableValues()
    {
        return [
            self::STATUS_CODE_0,
            self::STATUS_CODE_1,
            self::STATUS_CODE_2,
            self::STATUS_CODE_3,
            self::STATUS_CODE_4,
            self::STATUS_CODE_5,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFailureReasonAllowableValues()
    {
        return [
            self::FAILURE_REASON_0,
            self::FAILURE_REASON_1,
            self::FAILURE_REASON_2,
            self::FAILURE_REASON_3,
            self::FAILURE_REASON_4,
            self::FAILURE_REASON_5,
            self::FAILURE_REASON_6,
            self::FAILURE_REASON_7,
            self::FAILURE_REASON_8,
            self::FAILURE_REASON_9,
            self::FAILURE_REASON_10,
            self::FAILURE_REASON_11,
            self::FAILURE_REASON_12,
            self::FAILURE_REASON_13,
            self::FAILURE_REASON_14,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['auctionId'] = isset($data['auctionId']) ? $data['auctionId'] : null;
        $this->container['requestedBidAmount'] = isset($data['requestedBidAmount']) ? $data['requestedBidAmount'] : null;
        $this->container['actualBidAmount'] = isset($data['actualBidAmount']) ? $data['actualBidAmount'] : null;
        $this->container['requestedBidMinimumLimit'] = isset($data['requestedBidMinimumLimit']) ? $data['requestedBidMinimumLimit'] : null;
        $this->container['bidRequestedDate'] = isset($data['bidRequestedDate']) ? $data['bidRequestedDate'] : null;
        $this->container['bidProcessedDate'] = isset($data['bidProcessedDate']) ? $data['bidProcessedDate'] : null;
        $this->container['isRequestBeingProcessed'] = isset($data['isRequestBeingProcessed']) ? $data['isRequestBeingProcessed'] : null;
        $this->container['statusCode'] = isset($data['statusCode']) ? $data['statusCode'] : null;
        $this->container['failureReason'] = isset($data['failureReason']) ? $data['failureReason'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($this->container['statusCode']) && !in_array($this->container['statusCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'statusCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFailureReasonAllowableValues();
        if (!is_null($this->container['failureReason']) && !in_array($this->container['failureReason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'failureReason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Bid unique identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets auctionId
     *
     * @return string|null
     */
    public function getAuctionId()
    {
        return $this->container['auctionId'];
    }

    /**
     * Sets auctionId
     *
     * @param string|null $auctionId Id of auction to bid into
     *
     * @return $this
     */
    public function setAuctionId($auctionId)
    {
        $this->container['auctionId'] = $auctionId;

        return $this;
    }

    /**
     * Gets requestedBidAmount
     *
     * @return double|null
     */
    public function getRequestedBidAmount()
    {
        return $this->container['requestedBidAmount'];
    }

    /**
     * Sets requestedBidAmount
     *
     * @param double|null $requestedBidAmount Amount that was requested to bid
     *
     * @return $this
     */
    public function setRequestedBidAmount($requestedBidAmount)
    {
        $this->container['requestedBidAmount'] = $requestedBidAmount;

        return $this;
    }

    /**
     * Gets actualBidAmount
     *
     * @return double|null
     */
    public function getActualBidAmount()
    {
        return $this->container['actualBidAmount'];
    }

    /**
     * Sets actualBidAmount
     *
     * @param double|null $actualBidAmount Amount that is bidded
     *
     * @return $this
     */
    public function setActualBidAmount($actualBidAmount)
    {
        $this->container['actualBidAmount'] = $actualBidAmount;

        return $this;
    }

    /**
     * Gets requestedBidMinimumLimit
     *
     * @return double|null
     */
    public function getRequestedBidMinimumLimit()
    {
        return $this->container['requestedBidMinimumLimit'];
    }

    /**
     * Sets requestedBidMinimumLimit
     *
     * @param double|null $requestedBidMinimumLimit Minimum amount that was specified for auction
     *
     * @return $this
     */
    public function setRequestedBidMinimumLimit($requestedBidMinimumLimit)
    {
        $this->container['requestedBidMinimumLimit'] = $requestedBidMinimumLimit;

        return $this;
    }

    /**
     * Gets bidRequestedDate
     *
     * @return \DateTime|null
     */
    public function getBidRequestedDate()
    {
        return $this->container['bidRequestedDate'];
    }

    /**
     * Sets bidRequestedDate
     *
     * @param \DateTime|null $bidRequestedDate When bid was requested
     *
     * @return $this
     */
    public function setBidRequestedDate($bidRequestedDate)
    {
        $this->container['bidRequestedDate'] = $bidRequestedDate;

        return $this;
    }

    /**
     * Gets bidProcessedDate
     *
     * @return \DateTime|null
     */
    public function getBidProcessedDate()
    {
        return $this->container['bidProcessedDate'];
    }

    /**
     * Sets bidProcessedDate
     *
     * @param \DateTime|null $bidProcessedDate When bid was processed
     *
     * @return $this
     */
    public function setBidProcessedDate($bidProcessedDate)
    {
        $this->container['bidProcessedDate'] = $bidProcessedDate;

        return $this;
    }

    /**
     * Gets isRequestBeingProcessed
     *
     * @return bool|null
     */
    public function getIsRequestBeingProcessed()
    {
        return $this->container['isRequestBeingProcessed'];
    }

    /**
     * Sets isRequestBeingProcessed
     *
     * @param bool|null $isRequestBeingProcessed Is request currently processed
     *
     * @return $this
     */
    public function setIsRequestBeingProcessed($isRequestBeingProcessed)
    {
        $this->container['isRequestBeingProcessed'] = $isRequestBeingProcessed;

        return $this;
    }

    /**
     * Gets statusCode
     *
     * @return int|null
     */
    public function getStatusCode()
    {
        return $this->container['statusCode'];
    }

    /**
     * Sets statusCode
     *
     * @param int|null $statusCode Status of bid              <para>0 Pending</para><para>1 Open</para><para>2 Successful</para><para>3 Failed</para><para>4 Cancelled</para><para>5 Accepted</para>
     *
     * @return $this
     */
    public function setStatusCode($statusCode)
    {
        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($statusCode) && !in_array($statusCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'statusCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['statusCode'] = $statusCode;

        return $this;
    }

    /**
     * Gets failureReason
     *
     * @return int|null
     */
    public function getFailureReason()
    {
        return $this->container['failureReason'];
    }

    /**
     * Sets failureReason
     *
     * @param int|null $failureReason Why bid failed
     *
     * @return $this
     */
    public function setFailureReason($failureReason)
    {
        $allowedValues = $this->getFailureReasonAllowableValues();
        if (!is_null($failureReason) && !in_array($failureReason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'failureReason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['failureReason'] = $failureReason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


