<?php
/**
 * AuctionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bondora API V1
 *
 * Bondora API version 1
 *
 * The version of the OpenAPI document: v1
 * Contact: investor@bondora.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace CedricZiel\OpenAPI\BondoraPHP\Model;

use \ArrayAccess;
use \CedricZiel\OpenAPI\BondoraPHP\ObjectSerializer;

/**
 * AuctionRequest Class Doc Comment
 *
 * @category Class
 * @description Request object for filtering auctions
 * @package  CedricZiel\OpenAPI\BondoraPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuctionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuctionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'countries' => 'string[]',
        'ratings' => 'string[]',
        'gender' => 'int',
        'sumMin' => 'int',
        'sumMax' => 'int',
        'terms' => 'int[]',
        'ageMin' => 'int',
        'ageMax' => 'int',
        'loanNumber' => 'int',
        'userName' => 'string',
        'applicationDateFrom' => '\DateTime',
        'applicationDateTo' => '\DateTime',
        'creditScoreMin' => 'int',
        'creditScoreMax' => 'int',
        'creditScoresEeMini' => 'string[]',
        'interestMin' => 'double',
        'interestMax' => 'double',
        'incomeTotalMin' => 'double',
        'incomeTotalMax' => 'double',
        'modelVersion' => 'int',
        'expectedLossMin' => 'double',
        'expectedLossMax' => 'double',
        'listedOnUTCFrom' => '\DateTime',
        'listedOnUTCTo' => '\DateTime',
        'pageSize' => 'int',
        'pageNr' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'countries' => null,
        'ratings' => null,
        'gender' => 'int32',
        'sumMin' => 'int32',
        'sumMax' => 'int32',
        'terms' => 'int32',
        'ageMin' => 'int32',
        'ageMax' => 'int32',
        'loanNumber' => 'int32',
        'userName' => null,
        'applicationDateFrom' => 'date-time',
        'applicationDateTo' => 'date-time',
        'creditScoreMin' => 'int32',
        'creditScoreMax' => 'int32',
        'creditScoresEeMini' => null,
        'interestMin' => 'double',
        'interestMax' => 'double',
        'incomeTotalMin' => 'double',
        'incomeTotalMax' => 'double',
        'modelVersion' => 'int32',
        'expectedLossMin' => 'double',
        'expectedLossMax' => 'double',
        'listedOnUTCFrom' => 'date-time',
        'listedOnUTCTo' => 'date-time',
        'pageSize' => 'int32',
        'pageNr' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countries' => 'Countries',
        'ratings' => 'Ratings',
        'gender' => 'Gender',
        'sumMin' => 'SumMin',
        'sumMax' => 'SumMax',
        'terms' => 'Terms',
        'ageMin' => 'AgeMin',
        'ageMax' => 'AgeMax',
        'loanNumber' => 'LoanNumber',
        'userName' => 'UserName',
        'applicationDateFrom' => 'ApplicationDateFrom',
        'applicationDateTo' => 'ApplicationDateTo',
        'creditScoreMin' => 'CreditScoreMin',
        'creditScoreMax' => 'CreditScoreMax',
        'creditScoresEeMini' => 'CreditScoresEeMini',
        'interestMin' => 'InterestMin',
        'interestMax' => 'InterestMax',
        'incomeTotalMin' => 'IncomeTotalMin',
        'incomeTotalMax' => 'IncomeTotalMax',
        'modelVersion' => 'ModelVersion',
        'expectedLossMin' => 'ExpectedLossMin',
        'expectedLossMax' => 'ExpectedLossMax',
        'listedOnUTCFrom' => 'ListedOnUTCFrom',
        'listedOnUTCTo' => 'ListedOnUTCTo',
        'pageSize' => 'PageSize',
        'pageNr' => 'PageNr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countries' => 'setCountries',
        'ratings' => 'setRatings',
        'gender' => 'setGender',
        'sumMin' => 'setSumMin',
        'sumMax' => 'setSumMax',
        'terms' => 'setTerms',
        'ageMin' => 'setAgeMin',
        'ageMax' => 'setAgeMax',
        'loanNumber' => 'setLoanNumber',
        'userName' => 'setUserName',
        'applicationDateFrom' => 'setApplicationDateFrom',
        'applicationDateTo' => 'setApplicationDateTo',
        'creditScoreMin' => 'setCreditScoreMin',
        'creditScoreMax' => 'setCreditScoreMax',
        'creditScoresEeMini' => 'setCreditScoresEeMini',
        'interestMin' => 'setInterestMin',
        'interestMax' => 'setInterestMax',
        'incomeTotalMin' => 'setIncomeTotalMin',
        'incomeTotalMax' => 'setIncomeTotalMax',
        'modelVersion' => 'setModelVersion',
        'expectedLossMin' => 'setExpectedLossMin',
        'expectedLossMax' => 'setExpectedLossMax',
        'listedOnUTCFrom' => 'setListedOnUTCFrom',
        'listedOnUTCTo' => 'setListedOnUTCTo',
        'pageSize' => 'setPageSize',
        'pageNr' => 'setPageNr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countries' => 'getCountries',
        'ratings' => 'getRatings',
        'gender' => 'getGender',
        'sumMin' => 'getSumMin',
        'sumMax' => 'getSumMax',
        'terms' => 'getTerms',
        'ageMin' => 'getAgeMin',
        'ageMax' => 'getAgeMax',
        'loanNumber' => 'getLoanNumber',
        'userName' => 'getUserName',
        'applicationDateFrom' => 'getApplicationDateFrom',
        'applicationDateTo' => 'getApplicationDateTo',
        'creditScoreMin' => 'getCreditScoreMin',
        'creditScoreMax' => 'getCreditScoreMax',
        'creditScoresEeMini' => 'getCreditScoresEeMini',
        'interestMin' => 'getInterestMin',
        'interestMax' => 'getInterestMax',
        'incomeTotalMin' => 'getIncomeTotalMin',
        'incomeTotalMax' => 'getIncomeTotalMax',
        'modelVersion' => 'getModelVersion',
        'expectedLossMin' => 'getExpectedLossMin',
        'expectedLossMax' => 'getExpectedLossMax',
        'listedOnUTCFrom' => 'getListedOnUTCFrom',
        'listedOnUTCTo' => 'getListedOnUTCTo',
        'pageSize' => 'getPageSize',
        'pageNr' => 'getPageNr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['ratings'] = isset($data['ratings']) ? $data['ratings'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['sumMin'] = isset($data['sumMin']) ? $data['sumMin'] : null;
        $this->container['sumMax'] = isset($data['sumMax']) ? $data['sumMax'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['ageMin'] = isset($data['ageMin']) ? $data['ageMin'] : null;
        $this->container['ageMax'] = isset($data['ageMax']) ? $data['ageMax'] : null;
        $this->container['loanNumber'] = isset($data['loanNumber']) ? $data['loanNumber'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['applicationDateFrom'] = isset($data['applicationDateFrom']) ? $data['applicationDateFrom'] : null;
        $this->container['applicationDateTo'] = isset($data['applicationDateTo']) ? $data['applicationDateTo'] : null;
        $this->container['creditScoreMin'] = isset($data['creditScoreMin']) ? $data['creditScoreMin'] : null;
        $this->container['creditScoreMax'] = isset($data['creditScoreMax']) ? $data['creditScoreMax'] : null;
        $this->container['creditScoresEeMini'] = isset($data['creditScoresEeMini']) ? $data['creditScoresEeMini'] : null;
        $this->container['interestMin'] = isset($data['interestMin']) ? $data['interestMin'] : null;
        $this->container['interestMax'] = isset($data['interestMax']) ? $data['interestMax'] : null;
        $this->container['incomeTotalMin'] = isset($data['incomeTotalMin']) ? $data['incomeTotalMin'] : null;
        $this->container['incomeTotalMax'] = isset($data['incomeTotalMax']) ? $data['incomeTotalMax'] : null;
        $this->container['modelVersion'] = isset($data['modelVersion']) ? $data['modelVersion'] : null;
        $this->container['expectedLossMin'] = isset($data['expectedLossMin']) ? $data['expectedLossMin'] : null;
        $this->container['expectedLossMax'] = isset($data['expectedLossMax']) ? $data['expectedLossMax'] : null;
        $this->container['listedOnUTCFrom'] = isset($data['listedOnUTCFrom']) ? $data['listedOnUTCFrom'] : null;
        $this->container['listedOnUTCTo'] = isset($data['listedOnUTCTo']) ? $data['listedOnUTCTo'] : null;
        $this->container['pageSize'] = isset($data['pageSize']) ? $data['pageSize'] : null;
        $this->container['pageNr'] = isset($data['pageNr']) ? $data['pageNr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pageSize']) && ($this->container['pageSize'] > 20000)) {
            $invalidProperties[] = "invalid value for 'pageSize', must be smaller than or equal to 20000.";
        }

        if (!is_null($this->container['pageSize']) && ($this->container['pageSize'] < 1)) {
            $invalidProperties[] = "invalid value for 'pageSize', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pageNr']) && ($this->container['pageNr'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'pageNr', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['pageNr']) && ($this->container['pageNr'] < 1)) {
            $invalidProperties[] = "invalid value for 'pageNr', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countries
     *
     * @return string[]|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[]|null $countries Two letter iso code for country of origin: EE, ES, FI
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets ratings
     *
     * @return string[]|null
     */
    public function getRatings()
    {
        return $this->container['ratings'];
    }

    /**
     * Sets ratings
     *
     * @param string[]|null $ratings Bondora's rating: AA, A, B, C, D, E, F, HR
     *
     * @return $this
     */
    public function setRatings($ratings)
    {
        $this->container['ratings'] = $ratings;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return int|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param int|null $gender Borrower's gender: Male 0, Female 1, Unknown 2
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets sumMin
     *
     * @return int|null
     */
    public function getSumMin()
    {
        return $this->container['sumMin'];
    }

    /**
     * Sets sumMin
     *
     * @param int|null $sumMin Minimal loan amount
     *
     * @return $this
     */
    public function setSumMin($sumMin)
    {
        $this->container['sumMin'] = $sumMin;

        return $this;
    }

    /**
     * Gets sumMax
     *
     * @return int|null
     */
    public function getSumMax()
    {
        return $this->container['sumMax'];
    }

    /**
     * Sets sumMax
     *
     * @param int|null $sumMax Maximum loan amount
     *
     * @return $this
     */
    public function setSumMax($sumMax)
    {
        $this->container['sumMax'] = $sumMax;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return int[]|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param int[]|null $terms Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets ageMin
     *
     * @return int|null
     */
    public function getAgeMin()
    {
        return $this->container['ageMin'];
    }

    /**
     * Sets ageMin
     *
     * @param int|null $ageMin Minimal age
     *
     * @return $this
     */
    public function setAgeMin($ageMin)
    {
        $this->container['ageMin'] = $ageMin;

        return $this;
    }

    /**
     * Gets ageMax
     *
     * @return int|null
     */
    public function getAgeMax()
    {
        return $this->container['ageMax'];
    }

    /**
     * Sets ageMax
     *
     * @param int|null $ageMax Maximum age
     *
     * @return $this
     */
    public function setAgeMax($ageMax)
    {
        $this->container['ageMax'] = $ageMax;

        return $this;
    }

    /**
     * Gets loanNumber
     *
     * @return int|null
     */
    public function getLoanNumber()
    {
        return $this->container['loanNumber'];
    }

    /**
     * Sets loanNumber
     *
     * @param int|null $loanNumber Loan number
     *
     * @return $this
     */
    public function setLoanNumber($loanNumber)
    {
        $this->container['loanNumber'] = $loanNumber;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|null $userName Username
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets applicationDateFrom
     *
     * @return \DateTime|null
     */
    public function getApplicationDateFrom()
    {
        return $this->container['applicationDateFrom'];
    }

    /**
     * Sets applicationDateFrom
     *
     * @param \DateTime|null $applicationDateFrom Loan application started date from
     *
     * @return $this
     */
    public function setApplicationDateFrom($applicationDateFrom)
    {
        $this->container['applicationDateFrom'] = $applicationDateFrom;

        return $this;
    }

    /**
     * Gets applicationDateTo
     *
     * @return \DateTime|null
     */
    public function getApplicationDateTo()
    {
        return $this->container['applicationDateTo'];
    }

    /**
     * Sets applicationDateTo
     *
     * @param \DateTime|null $applicationDateTo Loan application started date to
     *
     * @return $this
     */
    public function setApplicationDateTo($applicationDateTo)
    {
        $this->container['applicationDateTo'] = $applicationDateTo;

        return $this;
    }

    /**
     * Gets creditScoreMin
     *
     * @return int|null
     */
    public function getCreditScoreMin()
    {
        return $this->container['creditScoreMin'];
    }

    /**
     * Sets creditScoreMin
     *
     * @param int|null $creditScoreMin Minimum credit score
     *
     * @return $this
     */
    public function setCreditScoreMin($creditScoreMin)
    {
        $this->container['creditScoreMin'] = $creditScoreMin;

        return $this;
    }

    /**
     * Gets creditScoreMax
     *
     * @return int|null
     */
    public function getCreditScoreMax()
    {
        return $this->container['creditScoreMax'];
    }

    /**
     * Sets creditScoreMax
     *
     * @param int|null $creditScoreMax Maximum credit score
     *
     * @return $this
     */
    public function setCreditScoreMax($creditScoreMax)
    {
        $this->container['creditScoreMax'] = $creditScoreMax;

        return $this;
    }

    /**
     * Gets creditScoresEeMini
     *
     * @return string[]|null
     */
    public function getCreditScoresEeMini()
    {
        return $this->container['creditScoresEeMini'];
    }

    /**
     * Sets creditScoresEeMini
     *
     * @param string[]|null $creditScoresEeMini Credit score for EE loans
     *
     * @return $this
     */
    public function setCreditScoresEeMini($creditScoresEeMini)
    {
        $this->container['creditScoresEeMini'] = $creditScoresEeMini;

        return $this;
    }

    /**
     * Gets interestMin
     *
     * @return double|null
     */
    public function getInterestMin()
    {
        return $this->container['interestMin'];
    }

    /**
     * Sets interestMin
     *
     * @param double|null $interestMin Minimum interest
     *
     * @return $this
     */
    public function setInterestMin($interestMin)
    {
        $this->container['interestMin'] = $interestMin;

        return $this;
    }

    /**
     * Gets interestMax
     *
     * @return double|null
     */
    public function getInterestMax()
    {
        return $this->container['interestMax'];
    }

    /**
     * Sets interestMax
     *
     * @param double|null $interestMax Maximum interest
     *
     * @return $this
     */
    public function setInterestMax($interestMax)
    {
        $this->container['interestMax'] = $interestMax;

        return $this;
    }

    /**
     * Gets incomeTotalMin
     *
     * @return double|null
     */
    public function getIncomeTotalMin()
    {
        return $this->container['incomeTotalMin'];
    }

    /**
     * Sets incomeTotalMin
     *
     * @param double|null $incomeTotalMin Minimal total income
     *
     * @return $this
     */
    public function setIncomeTotalMin($incomeTotalMin)
    {
        $this->container['incomeTotalMin'] = $incomeTotalMin;

        return $this;
    }

    /**
     * Gets incomeTotalMax
     *
     * @return double|null
     */
    public function getIncomeTotalMax()
    {
        return $this->container['incomeTotalMax'];
    }

    /**
     * Sets incomeTotalMax
     *
     * @param double|null $incomeTotalMax Maximum total income
     *
     * @return $this
     */
    public function setIncomeTotalMax($incomeTotalMax)
    {
        $this->container['incomeTotalMax'] = $incomeTotalMax;

        return $this;
    }

    /**
     * Gets modelVersion
     *
     * @return int|null
     */
    public function getModelVersion()
    {
        return $this->container['modelVersion'];
    }

    /**
     * Sets modelVersion
     *
     * @param int|null $modelVersion Model version
     *
     * @return $this
     */
    public function setModelVersion($modelVersion)
    {
        $this->container['modelVersion'] = $modelVersion;

        return $this;
    }

    /**
     * Gets expectedLossMin
     *
     * @return double|null
     */
    public function getExpectedLossMin()
    {
        return $this->container['expectedLossMin'];
    }

    /**
     * Sets expectedLossMin
     *
     * @param double|null $expectedLossMin Minimal expected loss
     *
     * @return $this
     */
    public function setExpectedLossMin($expectedLossMin)
    {
        $this->container['expectedLossMin'] = $expectedLossMin;

        return $this;
    }

    /**
     * Gets expectedLossMax
     *
     * @return double|null
     */
    public function getExpectedLossMax()
    {
        return $this->container['expectedLossMax'];
    }

    /**
     * Sets expectedLossMax
     *
     * @param double|null $expectedLossMax Maximum expected loss
     *
     * @return $this
     */
    public function setExpectedLossMax($expectedLossMax)
    {
        $this->container['expectedLossMax'] = $expectedLossMax;

        return $this;
    }

    /**
     * Gets listedOnUTCFrom
     *
     * @return \DateTime|null
     */
    public function getListedOnUTCFrom()
    {
        return $this->container['listedOnUTCFrom'];
    }

    /**
     * Sets listedOnUTCFrom
     *
     * @param \DateTime|null $listedOnUTCFrom Date when auction was published from
     *
     * @return $this
     */
    public function setListedOnUTCFrom($listedOnUTCFrom)
    {
        $this->container['listedOnUTCFrom'] = $listedOnUTCFrom;

        return $this;
    }

    /**
     * Gets listedOnUTCTo
     *
     * @return \DateTime|null
     */
    public function getListedOnUTCTo()
    {
        return $this->container['listedOnUTCTo'];
    }

    /**
     * Sets listedOnUTCTo
     *
     * @param \DateTime|null $listedOnUTCTo Date when auction was published to
     *
     * @return $this
     */
    public function setListedOnUTCTo($listedOnUTCTo)
    {
        $this->container['listedOnUTCTo'] = $listedOnUTCTo;

        return $this;
    }

    /**
     * Gets pageSize
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['pageSize'];
    }

    /**
     * Sets pageSize
     *
     * @param int|null $pageSize Max items in result, up to 20000
     *
     * @return $this
     */
    public function setPageSize($pageSize)
    {

        if (!is_null($pageSize) && ($pageSize > 20000)) {
            throw new \InvalidArgumentException('invalid value for $pageSize when calling AuctionRequest., must be smaller than or equal to 20000.');
        }
        if (!is_null($pageSize) && ($pageSize < 1)) {
            throw new \InvalidArgumentException('invalid value for $pageSize when calling AuctionRequest., must be bigger than or equal to 1.');
        }

        $this->container['pageSize'] = $pageSize;

        return $this;
    }

    /**
     * Gets pageNr
     *
     * @return int|null
     */
    public function getPageNr()
    {
        return $this->container['pageNr'];
    }

    /**
     * Sets pageNr
     *
     * @param int|null $pageNr Result page nr
     *
     * @return $this
     */
    public function setPageNr($pageNr)
    {

        if (!is_null($pageNr) && ($pageNr > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $pageNr when calling AuctionRequest., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($pageNr) && ($pageNr < 1)) {
            throw new \InvalidArgumentException('invalid value for $pageNr when calling AuctionRequest., must be bigger than or equal to 1.');
        }

        $this->container['pageNr'] = $pageNr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


